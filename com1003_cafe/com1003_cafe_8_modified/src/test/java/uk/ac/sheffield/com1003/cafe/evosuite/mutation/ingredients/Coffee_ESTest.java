/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 17:53:43 GMT 2023
 */

package uk.ac.sheffield.com1003.cafe.evosuite.mutation.ingredients;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.ingredients.Coffee;
import uk.ac.sheffield.com1003.cafe.ingredients.Unit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Coffee_ESTest extends Coffee_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Coffee coffee0 = new Coffee(0);
      Coffee coffee1 = new Coffee(1533);
      boolean boolean0 = coffee0.equals(coffee1);
      assertEquals("Coffee", coffee1.getName());
      assertFalse(coffee1.equals((Object)coffee0));
      assertFalse(coffee1.getDecaf());
      assertEquals(1533, coffee1.getAmount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Coffee coffee0 = new Coffee(1);
      Coffee coffee1 = new Coffee(1, true);
      boolean boolean0 = coffee0.equals(coffee1);
      assertFalse(boolean0);
      assertTrue(coffee1.getDecaf());
      assertEquals(1, coffee1.getAmount());
      assertEquals("Coffee", coffee1.getName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      Coffee coffee1 = new Coffee();
      assertTrue(coffee1.equals((Object)coffee0));
      
//      Unit unit0 = Unit.ML;
//      coffee1.unit = unit0;
      boolean boolean0 = coffee0.equals(coffee1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      Coffee coffee1 = new Coffee((-1));
      boolean boolean0 = coffee0.equals(coffee1);
      assertFalse(coffee1.getDecaf());
      assertEquals("Coffee", coffee1.getName());
      assertFalse(coffee1.equals((Object)coffee0));
      assertEquals((-1), coffee1.getAmount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Coffee coffee0 = new Coffee();
      assertEquals("Coffee", coffee0.getName());
      
//      coffee0.name = "DG}kim";
      Coffee coffee1 = new Coffee();
      boolean boolean0 = coffee0.equals(coffee1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Coffee coffee0 = new Coffee(0);
      boolean boolean0 = coffee0.equals(coffee0);
      assertTrue(boolean0);
      assertEquals("Coffee", coffee0.getName());
      assertFalse(coffee0.getDecaf());
      assertEquals(0, coffee0.getAmount());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Coffee coffee0 = new Coffee(0);
      boolean boolean0 = coffee0.equals((Object) null);
      assertFalse(coffee0.getDecaf());
      assertEquals("Coffee", coffee0.getName());
      assertEquals(0, coffee0.getAmount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Coffee coffee0 = new Coffee(0);
      String string0 = coffee0.toString();
      assertEquals("Coffee", coffee0.getName());
      assertEquals("Coffee [unit=GR, amount=0, decaf=false]", string0);
  }
}
