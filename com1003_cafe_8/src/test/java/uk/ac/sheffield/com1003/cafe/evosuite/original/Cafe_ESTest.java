/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 21 21:02:46 GMT 2023
 */

package uk.ac.sheffield.com1003.cafe.evosuite.original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.Cafe;
import uk.ac.sheffield.com1003.cafe.Order;
import uk.ac.sheffield.com1003.cafe.Recipe;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Cafe_ESTest extends Cafe_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cafe cafe0 = new Cafe(".eM10r#nZTK4W,`h^", 2130, 2130);
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("(RyJ!c-TUPf)\"Z", (-1619), recipe_Size0, 60);
      boolean boolean0 = cafe0.addRecipe(recipe0);
      boolean boolean1 = cafe0.placeOrder("(RyJ!c-TUPf)\"Z", (String) null, (-1.0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cafe cafe0 = new Cafe("Y1 (H]@9l' ZpqjY");
      Recipe recipe0 = new Recipe("Y1 (H]@9l' ZpqjY", (-959.0));
      boolean boolean0 = cafe0.addRecipe(recipe0);
      boolean boolean1 = cafe0.placeOrder("Y1 (H]@9l' ZpqjY", "Y1 (H]@9l' ZpqjY", 1.0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe("Plain", (-201.5328792994041));
      cafe0.addRecipe(recipe0);
      cafe0.addRecipe(recipe0);
      cafe0.removeRecipe("Plain");
      Recipe[] recipeArray0 = cafe0.getMenu();
      assertEquals(1, recipeArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cafe cafe0 = new Cafe((String) null);
      String string0 = cafe0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cafe cafe0 = new Cafe("Y1 (H]@9l' ZpqjY");
      String string0 = cafe0.getName();
      assertEquals("Y1 (H]@9l' ZpqjY", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cafe cafe0 = new Cafe("");
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("Welcome to ", 0.0, recipe_Size0, 0);
      cafe0.addRecipe(recipe0);
      cafe0.removeRecipe("Welcome to ");
      Recipe[] recipeArray0 = cafe0.getMenu();
      assertEquals(0, recipeArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cafe cafe0 = new Cafe("<R]%<-~4\"m;G<,`w", 0, 1484);
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("339?qA?/R", 0.0, recipe_Size0, 2009);
      boolean boolean0 = cafe0.addRecipe(recipe0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Recipe recipe0 = new Recipe((String) null, (-662.161489673175));
      Cafe cafe0 = new Cafe();
      cafe0.addRecipe(recipe0);
      // Undeclared exception!
      try { 
        cafe0.removeRecipe((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cafe cafe0 = new Cafe("Welcome to ", 6348, 6348);
      cafe0.printMenu();
      // Undeclared exception!
      cafe0.printMenu();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe((String) null, (-741.7544583619));
      cafe0.addRecipe(recipe0);
      // Undeclared exception!
      try { 
        cafe0.placeOrder((String) null, (String) null, (-741.7544583619));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cafe cafe0 = null;
      try {
        cafe0 = new Cafe("Than ou!", (-11), (-11));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Cafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cafe cafe0 = new Cafe("");
      String string0 = cafe0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe("Plain", (-201.5328792994041));
      cafe0.addRecipe(recipe0);
      cafe0.placeOrder("Plain", "Plain", (-201.5328792994041));
      Order order0 = cafe0.serveOrder();
      assertNotNull(order0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cafe cafe0 = new Cafe("lTS", 0, 0);
      Order order0 = cafe0.serveOrder();
      assertNull(order0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Order order0 = cafe0.serveOrder();
      assertNull(order0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Recipe recipe0 = new Recipe("a9", 0);
      Cafe cafe0 = new Cafe();
      cafe0.addRecipe(recipe0);
      try { 
        cafe0.placeOrder("Welcome to Cafe", "Welcome to Cafe", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Cafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cafe cafe0 = new Cafe("'t7r;C;/e$;'\"#.'en?", 100, 100);
      Recipe recipe0 = new Recipe("'t7r;C;/e$;'\"#.'en?", 4326.0);
      boolean boolean0 = cafe0.addRecipe(recipe0);
      boolean boolean1 = cafe0.placeOrder("'t7r;C;/e$;'\"#.'en?", "'t7r;C;/e$;'\"#.'en?", 100);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cafe cafe0 = new Cafe("lTS", 0, 0);
      try { 
        cafe0.placeOrder("Milk", "U01W%9C/mNgA$t'$", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Cafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cafe cafe0 = new Cafe("==========");
      Recipe recipe0 = new Recipe("==========", 0.0);
      cafe0.addRecipe(recipe0);
      cafe0.printMenu();
      assertEquals("==========", cafe0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cafe cafe0 = new Cafe();
      Recipe recipe0 = new Recipe("Plain", (-201.5328792994041));
      cafe0.addRecipe(recipe0);
      cafe0.placeOrder("Plain", "Plain", (-201.5328792994041));
      cafe0.printPendingOrders();
      assertEquals("Cafe", cafe0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cafe cafe0 = new Cafe("lTS", 0, 0);
      cafe0.printPendingOrders();
      assertEquals("lTS", cafe0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cafe cafe0 = new Cafe("'t7r;C;/e$;'\"#.'en?", 100, 100);
      Recipe recipe0 = new Recipe("'t7r;C;/e$;'\"#.'en?", 4326.0);
      cafe0.addRecipe(recipe0);
      try { 
        cafe0.removeRecipe(";fG#");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Cafe", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cafe cafe0 = new Cafe("'t7r;C;/e$;'\"#.'en?", 100, 100);
      String string0 = cafe0.greeting();
      assertEquals("Welcome to 't7r;C;/e$;'\"#.'en?", string0);
  }
}
