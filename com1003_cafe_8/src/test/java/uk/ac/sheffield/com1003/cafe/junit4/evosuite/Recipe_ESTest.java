/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 21 14:37:57 GMT 2023
 */

package uk.ac.sheffield.com1003.cafe.junit4.evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.Recipe;
import uk.ac.sheffield.com1003.cafe.junit4.evosuite.Recipe_ESTest_scaffolding;
import uk.ac.sheffield.com1003.cafe.ingredients.Coffee;
import uk.ac.sheffield.com1003.cafe.ingredients.Water;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Recipe_ESTest extends Recipe_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("90(<]J3l", 4013.413385356006, recipe_Size0, 1816);
      Recipe recipe1 = new Recipe("LARGE", 1010.39, recipe_Size0, 1816);
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(boolean0);
      assertEquals(1010.39, recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("REGULAR", 0.0, recipe_Size0, 347);
      double double0 = recipe0.getPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("Syrup", (-902.8833821904545), recipe_Size0, 1590);
      double double0 = recipe0.getPrice();
      assertEquals((-902.8833821904545), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe((String) null, 0.0, recipe_Size0, 0);
      recipe0.getName();
      assertEquals(0.0, recipe0.getPrice(), 0.01);
      assertTrue(recipe0.isReady());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("REGULAR", 0.0, recipe_Size0, 347);
      recipe0.getName();
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("LARPE", 0, recipe_Size0, 0);
      Water water0 = new Water();
      try { 
        recipe0.addIngredient(water0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = null;
      try {
        recipe0 = new Recipe("", (-16), recipe_Size0, (-16));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("", 0.0, recipe_Size0, 1);
      Coffee coffee0 = new Coffee();
      recipe0.addIngredient(coffee0);
      Recipe recipe1 = new Recipe("", 0.0, recipe_Size0, 1);
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(recipe1.isReady());
      assertTrue(recipe0.isReady());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recipe recipe0 = new Recipe("d^YdFDE|=Hl(Im", (-2052.16919));
      Recipe recipe1 = new Recipe("d^YdFDE|=Hl(Im", (-2052.16919));
      assertFalse(recipe1.isReady());
      
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(boolean0);
      assertEquals((-2052.16919), recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe("Syrup", (-902.8833821904545), recipe_Size0, 1590);
      Recipe recipe1 = new Recipe("`]l;UEWt&<ainy", 669, recipe_Size0, 1590);
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(boolean0);
      assertEquals(669.0, recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe((String) null, 0.0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe((String) null, 0.0, recipe_Size0, 0);
      boolean boolean0 = recipe0.equals(recipe1);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("", 0.0, recipe_Size0, 1);
      boolean boolean0 = recipe0.equals(recipe0);
      assertTrue(boolean0);
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("", 1919.8608987771463, recipe_Size0, 2);
      boolean boolean0 = recipe0.equals(recipe_Size0);
      assertEquals(1919.8608987771463, recipe0.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("", 1919.8608987771463, recipe_Size0, 2);
      Water water0 = new Water(8);
      recipe0.addIngredient(water0);
      boolean boolean0 = recipe0.isReady();
      assertEquals(1919.8608987771463, recipe0.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe((String) null, 0.0, recipe_Size0, 0);
      boolean boolean0 = recipe0.isReady();
      assertEquals(0.0, recipe0.getPrice(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("", 1919.8608987771463, recipe_Size0, 2);
      Water water0 = new Water(8);
      recipe0.addIngredient(water0);
      recipe0.addIngredient(water0);
      assertEquals(1919.8608987771463, recipe0.getPrice(), 0.01);
      assertFalse(recipe0.isReady());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("", 1919.8608987771463, recipe_Size0, 2);
      double double0 = recipe0.getPrice();
      assertEquals(1919.8608987771463, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("", 1919.8608987771463, recipe_Size0, 2);
      recipe0.hashCode();
      assertEquals(1919.8608987771463, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Recipe recipe0 = new Recipe((String) null, 0.0);
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe1 = new Recipe((String) null, 0.0, recipe_Size0, 5608);
      boolean boolean0 = recipe1.equals(recipe0);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("", 1919.8608987771463, recipe_Size0, 2);
      recipe0.getName();
      assertEquals(1919.8608987771463, recipe0.getPrice(), 0.01);
  }
}
