package uk.ac.sheffield.com1003.cafe.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test4001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4001");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=100, type=WHOLE]", 32, (int) (short) 1);
    }

    @Test
    public void test4002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4002");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee3 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean7 = recipe6.isReady();
        java.lang.String str8 = recipe6.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee9 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe6.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee9);
        boolean boolean11 = coffee3.equals((java.lang.Object) recipe6);
        boolean boolean12 = water1.equals((java.lang.Object) recipe6);
        uk.ac.sheffield.com1003.cafe.Recipe recipe15 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe15, "Coffee", (double) (-1.0f), "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean20 = recipe6.equals((java.lang.Object) recipe15);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup22 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: Water; Paid: 1.0");
        recipe6.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup22);
        java.lang.String str24 = syrup22.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit25 = syrup22.getUnit();
        java.lang.String str26 = syrup22.getName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Syrup" + "'", str24, "Syrup");
        org.junit.Assert.assertTrue("'" + unit25 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit25.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Syrup" + "'", str26, "Syrup");
    }

    @Test
    public void test4003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4003");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        double double5 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", (double) 1L);
        uk.ac.sheffield.com1003.cafe.Recipe recipe11 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean12 = recipe11.isReady();
        boolean boolean13 = recipe11.isReady();
        java.lang.String str14 = recipe11.getName();
        boolean boolean15 = recipe4.equals((java.lang.Object) recipe11);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0", (double) 10L, "Welcome to Order: Water [unit=ML, amount=30]; For: ; Paid: 30.0");
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test4004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4004");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 100, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 100, type3);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
    }

    @Test
    public void test4005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4005");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size2, (int) '4');
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", 0.0d);
        java.lang.String str10 = recipe4.getName();
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (double) (byte) 1, "Coffee [unit=GR, amount=8, decaf=false]");
        boolean boolean15 = recipe4.isReady();
        uk.ac.sheffield.com1003.cafe.Order order18 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) 0.0f);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee21 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(10, true);
        java.lang.String str22 = coffee21.toString();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size27 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe29 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size27, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe31 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) ' ', size27, 30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe34 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order37 = new uk.ac.sheffield.com1003.cafe.Order(recipe34, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        order37.printReceipt();
        boolean boolean39 = recipe31.equals((java.lang.Object) order37);
        boolean boolean40 = coffee21.equals((java.lang.Object) boolean39);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk45 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type46 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean47 = milk45.equals((java.lang.Object) type46);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk48 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type46);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk49 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type46);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk50 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(32, type46);
        boolean boolean51 = coffee21.equals((java.lang.Object) milk50);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee21);
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water [unit=ML, amount=30]" + "'", str10, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Coffee [unit=GR, amount=10, decaf=true]" + "'", str22, "Coffee [unit=GR, amount=10, decaf=true]");
        org.junit.Assert.assertTrue("'" + size27 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size27.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type46.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test4006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4006");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = null;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=hi!]", 10.0d, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]", (double) '4', "Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]");
        boolean boolean9 = recipe4.isReady();
        java.lang.String str10 = recipe4.getName();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Syrup [unit=ML, amount=10, flavour=hi!]" + "'", str10, "Syrup [unit=ML, amount=10, flavour=hi!]");
    }

    @Test
    public void test4007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4007");
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException0 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException1 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray2 = recipeNotFoundException1.getSuppressed();
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) recipeNotFoundException1);
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException1.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException5.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException7 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException8 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray9 = recipeNotFoundException8.getSuppressed();
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException8);
        recipeNotFoundException5.addSuppressed((java.lang.Throwable) recipeNotFoundException7);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException14 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray15 = recipeNotFoundException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = recipeNotFoundException14.getSuppressed();
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException14);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException18 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray19 = recipeNotFoundException18.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException20 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException21.getSuppressed();
        recipeNotFoundException20.addSuppressed((java.lang.Throwable) recipeNotFoundException21);
        recipeNotFoundException18.addSuppressed((java.lang.Throwable) recipeNotFoundException20);
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException18);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException26 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray27 = recipeNotFoundException26.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException28 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray29 = recipeNotFoundException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = recipeNotFoundException28.getSuppressed();
        recipeNotFoundException26.addSuppressed((java.lang.Throwable) recipeNotFoundException28);
        recipeNotFoundException18.addSuppressed((java.lang.Throwable) recipeNotFoundException28);
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException18);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException34 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray35 = recipeNotFoundException34.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException36 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException37 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray38 = recipeNotFoundException37.getSuppressed();
        recipeNotFoundException36.addSuppressed((java.lang.Throwable) recipeNotFoundException37);
        recipeNotFoundException34.addSuppressed((java.lang.Throwable) recipeNotFoundException36);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException41 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray42 = cafeOutOfCapacityException41.getSuppressed();
        recipeNotFoundException34.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException41);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException44 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray45 = recipeNotFoundException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = recipeNotFoundException44.getSuppressed();
        recipeNotFoundException34.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water48 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str49 = water48.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk51 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean52 = water48.equals((java.lang.Object) 30);
        java.lang.String str53 = water48.toString();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException54 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray55 = recipeNotFoundException54.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException56 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException57 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray58 = recipeNotFoundException57.getSuppressed();
        recipeNotFoundException56.addSuppressed((java.lang.Throwable) recipeNotFoundException57);
        recipeNotFoundException54.addSuppressed((java.lang.Throwable) recipeNotFoundException56);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException61 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray62 = cafeOutOfCapacityException61.getSuppressed();
        recipeNotFoundException54.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException61);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException64 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray65 = recipeNotFoundException64.getSuppressed();
        java.lang.Throwable[] throwableArray66 = recipeNotFoundException64.getSuppressed();
        recipeNotFoundException54.addSuppressed((java.lang.Throwable) recipeNotFoundException64);
        boolean boolean68 = water48.equals((java.lang.Object) recipeNotFoundException64);
        recipeNotFoundException44.addSuppressed((java.lang.Throwable) recipeNotFoundException64);
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException64);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException71 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray72 = cafeOutOfCapacityException71.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException73 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray74 = recipeNotFoundException73.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException75 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray76 = recipeNotFoundException75.getSuppressed();
        java.lang.Throwable[] throwableArray77 = recipeNotFoundException75.getSuppressed();
        recipeNotFoundException73.addSuppressed((java.lang.Throwable) recipeNotFoundException75);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException79 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException80 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray81 = recipeNotFoundException80.getSuppressed();
        recipeNotFoundException79.addSuppressed((java.lang.Throwable) recipeNotFoundException80);
        recipeNotFoundException75.addSuppressed((java.lang.Throwable) recipeNotFoundException80);
        cafeOutOfCapacityException71.addSuppressed((java.lang.Throwable) recipeNotFoundException75);
        java.lang.Throwable[] throwableArray85 = cafeOutOfCapacityException71.getSuppressed();
        recipeNotFoundException64.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException71);
        recipeNotFoundException1.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException71);
        java.lang.String str88 = recipeNotFoundException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Water" + "'", str49, "Water");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Water [unit=ML, amount=30]" + "'", str53, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str88, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4008");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 100);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray3 = recipeNotFoundException2.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException4 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException5.getSuppressed();
        recipeNotFoundException4.addSuppressed((java.lang.Throwable) recipeNotFoundException5);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException4);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException9 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray10 = recipeNotFoundException9.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException11 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        recipeNotFoundException11.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        recipeNotFoundException9.addSuppressed((java.lang.Throwable) recipeNotFoundException11);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException16 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray17 = cafeOutOfCapacityException16.getSuppressed();
        recipeNotFoundException9.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException16);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException9);
        boolean boolean20 = milk1.equals((java.lang.Object) recipeNotFoundException2);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee21 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str22 = coffee21.toString();
        int int23 = coffee21.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException24 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = recipeNotFoundException24.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException27 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray28 = recipeNotFoundException27.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException29 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException30 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray31 = recipeNotFoundException30.getSuppressed();
        recipeNotFoundException29.addSuppressed((java.lang.Throwable) recipeNotFoundException30);
        recipeNotFoundException27.addSuppressed((java.lang.Throwable) recipeNotFoundException29);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException34 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray35 = cafeOutOfCapacityException34.getSuppressed();
        recipeNotFoundException27.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException34);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException37 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray38 = recipeNotFoundException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = recipeNotFoundException37.getSuppressed();
        recipeNotFoundException27.addSuppressed((java.lang.Throwable) recipeNotFoundException37);
        recipeNotFoundException24.addSuppressed((java.lang.Throwable) recipeNotFoundException37);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException42 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray43 = recipeNotFoundException42.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException44 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray45 = recipeNotFoundException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = recipeNotFoundException44.getSuppressed();
        recipeNotFoundException42.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException48 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray49 = recipeNotFoundException48.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException50 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException51 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray52 = recipeNotFoundException51.getSuppressed();
        recipeNotFoundException50.addSuppressed((java.lang.Throwable) recipeNotFoundException51);
        recipeNotFoundException48.addSuppressed((java.lang.Throwable) recipeNotFoundException50);
        recipeNotFoundException42.addSuppressed((java.lang.Throwable) recipeNotFoundException48);
        recipeNotFoundException24.addSuppressed((java.lang.Throwable) recipeNotFoundException42);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException57 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray58 = recipeNotFoundException57.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException59 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray60 = recipeNotFoundException59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = recipeNotFoundException59.getSuppressed();
        recipeNotFoundException57.addSuppressed((java.lang.Throwable) recipeNotFoundException59);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException63 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException64 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray65 = recipeNotFoundException64.getSuppressed();
        recipeNotFoundException63.addSuppressed((java.lang.Throwable) recipeNotFoundException64);
        recipeNotFoundException59.addSuppressed((java.lang.Throwable) recipeNotFoundException64);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException68 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray69 = recipeNotFoundException68.getSuppressed();
        recipeNotFoundException64.addSuppressed((java.lang.Throwable) recipeNotFoundException68);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException71 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray72 = recipeNotFoundException71.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException73 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray74 = recipeNotFoundException73.getSuppressed();
        java.lang.Throwable[] throwableArray75 = recipeNotFoundException73.getSuppressed();
        recipeNotFoundException71.addSuppressed((java.lang.Throwable) recipeNotFoundException73);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException77 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException78 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray79 = recipeNotFoundException78.getSuppressed();
        recipeNotFoundException77.addSuppressed((java.lang.Throwable) recipeNotFoundException78);
        recipeNotFoundException73.addSuppressed((java.lang.Throwable) recipeNotFoundException78);
        java.lang.Throwable[] throwableArray82 = recipeNotFoundException73.getSuppressed();
        recipeNotFoundException68.addSuppressed((java.lang.Throwable) recipeNotFoundException73);
        recipeNotFoundException42.addSuppressed((java.lang.Throwable) recipeNotFoundException68);
        java.lang.Throwable[] throwableArray85 = recipeNotFoundException68.getSuppressed();
        boolean boolean86 = coffee21.equals((java.lang.Object) recipeNotFoundException68);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException68);
        java.lang.String str88 = recipeNotFoundException68.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str22, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str88, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4009");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=10]]");
    }

    @Test
    public void test4010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4010");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Welcome to Cafe; For: Milk [unit=ML, amount=100, type=null]; Paid: 1.0", (double) 100L);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type5 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.WHOLE;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 0, type5);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk7 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type5);
        java.lang.String str8 = milk7.getName();
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk7);
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.WHOLE + "'", type5.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.WHOLE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Milk" + "'", str8, "Milk");
    }

    @Test
    public void test4011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4011");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe0.getMenu();
        java.lang.String str4 = cafe0.getName();
        java.lang.String str5 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Order order6 = cafe0.serveOrder();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Order order8 = cafe0.serveOrder();
        java.lang.String str9 = cafe0.greeting();
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size15 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe17 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size15, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Plain]", (double) '#', size15, 0);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water20 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str21 = water20.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk23 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean24 = water20.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit25 = water20.getUnit();
        int int26 = water20.getAmount();
        boolean boolean27 = recipe19.equals((java.lang.Object) water20);
        double double28 = recipe19.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order31 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "Welcome to Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0", (double) 100.0f);
        boolean boolean32 = cafe0.addRecipe(recipe19);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray33 = cafe0.getMenu();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Cafe" + "'", str4, "Cafe");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cafe" + "'", str5, "Cafe");
        org.junit.Assert.assertNull(order6);
        org.junit.Assert.assertNull(order8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Welcome to Cafe" + "'", str9, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size15 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size15.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Water" + "'", str21, "Water");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + unit25 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit25.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 30 + "'", int26 == 30);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(recipeArray33);
    }

    @Test
    public void test4012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4012");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size4, (int) (short) 10);
        double double7 = recipe6.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size13 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe15 = new uk.ac.sheffield.com1003.cafe.Recipe("Water", (double) 100.0f, size13, 0);
        boolean boolean16 = recipe6.equals((java.lang.Object) size13);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: -1.0", 1.0d, size13, 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk20 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1));
        java.lang.String str21 = milk20.toString();
        java.lang.String str22 = milk20.toString();
        recipe18.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk20);
        uk.ac.sheffield.com1003.cafe.Cafe cafe27 = new uk.ac.sheffield.com1003.cafe.Cafe("", (int) (short) 1, (int) (byte) 1);
        cafe27.printMenu();
        boolean boolean29 = milk20.equals((java.lang.Object) cafe27);
        cafe27.printMenu();
        cafe27.printPendingOrders();
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + size13 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size13.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str21, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str22, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test4013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4013");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) '4');
        java.lang.String str2 = water1.toString();
        java.lang.String str3 = water1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water [unit=ML, amount=52]" + "'", str2, "Water [unit=ML, amount=52]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Water [unit=ML, amount=52]" + "'", str3, "Water [unit=ML, amount=52]");
    }

    @Test
    public void test4014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4014");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean3 = recipe2.isReady();
        java.lang.String str4 = recipe2.getName();
        java.lang.String str5 = recipe2.getName();
        java.lang.String str6 = recipe2.getName();
        java.lang.String str7 = recipe2.getName();
        double double8 = recipe2.getPrice();
        double double9 = recipe2.getPrice();
        java.lang.String str10 = recipe2.getName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water [unit=ML, amount=30]" + "'", str4, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Water [unit=ML, amount=30]" + "'", str5, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Water [unit=ML, amount=30]" + "'", str6, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water [unit=ML, amount=30]" + "'", str7, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water [unit=ML, amount=30]" + "'", str10, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4015");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (byte) 0);
        java.lang.String str2 = coffee1.toString();
        java.lang.String str3 = coffee1.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe7 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (int) ' ', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size10 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size10, (int) '4');
        boolean boolean14 = recipe12.equals((java.lang.Object) 10.0d);
        double double15 = recipe12.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe12, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean20 = cafe7.addRecipe(recipe12);
        cafe7.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size24 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size24, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order29 = new uk.ac.sheffield.com1003.cafe.Order(recipe26, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee30 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str31 = coffee30.toString();
        boolean boolean32 = recipe26.equals((java.lang.Object) str31);
        boolean boolean33 = recipe26.isReady();
        double double34 = recipe26.getPrice();
        boolean boolean35 = cafe7.addRecipe(recipe26);
        double double36 = recipe26.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order40 = new uk.ac.sheffield.com1003.cafe.Order(recipe26, "Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=10]]", (double) (-1L), "Water [unit=ML, amount=30]");
        boolean boolean41 = coffee1.equals((java.lang.Object) "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertTrue("'" + size10 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size10.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + size24 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size24.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str31, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test4016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4016");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type4 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SOY;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ', type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 10, type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk7 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '#', type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk8 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 0, type4);
        java.lang.String str9 = milk8.toString();
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SOY + "'", type4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SOY));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Milk [unit=ML, amount=0, type=SOY]" + "'", str9, "Milk [unit=ML, amount=0, type=SOY]");
    }

    @Test
    public void test4017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4017");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 10.0", (double) (byte) 10);
    }

    @Test
    public void test4018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4018");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=0, type=null]");
    }

    @Test
    public void test4019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4019");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) '4', size2, 1);
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "", (double) 10L, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0");
        uk.ac.sheffield.com1003.cafe.Recipe recipe11 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double15 = recipe11.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee18 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '4', true);
        boolean boolean20 = coffee18.equals((java.lang.Object) 10L);
        boolean boolean22 = coffee18.equals((java.lang.Object) (-1.0f));
        recipe11.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee18);
        double double24 = recipe11.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order28 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "Water [unit=ML, amount=0]", (double) (byte) 100, "Coffee [unit=GR, amount=0, decaf=false]");
        double double29 = recipe11.getPrice();
        boolean boolean30 = recipe4.equals((java.lang.Object) recipe11);
        boolean boolean31 = recipe11.isReady();
        uk.ac.sheffield.com1003.cafe.Order order35 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "Welcome to Order: ; For: Water; Paid: 1.0", (double) 'a', "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=10, type=WHOLE]]");
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test4020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4020");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk9);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type15 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean16 = milk14.equals((java.lang.Object) type15);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk17 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type15);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk18 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ', type15);
        java.lang.String str19 = milk18.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk18);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk22 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '#');
        uk.ac.sheffield.com1003.cafe.ingredients.Water water23 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str24 = water23.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk26 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean27 = water23.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit28 = water23.getUnit();
        java.lang.Class<?> wildcardClass29 = unit28.getClass();
        boolean boolean30 = milk22.equals((java.lang.Object) wildcardClass29);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk22);
        uk.ac.sheffield.com1003.cafe.Cafe cafe32 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order33 = cafe32.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order34 = cafe32.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order35 = cafe32.serveOrder();
        java.lang.String str36 = cafe32.greeting();
        java.lang.String str37 = cafe32.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray38 = cafe32.getMenu();
        boolean boolean39 = milk22.equals((java.lang.Object) cafe32);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size42 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe44 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size42, (int) (short) 10);
        boolean boolean46 = recipe44.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order49 = new uk.ac.sheffield.com1003.cafe.Order(recipe44, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Order order53 = new uk.ac.sheffield.com1003.cafe.Order(recipe44, "Welcome to Cafe", 1.0d, "Water [unit=ML, amount=30]");
        order53.printReceipt();
        boolean boolean55 = milk22.equals((java.lang.Object) order53);
        order53.serve();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type15.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Milk [unit=ML, amount=32, type=SKIMMED]" + "'", str19, "Milk [unit=ML, amount=32, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Water" + "'", str24, "Water");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + unit28 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit28.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(order33);
        org.junit.Assert.assertNull(order34);
        org.junit.Assert.assertNull(order35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Welcome to Cafe" + "'", str36, "Welcome to Cafe");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Welcome to Cafe" + "'", str37, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + size42 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size42.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test4021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4021");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 0);
        java.lang.String str2 = water1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup3 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup();
        java.lang.String str4 = syrup3.toString();
        java.lang.String str5 = syrup3.toString();
        java.lang.String str6 = syrup3.toString();
        boolean boolean7 = water1.equals((java.lang.Object) str6);
        int int8 = water1.getAmount();
        java.lang.String str9 = water1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water [unit=ML, amount=0]" + "'", str2, "Water [unit=ML, amount=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Plain]" + "'", str4, "Syrup [unit=ML, amount=10, flavour=Plain]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Plain]" + "'", str5, "Syrup [unit=ML, amount=10, flavour=Plain]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Plain]" + "'", str6, "Syrup [unit=ML, amount=10, flavour=Plain]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Water [unit=ML, amount=0]" + "'", str9, "Water [unit=ML, amount=0]");
    }

    @Test
    public void test4022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4022");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe0.getMenu();
        java.lang.String str4 = cafe0.getName();
        java.lang.String str5 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size8, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk15 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe10.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk15);
        boolean boolean17 = cafe0.addRecipe(recipe10);
        uk.ac.sheffield.com1003.cafe.Order order18 = cafe0.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order19 = cafe0.serveOrder();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size30 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe32 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size30, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe34 = new uk.ac.sheffield.com1003.cafe.Recipe("Water", (double) 1, size30, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe36 = new uk.ac.sheffield.com1003.cafe.Recipe("", (-1.0d), size30, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe38 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=32, type=ALMOND]", (-1.0d), size30, (int) '4');
        boolean boolean39 = cafe0.addRecipe(recipe38);
        cafe0.printMenu();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Cafe" + "'", str4, "Cafe");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cafe" + "'", str5, "Cafe");
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(order18);
        org.junit.Assert.assertNull(order19);
        org.junit.Assert.assertTrue("'" + size30 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size30.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test4023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4023");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException", 0, (int) (byte) 0);
    }

    @Test
    public void test4024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4024");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee0 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str1 = coffee0.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit2 = coffee0.getUnit();
        java.lang.String str3 = coffee0.toString();
        java.lang.String str4 = coffee0.toString();
        java.lang.String str5 = coffee0.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size8, (int) (short) 10);
        boolean boolean12 = recipe10.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Welcome to Cafe", 1.0d, "Water [unit=ML, amount=30]");
        java.lang.String str20 = recipe10.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size23 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe25 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size23, (int) (short) 10);
        double double26 = recipe25.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order29 = new uk.ac.sheffield.com1003.cafe.Order(recipe25, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order33 = new uk.ac.sheffield.com1003.cafe.Order(recipe25, "", (double) (short) 10, "Water [unit=ML, amount=30]");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water34 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str35 = water34.toString();
        recipe25.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water34);
        uk.ac.sheffield.com1003.cafe.Cafe cafe37 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe37.printPendingOrders();
        java.lang.String str39 = cafe37.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray40 = cafe37.getMenu();
        cafe37.printMenu();
        boolean boolean42 = water34.equals((java.lang.Object) cafe37);
        boolean boolean43 = recipe10.equals((java.lang.Object) cafe37);
        boolean boolean44 = coffee0.equals((java.lang.Object) recipe10);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str1, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + unit2 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit2.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str4, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Coffee" + "'", str5, "Coffee");
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + size23 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size23.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Water [unit=ML, amount=30]" + "'", str35, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Welcome to Cafe" + "'", str39, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test4025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4025");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: ; Paid: 10.0");
        boolean boolean4 = milk1.equals((java.lang.Object) "Order: ; For: ; Paid: 10.0");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test4026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4026");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) (byte) 10, "Water [unit=ML, amount=30]");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee11 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 100, true);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee11);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Water", 1.0d, "Water [unit=ML, amount=32]");
        java.lang.String str17 = order16.toString();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Order: ; For: Welcome to Water; Paid: 1.0" + "'", str17, "Order: ; For: Welcome to Water; Paid: 1.0");
    }

    @Test
    public void test4027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4027");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size14 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size14, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) ' ', size14, 30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=30, decaf=false]", (double) 1.0f, size14, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (double) 10, size14, (int) '#');
        uk.ac.sheffield.com1003.cafe.Recipe recipe24 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 0L, size14, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) '4', size14, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe28 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=]", (double) (-1L), size14, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + size14 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size14.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
    }

    @Test
    public void test4028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4028");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Water [unit=ML, amount=30]", (int) (byte) 1, 0);
    }

    @Test
    public void test4029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4029");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe0.getMenu();
        java.lang.String str4 = cafe0.getName();
        java.lang.String str5 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Order order6 = cafe0.serveOrder();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Order order8 = cafe0.serveOrder();
        java.lang.String str9 = cafe0.greeting();
        cafe0.printMenu();
        java.lang.String str11 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray12 = cafe0.getMenu();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Cafe" + "'", str4, "Cafe");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cafe" + "'", str5, "Cafe");
        org.junit.Assert.assertNull(order6);
        org.junit.Assert.assertNull(order8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Welcome to Cafe" + "'", str9, "Welcome to Cafe");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Cafe" + "'", str11, "Cafe");
        org.junit.Assert.assertNotNull(recipeArray12);
    }

    @Test
    public void test4030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4030");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str2 = coffee1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean4 = coffee1.equals((java.lang.Object) type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type3);
        java.lang.String str6 = milk5.getName();
        java.lang.String str7 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water8 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int9 = water8.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException10 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException11 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray12 = recipeNotFoundException11.getSuppressed();
        recipeNotFoundException10.addSuppressed((java.lang.Throwable) recipeNotFoundException11);
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException11.getSuppressed();
        boolean boolean15 = water8.equals((java.lang.Object) recipeNotFoundException11);
        java.lang.Throwable[] throwableArray16 = recipeNotFoundException11.getSuppressed();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException11.getSuppressed();
        boolean boolean18 = milk5.equals((java.lang.Object) recipeNotFoundException11);
        java.lang.Throwable[] throwableArray19 = recipeNotFoundException11.getSuppressed();
        java.lang.Throwable[] throwableArray20 = recipeNotFoundException11.getSuppressed();
        java.lang.Throwable[] throwableArray21 = recipeNotFoundException11.getSuppressed();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException11.getSuppressed();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk" + "'", str6, "Milk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str7, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 30 + "'", int9 == 30);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test4031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4031");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Syrup");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk");
        cafe3.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean15 = cafe3.addRecipe(recipe7);
        boolean boolean16 = syrup1.equals((java.lang.Object) boolean15);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit17 = syrup1.getUnit();
        java.lang.String str18 = syrup1.toString();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + unit17 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit17.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Syrup]" + "'", str18, "Syrup [unit=ML, amount=10, flavour=Syrup]");
    }

    @Test
    public void test4032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4032");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (byte) -1, false);
        java.lang.String str3 = coffee2.getName();
        java.lang.String str4 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water6 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        boolean boolean7 = coffee2.equals((java.lang.Object) (byte) 100);
        java.lang.Object obj8 = null;
        boolean boolean9 = coffee2.equals(obj8);
        java.lang.Class<?> wildcardClass10 = coffee2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee" + "'", str3, "Coffee");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Coffee [unit=GR, amount=-1, decaf=false]" + "'", str4, "Coffee [unit=GR, amount=-1, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test4033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4033");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=0, type=SEMI]");
    }

    @Test
    public void test4034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4034");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (short) -1);
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Coffee [unit=GR, amount=35, decaf=false]", (double) 30, "Welcome to Order: ; For: hi!; Paid: 0.0");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk8 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj9 = null;
        boolean boolean10 = milk8.equals(obj9);
        java.lang.String str11 = milk8.toString();
        java.lang.String str12 = milk8.getName();
        int int13 = milk8.getAmount();
        boolean boolean15 = milk8.equals((java.lang.Object) "Water [unit=ML, amount=100]");
        int int16 = milk8.getAmount();
        java.lang.String str17 = milk8.getName();
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk8);
        uk.ac.sheffield.com1003.cafe.Order order21 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=32, type=ALMOND]; Paid: 1.0", (double) 100L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str11, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Milk" + "'", str12, "Milk");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Milk" + "'", str17, "Milk");
    }

    @Test
    public void test4035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4035");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        int int2 = milk1.getAmount();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water3 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str4 = water3.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean15 = water3.equals((java.lang.Object) "Welcome to Cafe");
        boolean boolean16 = milk1.equals((java.lang.Object) boolean15);
        java.lang.String str17 = milk1.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe18 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order19 = cafe18.serveOrder();
        java.lang.String str20 = cafe18.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size27 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe29 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size27, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe31 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Plain]", (double) '#', size27, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe33 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) 1, size27, (int) ' ');
        boolean boolean34 = cafe18.addRecipe(recipe33);
        uk.ac.sheffield.com1003.cafe.Order order38 = new uk.ac.sheffield.com1003.cafe.Order(recipe33, "Order: ; For: Coffee [unit=GR, amount=30, decaf=false]; Paid: 0.0", (double) (byte) 1, "Cafe");
        double double39 = recipe33.getPrice();
        boolean boolean40 = recipe33.isReady();
        boolean boolean41 = milk1.equals((java.lang.Object) boolean40);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water" + "'", str4, "Water");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Milk [unit=ML, amount=1, type=WHOLE]" + "'", str17, "Milk [unit=ML, amount=1, type=WHOLE]");
        org.junit.Assert.assertNull(order19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Welcome to Cafe" + "'", str20, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size27 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size27.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test4036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4036");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=10, decaf=false]", (double) (-1));
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0", 100.0d, "Milk [unit=ML, amount=10, type=WHOLE]");
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=30]]", (double) 0, "Milk [unit=ML, amount=30, type=WHOLE]");
        order10.serve();
    }

    @Test
    public void test4037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4037");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (byte) 0);
        java.lang.String str2 = coffee1.toString();
        java.lang.String str3 = coffee1.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=10, decaf=false]", (double) (-1));
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0", 100.0d, "Milk [unit=ML, amount=10, type=WHOLE]");
        boolean boolean11 = coffee1.equals((java.lang.Object) 100.0d);
        java.lang.String str12 = coffee1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str12, "Coffee [unit=GR, amount=0, decaf=false]");
    }

    @Test
    public void test4038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4038");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size12, (int) '4');
        boolean boolean15 = cafe0.addRecipe(recipe14);
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size19 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size19, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe21, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee25 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str26 = coffee25.toString();
        boolean boolean27 = recipe21.equals((java.lang.Object) str26);
        java.lang.String str28 = recipe21.getName();
        boolean boolean29 = cafe0.addRecipe(recipe21);
        uk.ac.sheffield.com1003.cafe.Order order30 = cafe0.serveOrder();
        cafe0.printPendingOrders();
        java.lang.String str32 = cafe0.greeting();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + size19 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size19.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str26, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(order30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Welcome to Cafe" + "'", str32, "Welcome to Cafe");
    }

    @Test
    public void test4039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4039");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Welcome to Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0]", (double) 35);
    }

    @Test
    public void test4040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4040");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: 10.0", (int) (short) 100, 30);
    }

    @Test
    public void test4041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4041");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]", (double) (byte) 10);
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Coffee [unit=GR, amount=8, decaf=true]", 0.0d, "Welcome to Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]");
    }

    @Test
    public void test4042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4042");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup", (double) 10L, size6, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (double) (byte) 100, size6, 8);
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: hi!; For: Coffee [unit=GR, amount=97, decaf=false]; Paid: -1.0", (double) 32, size6, 8);
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL));
    }

    @Test
    public void test4043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4043");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Water");
        java.lang.String str2 = syrup1.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe4 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean8 = cafe4.addRecipe(recipe7);
        boolean boolean9 = syrup1.equals((java.lang.Object) recipe7);
        uk.ac.sheffield.com1003.cafe.Cafe cafe13 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]", 30, (int) (byte) 100);
        boolean boolean14 = recipe7.equals((java.lang.Object) cafe13);
        java.lang.String str15 = cafe13.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0", (double) (byte) 0);
        boolean boolean19 = cafe13.addRecipe(recipe18);
        java.lang.String str20 = cafe13.greeting();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Syrup" + "'", str2, "Syrup");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Welcome to Coffee [unit=GR, amount=0, decaf=false]" + "'", str15, "Welcome to Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Welcome to Coffee [unit=GR, amount=0, decaf=false]" + "'", str20, "Welcome to Coffee [unit=GR, amount=0, decaf=false]");
    }

    @Test
    public void test4044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4044");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int1 = water0.getAmount();
        java.lang.String str2 = water0.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe3.printPendingOrders();
        java.lang.String str5 = cafe3.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray6 = cafe3.getMenu();
        java.lang.String str7 = cafe3.greeting();
        cafe3.printMenu();
        boolean boolean9 = water0.equals((java.lang.Object) cafe3);
        uk.ac.sheffield.com1003.cafe.Order order10 = cafe3.serveOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = order10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 30 + "'", int1 == 30);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water [unit=ML, amount=30]" + "'", str2, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Welcome to Cafe" + "'", str5, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Welcome to Cafe" + "'", str7, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(order10);
    }

    @Test
    public void test4045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4045");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("hi!");
        java.lang.String str2 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        boolean boolean9 = recipe7.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "hi!", (double) 0L);
        boolean boolean13 = cafe1.addRecipe(recipe7);
        java.lang.String str14 = cafe1.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe recipe17 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe17, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe17, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean25 = cafe1.addRecipe(recipe17);
        cafe1.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe recipe29 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: ; Paid: 10.0", (double) 97);
        boolean boolean30 = cafe1.addRecipe(recipe29);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Welcome to hi!" + "'", str14, "Welcome to hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test4046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4046");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.ALMOND;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ', type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 100, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ', type3);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.ALMOND + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.ALMOND));
    }

    @Test
    public void test4047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4047");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=0, type=SKIMMED]]");
    }

    @Test
    public void test4048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4048");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0", (double) (byte) 0);
        boolean boolean3 = recipe2.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee5 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size8, (int) '4');
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "", (double) (-1.0f), "Welcome to ");
        boolean boolean15 = coffee5.equals((java.lang.Object) recipe10);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup17 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Water");
        java.lang.String str18 = syrup17.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe20 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe23 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean24 = cafe20.addRecipe(recipe23);
        boolean boolean25 = syrup17.equals((java.lang.Object) recipe23);
        boolean boolean26 = recipe10.equals((java.lang.Object) syrup17);
        uk.ac.sheffield.com1003.cafe.Order order30 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (double) (short) -1, "Welcome to Welcome to Cafe");
        double double31 = recipe10.getPrice();
        boolean boolean32 = recipe2.equals((java.lang.Object) recipe10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Syrup" + "'", str18, "Syrup");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test4049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4049");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size4, (int) '4');
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "", (double) (-1.0f), "Welcome to ");
        boolean boolean11 = coffee1.equals((java.lang.Object) recipe6);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup13 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Water");
        java.lang.String str14 = syrup13.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe16 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean20 = cafe16.addRecipe(recipe19);
        boolean boolean21 = syrup13.equals((java.lang.Object) recipe19);
        boolean boolean22 = recipe6.equals((java.lang.Object) syrup13);
        uk.ac.sheffield.com1003.cafe.Order order26 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (double) (short) -1, "Welcome to Welcome to Cafe");
        order26.printReceipt();
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Syrup" + "'", str14, "Syrup");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4050");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: Water [unit=ML, amount=30]; For: Welcome to Cafe; Paid: -1.0");
    }

    @Test
    public void test4051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4051");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 0.0", 8.0d, size6, 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Coffee [unit=GR, amount=10, decaf=false]; Paid: 35.0", (double) 1.0f, size6, 35);
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
    }

    @Test
    public void test4052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4052");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]", (int) ' ', (int) (short) 1);
        java.lang.String str4 = cafe3.greeting();
        java.lang.String str5 = cafe3.greeting();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Welcome to Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]" + "'", str4, "Welcome to Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Welcome to Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]" + "'", str5, "Welcome to Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]");
    }

    @Test
    public void test4053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4053");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        java.lang.String str2 = water1.toString();
        java.lang.String str3 = water1.toString();
        int int4 = water1.getAmount();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        int int7 = milk6.getAmount();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water8 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str9 = water8.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe12, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe12, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean20 = water8.equals((java.lang.Object) "Welcome to Cafe");
        boolean boolean21 = milk6.equals((java.lang.Object) boolean20);
        boolean boolean22 = water1.equals((java.lang.Object) milk6);
        int int23 = milk6.getAmount();
        java.lang.Object obj24 = null;
        boolean boolean25 = milk6.equals(obj24);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water [unit=ML, amount=100]" + "'", str2, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Water [unit=ML, amount=100]" + "'", str3, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Water" + "'", str9, "Water");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test4054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4054");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee3 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) -1, true);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee6 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str7 = coffee6.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type8 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean9 = coffee6.equals((java.lang.Object) type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk11 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1), type8);
        boolean boolean12 = coffee3.equals((java.lang.Object) type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk13 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type8);
        int int14 = milk13.getAmount();
        java.lang.String str15 = milk13.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size18 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size18, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe20, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk25 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe20.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk25);
        uk.ac.sheffield.com1003.cafe.Order order30 = new uk.ac.sheffield.com1003.cafe.Order(recipe20, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0", (double) (-1), "Milk [unit=ML, amount=-1, type=WHOLE]");
        java.lang.String str31 = order30.toString();
        order30.serve();
        boolean boolean33 = milk13.equals((java.lang.Object) order30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit34 = milk13.getUnit();
        java.lang.String str35 = milk13.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str7, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type8.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Milk" + "'", str15, "Milk");
        org.junit.Assert.assertTrue("'" + size18 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size18.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Order: ; For: Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0; Paid: -1.0" + "'", str31, "Order: ; For: Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0; Paid: -1.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + unit34 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit34.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Milk [unit=ML, amount=0, type=SKIMMED]" + "'", str35, "Milk [unit=ML, amount=0, type=SKIMMED]");
    }

    @Test
    public void test4055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4055");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=30]]; Paid: -1.0", (double) 8);
        java.lang.String str3 = recipe2.getName();
        uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException tooManyIngredientsException4 = new uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException5.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException7 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = recipeNotFoundException7.getSuppressed();
        recipeNotFoundException5.addSuppressed((java.lang.Throwable) recipeNotFoundException7);
        tooManyIngredientsException4.addSuppressed((java.lang.Throwable) recipeNotFoundException7);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException14 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray15 = recipeNotFoundException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = recipeNotFoundException14.getSuppressed();
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException14);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException18 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException19 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray20 = recipeNotFoundException19.getSuppressed();
        recipeNotFoundException18.addSuppressed((java.lang.Throwable) recipeNotFoundException19);
        recipeNotFoundException14.addSuppressed((java.lang.Throwable) recipeNotFoundException19);
        java.lang.Throwable[] throwableArray23 = recipeNotFoundException14.getSuppressed();
        tooManyIngredientsException4.addSuppressed((java.lang.Throwable) recipeNotFoundException14);
        boolean boolean25 = recipe2.equals((java.lang.Object) tooManyIngredientsException4);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Order: ; For: Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=30]]; Paid: -1.0" + "'", str3, "Order: ; For: Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=30]]; Paid: -1.0");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test4056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4056");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 0, false);
        java.lang.String str3 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit4 = coffee2.getUnit();
        java.lang.String str5 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup7 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: Welcome to Cafe; Paid: 10.0");
        java.lang.String str8 = syrup7.toString();
        java.lang.String str9 = syrup7.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit10 = syrup7.getUnit();
        java.lang.String str11 = syrup7.toString();
        boolean boolean12 = coffee2.equals((java.lang.Object) syrup7);
        java.lang.String str13 = coffee2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertTrue("'" + unit4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str5, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]" + "'", str8, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]" + "'", str9, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        org.junit.Assert.assertTrue("'" + unit10 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit10.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]" + "'", str11, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str13, "Coffee [unit=GR, amount=0, decaf=false]");
    }

    @Test
    public void test4057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4057");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        java.lang.String str1 = cafe0.greeting();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size5, (int) '4');
        boolean boolean9 = recipe7.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Welcome to Cafe", 0.0d);
        boolean boolean13 = recipe7.isReady();
        boolean boolean14 = recipe7.isReady();
        boolean boolean15 = cafe0.addRecipe(recipe7);
        java.lang.String str16 = recipe7.getName();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Welcome to Cafe" + "'", str1, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Water [unit=ML, amount=30]" + "'", str16, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4058");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str3 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type4 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean5 = coffee2.equals((java.lang.Object) type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk7 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 1, type4);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test4059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4059");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Coffee [unit=GR, amount=30, decaf=false]");
        java.lang.String str2 = syrup1.toString();
        java.lang.String str3 = syrup1.toString();
        java.lang.String str4 = syrup1.toString();
        java.lang.String str5 = syrup1.getName();
        java.lang.String str6 = syrup1.getName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]" + "'", str2, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]" + "'", str3, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]" + "'", str4, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Syrup" + "'", str5, "Syrup");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Syrup" + "'", str6, "Syrup");
    }

    @Test
    public void test4060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4060");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk");
        cafe1.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order3 = cafe1.serveOrder();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk13 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe8.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk13);
        double double15 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order18 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Order: ; For: hi!; Paid: 0.0", 0.0d);
        uk.ac.sheffield.com1003.cafe.Order order21 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Welcome to ", (double) (short) 100);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Order: ; For: Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0; Paid: 8.0", (double) ' ');
        boolean boolean25 = cafe1.addRecipe(recipe8);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = cafe1.placeOrder("Milk [unit=ML, amount=1, type=SEMI]", "Welcome to Order: Welcome to Welcome to Cafe; For: Water [unit=ML, amount=10]; Paid: 1.0", (double) 'a');
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(order3);
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test4061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4061");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type2 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1, type2);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '#', type2);
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type2.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
    }

    @Test
    public void test4062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4062");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (int) ' ', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray4 = cafe3.getMenu();
        java.lang.String str5 = cafe3.greeting();
        cafe3.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe recipe9 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe9, "Milk [unit=ML, amount=10, type=SKIMMED]", (double) (byte) 0);
        boolean boolean13 = cafe3.addRecipe(recipe9);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size24 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size24, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe28 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size24, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe30 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (byte) 100, size24, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe32 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=35, type=WHOLE]", (double) 1.0f, size24, (int) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe34 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=100]", (double) (short) 1, size24, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Order order38 = new uk.ac.sheffield.com1003.cafe.Order(recipe34, "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) 32, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]");
        boolean boolean39 = cafe3.addRecipe(recipe34);
        double double40 = recipe34.getPrice();
        org.junit.Assert.assertNotNull(recipeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Welcome to Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0" + "'", str5, "Welcome to Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + size24 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size24.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
    }

    @Test
    public void test4063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4063");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        double double5 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "", (double) (short) 10, "Water [unit=ML, amount=30]");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water13 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str14 = water13.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water13);
        uk.ac.sheffield.com1003.cafe.Cafe cafe16 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe16.printPendingOrders();
        java.lang.String str18 = cafe16.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray19 = cafe16.getMenu();
        cafe16.printMenu();
        boolean boolean21 = water13.equals((java.lang.Object) cafe16);
        int int22 = water13.getAmount();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size27 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe29 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=8, decaf=false]", (double) (-1), size27, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe31 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) (byte) 10, size27, 0);
        boolean boolean32 = water13.equals((java.lang.Object) recipe31);
        uk.ac.sheffield.com1003.cafe.Cafe cafe34 = new uk.ac.sheffield.com1003.cafe.Cafe("hi!");
        java.lang.String str35 = cafe34.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size38 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe40 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size38, (int) (short) 10);
        boolean boolean42 = recipe40.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order45 = new uk.ac.sheffield.com1003.cafe.Order(recipe40, "hi!", (double) 0L);
        boolean boolean46 = cafe34.addRecipe(recipe40);
        java.lang.String str47 = cafe34.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe recipe50 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order53 = new uk.ac.sheffield.com1003.cafe.Order(recipe50, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order57 = new uk.ac.sheffield.com1003.cafe.Order(recipe50, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean58 = cafe34.addRecipe(recipe50);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray59 = cafe34.getMenu();
        cafe34.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order61 = cafe34.serveOrder();
        boolean boolean62 = recipe31.equals((java.lang.Object) order61);
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Welcome to Cafe" + "'", str18, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 30 + "'", int22 == 30);
        org.junit.Assert.assertTrue("'" + size27 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size27.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + size38 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size38.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Welcome to hi!" + "'", str47, "Welcome to hi!");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(recipeArray59);
        org.junit.Assert.assertNull(order61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test4064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4064");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type2 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(1, type2);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '4', type2);
        java.lang.String str5 = milk4.toString();
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type2.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Milk [unit=ML, amount=52, type=SEMI]" + "'", str5, "Milk [unit=ML, amount=52, type=SEMI]");
    }

    @Test
    public void test4065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4065");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray2 = cafe1.getMenu();
        uk.ac.sheffield.com1003.cafe.Order order3 = cafe1.serveOrder();
        java.lang.String str4 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray5 = cafe1.getMenu();
        cafe1.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size9 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe11 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size9, (int) '4');
        boolean boolean13 = recipe11.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "Welcome to Cafe", 0.0d);
        java.lang.String str17 = recipe11.getName();
        uk.ac.sheffield.com1003.cafe.Order order21 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "Milk [unit=ML, amount=10, type=WHOLE]", (double) (byte) 1, "Coffee [unit=GR, amount=8, decaf=false]");
        boolean boolean22 = recipe11.isReady();
        java.lang.String str23 = recipe11.getName();
        uk.ac.sheffield.com1003.cafe.Order order27 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "Welcome to Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0", 0.0d, "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        boolean boolean28 = cafe1.addRecipe(recipe11);
        org.junit.Assert.assertNotNull(recipeArray2);
        org.junit.Assert.assertNull(order3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Welcome to Cafe" + "'", str4, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray5);
        org.junit.Assert.assertTrue("'" + size9 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size9.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Water [unit=ML, amount=30]" + "'", str17, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Water [unit=ML, amount=30]" + "'", str23, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test4066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4066");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean5 = cafe1.addRecipe(recipe4);
        cafe1.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size11 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size11, (int) '4');
        uk.ac.sheffield.com1003.cafe.Recipe recipe15 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException", 100.0d, size11, 32);
        boolean boolean16 = cafe1.addRecipe(recipe15);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + size11 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size11.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test4067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4067");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0]", 100, (int) (byte) 0);
        cafe3.printMenu();
        uk.ac.sheffield.com1003.cafe.Order order5 = cafe3.serveOrder();
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=1, decaf=false]", (double) (short) -1);
        boolean boolean9 = cafe3.addRecipe(recipe8);
        cafe3.printMenu();
        cafe3.printMenu();
        uk.ac.sheffield.com1003.cafe.Order order12 = cafe3.serveOrder();
        org.junit.Assert.assertNull(order5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(order12);
    }

    @Test
    public void test4068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4068");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Water [unit=ML, amount=30]; For: ; Paid: 30.0");
        cafe1.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe recipe5 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe5, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe5, "Cafe", (double) 0.0f, "Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe5, "Water", (double) 100.0f, "Milk");
        double double17 = recipe5.getPrice();
        double double18 = recipe5.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order22 = new uk.ac.sheffield.com1003.cafe.Order(recipe5, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0", (double) 1L, "Order: ; For: Milk [unit=ML, amount=-1, type=WHOLE]; Paid: 0.0");
        boolean boolean23 = cafe1.addRecipe(recipe5);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk25 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        int int26 = milk25.getAmount();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water27 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str28 = water27.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe31 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order34 = new uk.ac.sheffield.com1003.cafe.Order(recipe31, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order38 = new uk.ac.sheffield.com1003.cafe.Order(recipe31, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean39 = water27.equals((java.lang.Object) "Welcome to Cafe");
        boolean boolean40 = milk25.equals((java.lang.Object) boolean39);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException41 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray42 = recipeNotFoundException41.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException43 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray44 = recipeNotFoundException43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = recipeNotFoundException43.getSuppressed();
        recipeNotFoundException41.addSuppressed((java.lang.Throwable) recipeNotFoundException43);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException47 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException48 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray49 = recipeNotFoundException48.getSuppressed();
        recipeNotFoundException47.addSuppressed((java.lang.Throwable) recipeNotFoundException48);
        recipeNotFoundException43.addSuppressed((java.lang.Throwable) recipeNotFoundException48);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException52 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray53 = recipeNotFoundException52.getSuppressed();
        recipeNotFoundException48.addSuppressed((java.lang.Throwable) recipeNotFoundException52);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException55 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray56 = recipeNotFoundException55.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException57 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray58 = recipeNotFoundException57.getSuppressed();
        java.lang.Throwable[] throwableArray59 = recipeNotFoundException57.getSuppressed();
        recipeNotFoundException55.addSuppressed((java.lang.Throwable) recipeNotFoundException57);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException61 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException62 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray63 = recipeNotFoundException62.getSuppressed();
        recipeNotFoundException61.addSuppressed((java.lang.Throwable) recipeNotFoundException62);
        recipeNotFoundException57.addSuppressed((java.lang.Throwable) recipeNotFoundException62);
        java.lang.Throwable[] throwableArray66 = recipeNotFoundException57.getSuppressed();
        recipeNotFoundException52.addSuppressed((java.lang.Throwable) recipeNotFoundException57);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException68 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray69 = recipeNotFoundException68.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException70 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException71 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray72 = recipeNotFoundException71.getSuppressed();
        recipeNotFoundException70.addSuppressed((java.lang.Throwable) recipeNotFoundException71);
        recipeNotFoundException68.addSuppressed((java.lang.Throwable) recipeNotFoundException70);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException75 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray76 = cafeOutOfCapacityException75.getSuppressed();
        recipeNotFoundException68.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException75);
        java.lang.Throwable[] throwableArray78 = cafeOutOfCapacityException75.getSuppressed();
        java.lang.Throwable[] throwableArray79 = cafeOutOfCapacityException75.getSuppressed();
        recipeNotFoundException52.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException75);
        java.lang.Throwable[] throwableArray81 = cafeOutOfCapacityException75.getSuppressed();
        boolean boolean82 = milk25.equals((java.lang.Object) cafeOutOfCapacityException75);
        recipe5.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk25);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Water" + "'", str28, "Water");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test4069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4069");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to ");
        java.lang.String str2 = cafe1.greeting();
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order4 = cafe3.serveOrder();
        java.lang.String str5 = cafe3.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size12, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Plain]", (double) '#', size12, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) 1, size12, (int) ' ');
        boolean boolean19 = cafe3.addRecipe(recipe18);
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe18, "Order: ; For: Coffee [unit=GR, amount=30, decaf=false]; Paid: 0.0", (double) (byte) 1, "Cafe");
        double double24 = recipe18.getPrice();
        boolean boolean25 = cafe1.addRecipe(recipe18);
        java.lang.String str26 = cafe1.getName();
        java.lang.String str27 = cafe1.greeting();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Welcome to " + "'", str2, "Welcome to Welcome to ");
        org.junit.Assert.assertNull(order4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Welcome to Cafe" + "'", str5, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Welcome to " + "'", str26, "Welcome to ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Welcome to Welcome to " + "'", str27, "Welcome to Welcome to ");
    }

    @Test
    public void test4070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4070");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Welcome to Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0]", (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            cafe3.removeRecipe("Milk [unit=ML, amount=35, type=SEMI]");
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4071");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '#');
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk9);
        int int11 = milk9.getAmount();
        java.lang.String str12 = milk9.getName();
        java.lang.Object obj13 = null;
        boolean boolean14 = milk9.equals(obj13);
        uk.ac.sheffield.com1003.cafe.Recipe recipe17 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe17, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Cafe cafe24 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]", 30, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe27 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean28 = cafe24.addRecipe(recipe27);
        uk.ac.sheffield.com1003.cafe.Order order31 = new uk.ac.sheffield.com1003.cafe.Order(recipe27, "Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", (double) (short) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup33 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Milk [unit=ML, amount=30, type=WHOLE]");
        recipe27.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup33);
        recipe17.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup33);
        java.lang.String str36 = syrup33.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit37 = syrup33.getUnit();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit38 = syrup33.getUnit();
        boolean boolean39 = milk9.equals((java.lang.Object) syrup33);
        int int40 = syrup33.getAmount();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Milk" + "'", str12, "Milk");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Syrup" + "'", str36, "Syrup");
        org.junit.Assert.assertTrue("'" + unit37 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit37.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + unit38 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit38.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
    }

    @Test
    public void test4072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4072");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        boolean boolean10 = recipe8.equals((java.lang.Object) 10.0f);
        boolean boolean11 = cafe0.addRecipe(recipe8);
        java.lang.String str12 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray13 = cafe0.getMenu();
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk", (double) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe16, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (short) -1, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk22 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100);
        java.lang.String str23 = milk22.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee24 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str25 = coffee24.toString();
        java.lang.String str26 = coffee24.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit27 = coffee24.getUnit();
        boolean boolean28 = milk22.equals((java.lang.Object) coffee24);
        boolean boolean29 = recipe16.equals((java.lang.Object) boolean28);
        boolean boolean30 = cafe0.addRecipe(recipe16);
        cafe0.printPendingOrders();
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Welcome to Cafe" + "'", str12, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray13);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Milk" + "'", str23, "Milk");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str25, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str26, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + unit27 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit27.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test4073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4073");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0]");
        cafe1.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order3 = cafe1.serveOrder();
        org.junit.Assert.assertNull(order3);
    }

    @Test
    public void test4074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4074");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) (byte) 10, "Water [unit=ML, amount=30]");
        boolean boolean9 = recipe4.isReady();
        boolean boolean10 = recipe4.isReady();
        double double11 = recipe4.getPrice();
        boolean boolean12 = recipe4.isReady();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4075");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int1 = water0.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException3.getSuppressed();
        boolean boolean7 = water0.equals((java.lang.Object) recipeNotFoundException3);
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException3.getSuppressed();
        java.lang.Throwable[] throwableArray9 = recipeNotFoundException3.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException10 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray11 = recipeNotFoundException10.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException12.getSuppressed();
        recipeNotFoundException10.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException17 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray18 = recipeNotFoundException17.getSuppressed();
        recipeNotFoundException16.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException21.getSuppressed();
        recipeNotFoundException17.addSuppressed((java.lang.Throwable) recipeNotFoundException21);
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException3.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException26 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray27 = recipeNotFoundException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = recipeNotFoundException26.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException29 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray30 = recipeNotFoundException29.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException31 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException32 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray33 = recipeNotFoundException32.getSuppressed();
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) recipeNotFoundException32);
        recipeNotFoundException29.addSuppressed((java.lang.Throwable) recipeNotFoundException31);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException36 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray37 = cafeOutOfCapacityException36.getSuppressed();
        recipeNotFoundException29.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException36);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException39 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray40 = recipeNotFoundException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = recipeNotFoundException39.getSuppressed();
        recipeNotFoundException29.addSuppressed((java.lang.Throwable) recipeNotFoundException39);
        recipeNotFoundException26.addSuppressed((java.lang.Throwable) recipeNotFoundException39);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException44 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray45 = recipeNotFoundException44.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException46 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray47 = recipeNotFoundException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = recipeNotFoundException46.getSuppressed();
        recipeNotFoundException44.addSuppressed((java.lang.Throwable) recipeNotFoundException46);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException50 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray51 = recipeNotFoundException50.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException52 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException53 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray54 = recipeNotFoundException53.getSuppressed();
        recipeNotFoundException52.addSuppressed((java.lang.Throwable) recipeNotFoundException53);
        recipeNotFoundException50.addSuppressed((java.lang.Throwable) recipeNotFoundException52);
        recipeNotFoundException44.addSuppressed((java.lang.Throwable) recipeNotFoundException50);
        recipeNotFoundException26.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException59 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray60 = recipeNotFoundException59.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException61 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray62 = recipeNotFoundException61.getSuppressed();
        java.lang.Throwable[] throwableArray63 = recipeNotFoundException61.getSuppressed();
        recipeNotFoundException59.addSuppressed((java.lang.Throwable) recipeNotFoundException61);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException65 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException66 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray67 = recipeNotFoundException66.getSuppressed();
        recipeNotFoundException65.addSuppressed((java.lang.Throwable) recipeNotFoundException66);
        recipeNotFoundException61.addSuppressed((java.lang.Throwable) recipeNotFoundException66);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException70 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray71 = recipeNotFoundException70.getSuppressed();
        recipeNotFoundException66.addSuppressed((java.lang.Throwable) recipeNotFoundException70);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException73 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray74 = recipeNotFoundException73.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException75 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray76 = recipeNotFoundException75.getSuppressed();
        java.lang.Throwable[] throwableArray77 = recipeNotFoundException75.getSuppressed();
        recipeNotFoundException73.addSuppressed((java.lang.Throwable) recipeNotFoundException75);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException79 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException80 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray81 = recipeNotFoundException80.getSuppressed();
        recipeNotFoundException79.addSuppressed((java.lang.Throwable) recipeNotFoundException80);
        recipeNotFoundException75.addSuppressed((java.lang.Throwable) recipeNotFoundException80);
        java.lang.Throwable[] throwableArray84 = recipeNotFoundException75.getSuppressed();
        recipeNotFoundException70.addSuppressed((java.lang.Throwable) recipeNotFoundException75);
        recipeNotFoundException44.addSuppressed((java.lang.Throwable) recipeNotFoundException70);
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException70);
        java.lang.String str88 = recipeNotFoundException70.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 30 + "'", int1 == 30);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str88, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4076");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", 10.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee5 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '#', false);
        java.lang.String str6 = coffee5.toString();
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee5);
        double double8 = recipe2.getPrice();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Coffee [unit=GR, amount=35, decaf=false]" + "'", str6, "Coffee [unit=GR, amount=35, decaf=false]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test4077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4077");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Milk; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: -1.0");
        cafe1.printMenu();
        cafe1.printPendingOrders();
    }

    @Test
    public void test4078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4078");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=-1, type=SKIMMED]", (double) 100);
    }

    @Test
    public void test4079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4079");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '4', true);
        java.lang.Class<?> wildcardClass3 = coffee2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test4080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4080");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Welcome to Syrup [unit=ML, amount=10, flavour=Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0]", (double) 32);
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0", (double) 1L, "uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException");
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Milk [unit=ML, amount=0, type=SEMI]", 52.0d);
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: Water [unit=ML, amount=30]; For: ; Paid: 30.0", (double) (byte) 0, "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=-1, type=WHOLE]]");
        order13.printReceipt();
    }

    @Test
    public void test4081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4081");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order5 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Milk [unit=ML, amount=10, type=SKIMMED]", (double) (byte) 0);
        java.lang.String str6 = order5.toString();
        order5.serve();
        java.lang.Class<?> wildcardClass8 = order5.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=SKIMMED]; Paid: 0.0" + "'", str6, "Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=SKIMMED]; Paid: 0.0");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test4082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4082");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        java.lang.String str8 = recipe4.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water10 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 100);
        java.lang.String str11 = water10.toString();
        java.lang.String str12 = water10.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit13 = water10.getUnit();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water10);
        double double15 = recipe4.getPrice();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Water [unit=ML, amount=100]" + "'", str11, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Water [unit=ML, amount=100]" + "'", str12, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertTrue("'" + unit13 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit13.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test4083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4083");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Coffee [unit=GR, amount=0, decaf=false]");
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit2 = syrup1.getUnit();
        java.lang.String str3 = syrup1.toString();
        java.lang.String str4 = syrup1.toString();
        java.lang.String str5 = syrup1.toString();
        java.lang.String str6 = syrup1.toString();
        org.junit.Assert.assertTrue("'" + unit2 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit2.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=0, decaf=false]]" + "'", str3, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=0, decaf=false]]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=0, decaf=false]]" + "'", str4, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=0, decaf=false]]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=0, decaf=false]]" + "'", str5, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=0, decaf=false]]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=0, decaf=false]]" + "'", str6, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=0, decaf=false]]");
    }

    @Test
    public void test4084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4084");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup0 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup();
        int int1 = syrup0.getAmount();
        uk.ac.sheffield.com1003.cafe.Cafe cafe5 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", 100, (int) (short) 100);
        cafe5.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe recipe9 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        java.lang.String str10 = recipe9.getName();
        boolean boolean11 = recipe9.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type14 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk15 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100, type14);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk16 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type14);
        recipe9.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk16);
        boolean boolean18 = recipe9.isReady();
        boolean boolean19 = cafe5.addRecipe(recipe9);
        boolean boolean20 = syrup0.equals((java.lang.Object) cafe5);
        uk.ac.sheffield.com1003.cafe.Order order21 = cafe5.serveOrder();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10 + "'", int1 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Milk [unit=ML, amount=100, type=WHOLE]" + "'", str10, "Milk [unit=ML, amount=100, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type14.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(order21);
    }

    @Test
    public void test4085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4085");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk9);
        double double11 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Order: ; For: hi!; Paid: 0.0", 0.0d);
        uk.ac.sheffield.com1003.cafe.Order order17 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk", (double) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Order order21 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Coffee [unit=GR, amount=1, decaf=true]", (double) 1L, "Order: ; For: Syrup; Paid: 35.0");
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Order: ; For: ; Paid: 10.0", (double) (-1L));
        java.lang.String str25 = order24.toString();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Order: ; For: Welcome to Order: ; For: ; Paid: 10.0; Paid: -1.0" + "'", str25, "Order: ; For: Welcome to Order: ; For: ; Paid: 10.0; Paid: -1.0");
    }

    @Test
    public void test4086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4086");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100);
        java.lang.String str2 = milk1.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee3 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str4 = coffee3.toString();
        java.lang.String str5 = coffee3.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit6 = coffee3.getUnit();
        boolean boolean7 = milk1.equals((java.lang.Object) coffee3);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee10 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(1, false);
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Cafe", (double) 0.0f, "Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup22 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("");
        recipe13.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup22);
        boolean boolean24 = coffee10.equals((java.lang.Object) recipe13);
        uk.ac.sheffield.com1003.cafe.Order order27 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Coffee [unit=GR, amount=0, decaf=false]", 35.0d);
        boolean boolean28 = milk1.equals((java.lang.Object) "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Milk" + "'", str2, "Milk");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str4, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str5, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + unit6 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit6.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4087");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean15 = recipe4.equals((java.lang.Object) 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee16 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str17 = coffee16.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type18 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean19 = coffee16.equals((java.lang.Object) type18);
        java.lang.String str20 = coffee16.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee16);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Coffee [unit=GR, amount=30, decaf=false]", 0.0d);
        java.lang.String str25 = recipe4.getName();
        uk.ac.sheffield.com1003.cafe.Order order28 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 10.0", (double) (-1.0f));
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str17, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type18.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str20, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test4088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4088");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) '4', size4, 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (short) -1, size4, 0);
        uk.ac.sheffield.com1003.cafe.Cafe cafe10 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray11 = cafe10.getMenu();
        boolean boolean12 = recipe8.equals((java.lang.Object) cafe10);
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Syrup [unit=ML, amount=10, flavour=uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException]", (double) 1L, "Milk [unit=ML, amount=1, type=WHOLE]");
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Milk [unit=ML, amount=100, type=null]", (double) 1L, "Coffee [unit=GR, amount=10, decaf=false]");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk25 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '#');
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit26 = milk25.getUnit();
        // The following exception was thrown during execution in test generation
        try {
            recipe8.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk25);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertNotNull(recipeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + unit26 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit26.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
    }

    @Test
    public void test4089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4089");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray2 = cafe1.getMenu();
        org.junit.Assert.assertNotNull(recipeArray2);
    }

    @Test
    public void test4090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4090");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Coffee [unit=GR, amount=0, decaf=false]", 0.0d);
        java.lang.String str13 = recipe4.getName();
        java.lang.String str14 = recipe4.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee15 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str16 = coffee15.toString();
        java.lang.String str17 = coffee15.toString();
        java.lang.String str18 = coffee15.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit19 = coffee15.getUnit();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee15);
        java.lang.String str21 = coffee15.getName();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str16, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str17, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str18, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + unit19 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit19.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Coffee" + "'", str21, "Coffee");
    }

    @Test
    public void test4091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4091");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(0, false);
        int int3 = coffee2.getAmount();
        java.lang.String str4 = coffee2.toString();
        java.lang.String str5 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size8, (int) '4');
        boolean boolean12 = recipe10.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Welcome to Cafe", 0.0d);
        java.lang.String str16 = order15.toString();
        boolean boolean17 = coffee2.equals((java.lang.Object) order15);
        java.lang.String str18 = order15.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str4, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str5, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Order: Water [unit=ML, amount=30]; For: Welcome to Cafe; Paid: 0.0" + "'", str16, "Order: Water [unit=ML, amount=30]; For: Welcome to Cafe; Paid: 0.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Order: Water [unit=ML, amount=30]; For: Welcome to Cafe; Paid: 0.0" + "'", str18, "Order: Water [unit=ML, amount=30]; For: Welcome to Cafe; Paid: 0.0");
    }

    @Test
    public void test4092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4092");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk2 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean4 = milk2.equals((java.lang.Object) type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type3);
        java.lang.String str6 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee8 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str9 = coffee8.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type10 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean11 = coffee8.equals((java.lang.Object) type10);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk12 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type10);
        java.lang.String str13 = milk12.getName();
        java.lang.String str14 = milk12.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe16 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe16.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray18 = cafe16.getMenu();
        java.lang.String str19 = cafe16.getName();
        java.lang.String str20 = cafe16.getName();
        boolean boolean21 = milk12.equals((java.lang.Object) cafe16);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size24 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size24, (int) '4');
        boolean boolean28 = recipe26.equals((java.lang.Object) 10.0d);
        java.lang.String str29 = recipe26.getName();
        boolean boolean31 = recipe26.equals((java.lang.Object) "Coffee");
        boolean boolean32 = milk12.equals((java.lang.Object) recipe26);
        boolean boolean33 = milk5.equals((java.lang.Object) milk12);
        java.lang.String str34 = milk12.toString();
        java.lang.String str35 = milk12.getName();
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk [unit=ML, amount=0, type=SKIMMED]" + "'", str6, "Milk [unit=ML, amount=0, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str9, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type10.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Milk" + "'", str13, "Milk");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str14, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertNotNull(recipeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + size24 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size24.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Water [unit=ML, amount=30]" + "'", str29, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str34, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Milk" + "'", str35, "Milk");
    }

    @Test
    public void test4093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4093");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup", (int) (short) 10, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size6, (int) '4');
        boolean boolean10 = recipe8.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Welcome to Cafe", 0.0d);
        java.lang.String str14 = recipe8.getName();
        uk.ac.sheffield.com1003.cafe.Order order18 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Milk [unit=ML, amount=10, type=WHOLE]", (double) (byte) 1, "Coffee [unit=GR, amount=8, decaf=false]");
        boolean boolean19 = cafe3.addRecipe(recipe8);
        uk.ac.sheffield.com1003.cafe.Order order20 = cafe3.serveOrder();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size23 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe25 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size23, (int) (short) 10);
        boolean boolean27 = recipe25.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order30 = new uk.ac.sheffield.com1003.cafe.Order(recipe25, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order33 = new uk.ac.sheffield.com1003.cafe.Order(recipe25, "Coffee [unit=GR, amount=0, decaf=false]", 0.0d);
        boolean boolean34 = cafe3.addRecipe(recipe25);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee38 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) -1, true);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee41 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str42 = coffee41.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type43 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean44 = coffee41.equals((java.lang.Object) type43);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk45 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type43);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk46 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1), type43);
        boolean boolean47 = coffee38.equals((java.lang.Object) type43);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk48 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type43);
        int int49 = milk48.getAmount();
        java.lang.String str50 = milk48.getName();
        recipe25.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk48);
        double double52 = recipe25.getPrice();
        boolean boolean53 = recipe25.isReady();
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(order20);
        org.junit.Assert.assertTrue("'" + size23 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size23.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str42, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type43.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Milk" + "'", str50, "Milk");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test4094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4094");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 0, false);
        java.lang.String str3 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee12 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str13 = coffee12.toString();
        boolean boolean14 = recipe8.equals((java.lang.Object) str13);
        uk.ac.sheffield.com1003.cafe.Order order18 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Syrup", (double) '#', "uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException");
        double double19 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", (double) 8, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        boolean boolean24 = coffee2.equals((java.lang.Object) "Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0");
        int int25 = coffee2.getAmount();
        int int26 = coffee2.getAmount();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size29 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe31 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size29, (int) (short) 10);
        java.lang.String str32 = recipe31.getName();
        uk.ac.sheffield.com1003.cafe.Order order35 = new uk.ac.sheffield.com1003.cafe.Order(recipe31, "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", 1.0d);
        boolean boolean36 = coffee2.equals((java.lang.Object) order35);
        java.lang.String str37 = coffee2.toString();
        int int38 = coffee2.getAmount();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str13, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + size29 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size29.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str37, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test4095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4095");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Water; Paid: 1.0", (int) (byte) 1, (int) (byte) 100);
        java.lang.String str4 = cafe3.greeting();
        cafe3.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray6 = cafe3.getMenu();
        // The following exception was thrown during execution in test generation
        try {
            cafe3.removeRecipe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0");
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Welcome to Order: ; For: Water; Paid: 1.0" + "'", str4, "Welcome to Order: ; For: Water; Paid: 1.0");
        org.junit.Assert.assertNotNull(recipeArray6);
    }

    @Test
    public void test4096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4096");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: Water; Paid: 1.0", (double) ' ');
        java.lang.String str3 = recipe2.getName();
        java.lang.Class<?> wildcardClass4 = recipe2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Welcome to Order: ; For: Water; Paid: 1.0" + "'", str3, "Welcome to Order: ; For: Water; Paid: 1.0");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test4097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4097");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        cafe1.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order3 = cafe1.serveOrder();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray4 = cafe1.getMenu();
        org.junit.Assert.assertNull(order3);
        org.junit.Assert.assertNotNull(recipeArray4);
    }

    @Test
    public void test4098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4098");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe1.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe1.getMenu();
        java.lang.String str4 = cafe1.getName();
        java.lang.String str5 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Order order6 = cafe1.serveOrder();
        uk.ac.sheffield.com1003.cafe.Recipe recipe9 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe9, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe9, "Cafe", (double) 0.0f, "Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe9, "Water", (double) 100.0f, "Milk");
        double double21 = recipe9.getPrice();
        boolean boolean22 = cafe1.addRecipe(recipe9);
        java.lang.String str23 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray24 = cafe1.getMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray25 = cafe1.getMenu();
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(order6);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(recipeArray24);
        org.junit.Assert.assertNotNull(recipeArray25);
    }

    @Test
    public void test4099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4099");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int1 = water0.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException3.getSuppressed();
        boolean boolean7 = water0.equals((java.lang.Object) recipeNotFoundException3);
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException3.getSuppressed();
        java.lang.Throwable[] throwableArray9 = recipeNotFoundException3.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException10 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray11 = recipeNotFoundException10.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException12.getSuppressed();
        recipeNotFoundException10.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException17 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray18 = recipeNotFoundException17.getSuppressed();
        recipeNotFoundException16.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException21.getSuppressed();
        recipeNotFoundException17.addSuppressed((java.lang.Throwable) recipeNotFoundException21);
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException tooManyIngredientsException25 = new uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException();
        java.lang.Throwable[] throwableArray26 = tooManyIngredientsException25.getSuppressed();
        recipeNotFoundException17.addSuppressed((java.lang.Throwable) tooManyIngredientsException25);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException28 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException29 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray30 = cafeOutOfCapacityException29.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException31 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException31.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException33 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray34 = recipeNotFoundException33.getSuppressed();
        java.lang.Throwable[] throwableArray35 = recipeNotFoundException33.getSuppressed();
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) recipeNotFoundException33);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException37 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException38 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray39 = recipeNotFoundException38.getSuppressed();
        recipeNotFoundException37.addSuppressed((java.lang.Throwable) recipeNotFoundException38);
        recipeNotFoundException33.addSuppressed((java.lang.Throwable) recipeNotFoundException38);
        cafeOutOfCapacityException29.addSuppressed((java.lang.Throwable) recipeNotFoundException33);
        cafeOutOfCapacityException28.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException29);
        java.lang.Throwable[] throwableArray44 = cafeOutOfCapacityException29.getSuppressed();
        recipeNotFoundException17.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException29);
        java.lang.String str46 = recipeNotFoundException17.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 30 + "'", int1 == 30);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str46, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4100");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Water [unit=ML, amount=30]; For: Welcome to Cafe; Paid: -1.0", (int) (short) 10, (int) (byte) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) (-1));
        boolean boolean7 = cafe3.addRecipe(recipe6);
        cafe3.printMenu();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test4101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4101");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        int int2 = water0.getAmount();
        java.lang.String str3 = water0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 30 + "'", int2 == 30);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Water [unit=ML, amount=30]" + "'", str3, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4102");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: ; Paid: 10.0", (double) (byte) 10);
        boolean boolean3 = recipe2.isReady();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test4103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4103");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0", (double) (short) 0);
    }

    @Test
    public void test4104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4104");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj2 = null;
        boolean boolean3 = milk1.equals(obj2);
        java.lang.String str4 = milk1.toString();
        java.lang.String str5 = milk1.getName();
        int int6 = milk1.getAmount();
        boolean boolean8 = milk1.equals((java.lang.Object) "Water [unit=ML, amount=100]");
        int int9 = milk1.getAmount();
        java.lang.String str10 = milk1.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe14 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup", (int) (short) 10, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size17 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size17, (int) '4');
        boolean boolean21 = recipe19.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "Welcome to Cafe", 0.0d);
        java.lang.String str25 = recipe19.getName();
        uk.ac.sheffield.com1003.cafe.Order order29 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "Milk [unit=ML, amount=10, type=WHOLE]", (double) (byte) 1, "Coffee [unit=GR, amount=8, decaf=false]");
        boolean boolean30 = cafe14.addRecipe(recipe19);
        uk.ac.sheffield.com1003.cafe.Order order31 = cafe14.serveOrder();
        boolean boolean32 = milk1.equals((java.lang.Object) order31);
        uk.ac.sheffield.com1003.cafe.Cafe cafe33 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order34 = cafe33.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order35 = cafe33.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order36 = cafe33.serveOrder();
        java.lang.String str37 = cafe33.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size40 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe42 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size40, (int) (short) 10);
        boolean boolean44 = recipe42.equals((java.lang.Object) 10.0f);
        double double45 = recipe42.getPrice();
        uk.ac.sheffield.com1003.cafe.Cafe cafe47 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray48 = cafe47.getMenu();
        uk.ac.sheffield.com1003.cafe.Order order49 = cafe47.serveOrder();
        java.lang.String str50 = cafe47.getName();
        java.lang.String str51 = cafe47.greeting();
        boolean boolean52 = recipe42.equals((java.lang.Object) str51);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException53 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException54 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray55 = cafeOutOfCapacityException54.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException56 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray57 = recipeNotFoundException56.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException58 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray59 = recipeNotFoundException58.getSuppressed();
        java.lang.Throwable[] throwableArray60 = recipeNotFoundException58.getSuppressed();
        recipeNotFoundException56.addSuppressed((java.lang.Throwable) recipeNotFoundException58);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException62 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException63 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray64 = recipeNotFoundException63.getSuppressed();
        recipeNotFoundException62.addSuppressed((java.lang.Throwable) recipeNotFoundException63);
        recipeNotFoundException58.addSuppressed((java.lang.Throwable) recipeNotFoundException63);
        cafeOutOfCapacityException54.addSuppressed((java.lang.Throwable) recipeNotFoundException58);
        cafeOutOfCapacityException53.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException54);
        boolean boolean69 = recipe42.equals((java.lang.Object) cafeOutOfCapacityException54);
        double double70 = recipe42.getPrice();
        boolean boolean71 = cafe33.addRecipe(recipe42);
        boolean boolean72 = milk1.equals((java.lang.Object) recipe42);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str4, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Milk" + "'", str5, "Milk");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Milk" + "'", str10, "Milk");
        org.junit.Assert.assertTrue("'" + size17 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size17.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Water [unit=ML, amount=30]" + "'", str25, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(order31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(order34);
        org.junit.Assert.assertNull(order35);
        org.junit.Assert.assertNull(order36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Welcome to Cafe" + "'", str37, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size40 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size40.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(recipeArray48);
        org.junit.Assert.assertNull(order49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Welcome to Cafe" + "'", str50, "Welcome to Cafe");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Welcome to Welcome to Cafe" + "'", str51, "Welcome to Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test4105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4105");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup3 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: ; Paid: 10.0");
        boolean boolean4 = water0.equals((java.lang.Object) "Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: ; Paid: 10.0");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test4106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4106");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee0 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str1 = coffee0.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type2 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean3 = coffee0.equals((java.lang.Object) type2);
        java.lang.String str4 = coffee0.toString();
        java.lang.Object obj5 = null;
        boolean boolean6 = coffee0.equals(obj5);
        int int7 = coffee0.getAmount();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type9 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30, type9);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size13 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe15 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size13, (int) (short) 10);
        boolean boolean17 = recipe15.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe15, "hi!", (double) 0L);
        boolean boolean21 = recipe15.isReady();
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe15, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) 0L);
        java.lang.String str25 = order24.toString();
        java.lang.String str26 = order24.toString();
        java.lang.String str27 = order24.toString();
        order24.serve();
        boolean boolean29 = milk10.equals((java.lang.Object) order24);
        boolean boolean30 = coffee0.equals((java.lang.Object) boolean29);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str1, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type2.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str4, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type9.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + size13 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size13.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0" + "'", str25, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0" + "'", str26, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0" + "'", str27, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4107");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Water [unit=ML, amount=30]; For: Welcome to Cafe; Paid: -1.0", (int) (short) 10, (int) (byte) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) (-1));
        boolean boolean7 = cafe3.addRecipe(recipe6);
        uk.ac.sheffield.com1003.cafe.Order order8 = cafe3.serveOrder();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(order8);
    }

    @Test
    public void test4108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4108");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order3 = cafe0.serveOrder();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray5 = cafe0.getMenu();
        java.lang.String str6 = cafe0.greeting();
        org.junit.Assert.assertNull(order3);
        org.junit.Assert.assertNotNull(recipeArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Welcome to Cafe" + "'", str6, "Welcome to Cafe");
    }

    @Test
    public void test4109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4109");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Plain]");
        java.lang.String str2 = cafe1.greeting();
        java.lang.String str3 = cafe1.greeting();
        uk.ac.sheffield.com1003.cafe.Order order4 = cafe1.serveOrder();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Syrup [unit=ML, amount=10, flavour=Plain]" + "'", str2, "Welcome to Syrup [unit=ML, amount=10, flavour=Plain]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Welcome to Syrup [unit=ML, amount=10, flavour=Plain]" + "'", str3, "Welcome to Syrup [unit=ML, amount=10, flavour=Plain]");
        org.junit.Assert.assertNull(order4);
    }

    @Test
    public void test4110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4110");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee0 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str1 = coffee0.toString();
        java.lang.String str2 = coffee0.toString();
        java.lang.String str3 = coffee0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj6 = null;
        boolean boolean7 = milk5.equals(obj6);
        java.lang.String str8 = milk5.toString();
        java.lang.String str9 = milk5.getName();
        java.lang.String str10 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe14 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (int) (short) 100, (int) '#');
        cafe14.printPendingOrders();
        cafe14.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order17 = cafe14.serveOrder();
        boolean boolean18 = milk5.equals((java.lang.Object) order17);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size21 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe23 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size21, (int) (short) 10);
        double double24 = recipe23.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order27 = new uk.ac.sheffield.com1003.cafe.Order(recipe23, "Welcome to Cafe", (double) 10);
        boolean boolean28 = milk5.equals((java.lang.Object) recipe23);
        uk.ac.sheffield.com1003.cafe.Cafe cafe29 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe29.printPendingOrders();
        java.lang.String str31 = cafe29.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size34 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe36 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size34, (int) (short) 10);
        java.lang.String str37 = recipe36.getName();
        boolean boolean38 = cafe29.addRecipe(recipe36);
        cafe29.printMenu();
        cafe29.printPendingOrders();
        boolean boolean41 = milk5.equals((java.lang.Object) cafe29);
        boolean boolean42 = coffee0.equals((java.lang.Object) cafe29);
        java.lang.String str43 = coffee0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit44 = coffee0.getUnit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str1, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee" + "'", str3, "Coffee");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str8, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Milk" + "'", str9, "Milk");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str10, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertNull(order17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + size21 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size21.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Welcome to Cafe" + "'", str31, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size34 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size34.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Coffee" + "'", str43, "Coffee");
        org.junit.Assert.assertTrue("'" + unit44 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit44.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
    }

    @Test
    public void test4111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4111");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]", (int) ' ', (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean7 = cafe3.addRecipe(recipe6);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1));
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size12, (int) (short) 10);
        double double15 = recipe14.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order18 = new uk.ac.sheffield.com1003.cafe.Order(recipe14, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order22 = new uk.ac.sheffield.com1003.cafe.Order(recipe14, "", (double) (short) 10, "Water [unit=ML, amount=30]");
        boolean boolean23 = milk9.equals((java.lang.Object) order22);
        boolean boolean24 = recipe6.equals((java.lang.Object) boolean23);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4112");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order5 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Coffee [unit=GR, amount=8, decaf=false]", (double) (-1.0f));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee7 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(35);
        java.lang.String str8 = coffee7.toString();
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee7);
        boolean boolean11 = coffee7.equals((java.lang.Object) "Order: Water [unit=ML, amount=30]; For: Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0; Paid: 100.0");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Coffee [unit=GR, amount=35, decaf=false]" + "'", str8, "Coffee [unit=GR, amount=35, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4113");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str3 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type4 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean5 = coffee2.equals((java.lang.Object) type4);
        java.lang.String str6 = coffee2.toString();
        java.lang.Object obj7 = null;
        boolean boolean8 = coffee2.equals(obj7);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk12 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type13 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean14 = milk12.equals((java.lang.Object) type13);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk15 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) -1, type13);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk16 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 0, type13);
        boolean boolean17 = coffee2.equals((java.lang.Object) type13);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk18 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 1, type13);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk19 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type13);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit20 = milk19.getUnit();
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup22 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Coffee [unit=GR, amount=100, decaf=true]");
        boolean boolean23 = milk19.equals((java.lang.Object) syrup22);
        java.lang.String str24 = milk19.toString();
        java.lang.String str25 = milk19.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str6, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type13.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + unit20 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit20.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str24, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str25, "Milk [unit=ML, amount=10, type=SKIMMED]");
    }

    @Test
    public void test4114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4114");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(100, true);
        int int3 = coffee2.getAmount();
        java.lang.String str4 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Water; Paid: 1.0", (double) (-1));
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0", 1.0d, "Coffee");
        boolean boolean12 = coffee2.equals((java.lang.Object) recipe7);
        double double13 = recipe7.getPrice();
        java.lang.String str14 = recipe7.getName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Coffee [unit=GR, amount=100, decaf=true]" + "'", str4, "Coffee [unit=GR, amount=100, decaf=true]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Order: ; For: Water; Paid: 1.0" + "'", str14, "Order: ; For: Water; Paid: 1.0");
    }

    @Test
    public void test4115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4115");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe1.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe1.getMenu();
        uk.ac.sheffield.com1003.cafe.Cafe cafe5 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Cafe cafe7 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean11 = cafe7.addRecipe(recipe10);
        boolean boolean12 = cafe5.addRecipe(recipe10);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Coffee [unit=GR, amount=8, decaf=false]", 0.0d, "Order: ; For: Water; Paid: 1.0");
        boolean boolean17 = cafe1.addRecipe(recipe10);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size20 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size20, (int) (short) 10);
        boolean boolean24 = recipe22.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order27 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Order order31 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Welcome to Cafe", 1.0d, "Water [unit=ML, amount=30]");
        boolean boolean32 = recipe10.equals((java.lang.Object) order31);
        uk.ac.sheffield.com1003.cafe.Order order36 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Syrup [unit=ML, amount=10, flavour=Welcome to Milk]", (double) (byte) -1, "Order: ; For: Welcome to Cafe; Paid: 10.0");
        uk.ac.sheffield.com1003.cafe.Order order39 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", (double) 100.0f);
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + size20 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size20.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test4116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4116");
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException0 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray1 = recipeNotFoundException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) recipeNotFoundException2);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException7 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray8 = cafeOutOfCapacityException7.getSuppressed();
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException7);
        java.lang.Throwable[] throwableArray10 = recipeNotFoundException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException11 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray12 = recipeNotFoundException11.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException13 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = recipeNotFoundException13.getSuppressed();
        recipeNotFoundException11.addSuppressed((java.lang.Throwable) recipeNotFoundException13);
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) recipeNotFoundException11);
        uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException tooManyIngredientsException18 = new uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException();
        java.lang.Throwable[] throwableArray19 = tooManyIngredientsException18.getSuppressed();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water20 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int21 = water20.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException22 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException23 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray24 = recipeNotFoundException23.getSuppressed();
        recipeNotFoundException22.addSuppressed((java.lang.Throwable) recipeNotFoundException23);
        java.lang.Throwable[] throwableArray26 = recipeNotFoundException23.getSuppressed();
        boolean boolean27 = water20.equals((java.lang.Object) recipeNotFoundException23);
        java.lang.Throwable[] throwableArray28 = recipeNotFoundException23.getSuppressed();
        tooManyIngredientsException18.addSuppressed((java.lang.Throwable) recipeNotFoundException23);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException30 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray31 = recipeNotFoundException30.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException32 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException33 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray34 = recipeNotFoundException33.getSuppressed();
        recipeNotFoundException32.addSuppressed((java.lang.Throwable) recipeNotFoundException33);
        recipeNotFoundException30.addSuppressed((java.lang.Throwable) recipeNotFoundException32);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException37 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray38 = recipeNotFoundException37.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException39 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException40 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray41 = recipeNotFoundException40.getSuppressed();
        recipeNotFoundException39.addSuppressed((java.lang.Throwable) recipeNotFoundException40);
        recipeNotFoundException37.addSuppressed((java.lang.Throwable) recipeNotFoundException39);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException44 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray45 = cafeOutOfCapacityException44.getSuppressed();
        recipeNotFoundException37.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException44);
        recipeNotFoundException30.addSuppressed((java.lang.Throwable) recipeNotFoundException37);
        tooManyIngredientsException18.addSuppressed((java.lang.Throwable) recipeNotFoundException37);
        uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException tooManyIngredientsException49 = new uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException50 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray51 = recipeNotFoundException50.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException52 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray53 = recipeNotFoundException52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = recipeNotFoundException52.getSuppressed();
        recipeNotFoundException50.addSuppressed((java.lang.Throwable) recipeNotFoundException52);
        tooManyIngredientsException49.addSuppressed((java.lang.Throwable) recipeNotFoundException52);
        tooManyIngredientsException18.addSuppressed((java.lang.Throwable) tooManyIngredientsException49);
        recipeNotFoundException11.addSuppressed((java.lang.Throwable) tooManyIngredientsException18);
        java.lang.Throwable[] throwableArray59 = recipeNotFoundException11.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 30 + "'", int21 == 30);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
    }

    @Test
    public void test4117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4117");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size18 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size18, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) ' ', size18, 30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe24 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=30, decaf=false]", (double) 1.0f, size18, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (double) 10, size18, (int) '#');
        uk.ac.sheffield.com1003.cafe.Recipe recipe28 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 0L, size18, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe30 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) '4', size18, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe32 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) '4', size18, (int) '4');
        uk.ac.sheffield.com1003.cafe.Recipe recipe34 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=10]", (double) (byte) 100, size18, 35);
        uk.ac.sheffield.com1003.cafe.Recipe recipe36 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Welcome to Order: ; For: Water; Paid: 1.0; Paid: 10.0", (double) (-1.0f), size18, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water38 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe41 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 10L);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk43 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        recipe41.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk43);
        boolean boolean45 = water38.equals((java.lang.Object) milk43);
        java.lang.String str46 = water38.toString();
        java.lang.String str47 = water38.toString();
        boolean boolean48 = recipe36.equals((java.lang.Object) str47);
        org.junit.Assert.assertTrue("'" + size18 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size18.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Water [unit=ML, amount=10]" + "'", str46, "Water [unit=ML, amount=10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Water [unit=ML, amount=10]" + "'", str47, "Water [unit=ML, amount=10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test4118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4118");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean3 = recipe2.isReady();
        java.lang.String str4 = recipe2.getName();
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: ; For: Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0; Paid: 0.0", 0.0d);
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=100, decaf=false]]", (double) (short) 10, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Welcome to Water [unit=ML, amount=35]", (double) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water [unit=ML, amount=30]" + "'", str4, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4119");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type1 = null;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk2 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type1);
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe3.printPendingOrders();
        cafe3.printPendingOrders();
        cafe3.printMenu();
        boolean boolean7 = milk2.equals((java.lang.Object) cafe3);
        cafe3.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Cafe cafe10 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Water [unit=ML, amount=30]; For: ; Paid: 30.0");
        cafe10.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order17 = new uk.ac.sheffield.com1003.cafe.Order(recipe14, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order21 = new uk.ac.sheffield.com1003.cafe.Order(recipe14, "Cafe", (double) 0.0f, "Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Order order25 = new uk.ac.sheffield.com1003.cafe.Order(recipe14, "Water", (double) 100.0f, "Milk");
        double double26 = recipe14.getPrice();
        double double27 = recipe14.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order31 = new uk.ac.sheffield.com1003.cafe.Order(recipe14, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0", (double) 1L, "Order: ; For: Milk [unit=ML, amount=-1, type=WHOLE]; Paid: 0.0");
        boolean boolean32 = cafe10.addRecipe(recipe14);
        boolean boolean33 = cafe3.addRecipe(recipe14);
        cafe3.printMenu();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test4120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4120");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Water; Paid: 1.0");
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray2 = cafe1.getMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe1.getMenu();
        org.junit.Assert.assertNotNull(recipeArray2);
        org.junit.Assert.assertNotNull(recipeArray3);
    }

    @Test
    public void test4121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4121");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean4 = water0.equals((java.lang.Object) 30);
        java.lang.String str5 = water0.toString();
        java.lang.String str6 = water0.getName();
        java.lang.String str7 = water0.getName();
        java.lang.String str8 = water0.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe12 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (int) (short) 100, (int) '#');
        cafe12.printPendingOrders();
        cafe12.printPendingOrders();
        cafe12.printPendingOrders();
        java.lang.String str16 = cafe12.greeting();
        java.lang.String str17 = cafe12.getName();
        boolean boolean18 = water0.equals((java.lang.Object) cafe12);
        java.lang.String str19 = cafe12.getName();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray20 = cafe12.getMenu();
        cafe12.printPendingOrders();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Water [unit=ML, amount=30]" + "'", str5, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Water" + "'", str6, "Water");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water" + "'", str7, "Water");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str16, "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str17, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str19, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        org.junit.Assert.assertNotNull(recipeArray20);
    }

    @Test
    public void test4122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4122");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water3 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 0);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee7 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str8 = coffee7.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type9 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean10 = coffee7.equals((java.lang.Object) type9);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk11 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type9);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk12 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '4', type9);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk13 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type9);
        boolean boolean14 = water3.equals((java.lang.Object) type9);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk15 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 0, type9);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk16 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 0, type9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str8, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type9.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4123");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) 'a');
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Coffee [unit=GR, amount=8, decaf=false]", (double) (-1.0f));
        boolean boolean8 = recipe4.isReady();
        boolean boolean9 = recipe4.isReady();
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Milk [unit=ML, amount=-1, type=WHOLE]", (double) 32, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]");
        boolean boolean14 = coffee1.equals((java.lang.Object) recipe4);
        java.lang.String str15 = coffee1.toString();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Coffee [unit=GR, amount=97, decaf=false]" + "'", str15, "Coffee [unit=GR, amount=97, decaf=false]");
    }

    @Test
    public void test4124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4124");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order1 = cafe0.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order2 = cafe0.serveOrder();
        java.lang.String str3 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Order order4 = cafe0.serveOrder();
        java.lang.String str5 = cafe0.greeting();
        cafe0.printMenu();
        org.junit.Assert.assertNull(order1);
        org.junit.Assert.assertNull(order2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Welcome to Cafe" + "'", str3, "Welcome to Cafe");
        org.junit.Assert.assertNull(order4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Welcome to Cafe" + "'", str5, "Welcome to Cafe");
    }

    @Test
    public void test4125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4125");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe1.printMenu();
        cafe1.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = null;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=1, type=WHOLE]", 1.0d, size6, (int) '#');
        boolean boolean9 = cafe1.addRecipe(recipe8);
        boolean boolean10 = recipe8.isReady();
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Milk [unit=ML, amount=0, type=SEMI]", (double) 1.0f);
        order13.printReceipt();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4126");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Cafe; For: Welcome to Syrup [unit=ML, amount=10, flavour=Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0]; Paid: 100.0", (double) ' ');
    }

    @Test
    public void test4127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4127");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean15 = recipe4.equals((java.lang.Object) 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee16 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str17 = coffee16.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type18 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean19 = coffee16.equals((java.lang.Object) type18);
        java.lang.String str20 = coffee16.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee16);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=]]]", (double) (-1.0f));
        java.lang.String str25 = order24.toString();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str17, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type18.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str20, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Order: ; For: Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=]]]; Paid: -1.0" + "'", str25, "Order: ; For: Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=]]]; Paid: -1.0");
    }

    @Test
    public void test4128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4128");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean3 = recipe2.isReady();
        java.lang.String str4 = recipe2.getName();
        java.lang.String str5 = recipe2.getName();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Order: ; For: Water; Paid: 1.0; Paid: 100.0", (double) 10);
        order8.printReceipt();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water [unit=ML, amount=30]" + "'", str4, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Water [unit=ML, amount=30]" + "'", str5, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4129");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee3 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean7 = recipe6.isReady();
        java.lang.String str8 = recipe6.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee9 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe6.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee9);
        boolean boolean11 = coffee3.equals((java.lang.Object) recipe6);
        boolean boolean12 = water1.equals((java.lang.Object) recipe6);
        uk.ac.sheffield.com1003.cafe.Recipe recipe15 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe15, "Coffee", (double) (-1.0f), "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean20 = recipe6.equals((java.lang.Object) recipe15);
        java.lang.String str21 = recipe15.getName();
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe15, "Milk [unit=ML, amount=-1, type=WHOLE]", (double) 100.0f);
        order24.serve();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Water [unit=ML, amount=30]" + "'", str21, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4130");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size12, (int) '4');
        boolean boolean15 = cafe0.addRecipe(recipe14);
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size19 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size19, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe21, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee25 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str26 = coffee25.toString();
        boolean boolean27 = recipe21.equals((java.lang.Object) str26);
        java.lang.String str28 = recipe21.getName();
        boolean boolean29 = cafe0.addRecipe(recipe21);
        uk.ac.sheffield.com1003.cafe.Order order30 = cafe0.serveOrder();
        cafe0.printMenu();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray33 = cafe0.getMenu();
        cafe0.printPendingOrders();
        java.lang.String str35 = cafe0.getName();
        java.lang.String str36 = cafe0.greeting();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = cafe0.placeOrder("Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=32, type=ALMOND]]", "Order: Cafe; For: Welcome to Syrup [unit=ML, amount=10, flavour=Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0]; Paid: 100.0", 100.0d);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + size19 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size19.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str26, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(order30);
        org.junit.Assert.assertNotNull(recipeArray33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Cafe" + "'", str35, "Cafe");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Welcome to Cafe" + "'", str36, "Welcome to Cafe");
    }

    @Test
    public void test4131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4131");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (byte) 100);
        java.lang.String str2 = coffee1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee5 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(10, false);
        java.lang.String str6 = coffee5.toString();
        boolean boolean7 = coffee1.equals((java.lang.Object) coffee5);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=100, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=100, decaf=false]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Coffee [unit=GR, amount=10, decaf=false]" + "'", str6, "Coffee [unit=GR, amount=10, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test4132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4132");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        java.lang.String str10 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray11 = cafe0.getMenu();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray13 = cafe0.getMenu();
        java.lang.String str14 = cafe0.greeting();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Welcome to Cafe" + "'", str10, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray11);
        org.junit.Assert.assertNotNull(recipeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Welcome to Cafe" + "'", str14, "Welcome to Cafe");
    }

    @Test
    public void test4133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4133");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size8, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size8, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (byte) 100, size8, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=35, type=WHOLE]", (double) 1.0f, size8, (int) (byte) 0);
        boolean boolean18 = recipe16.equals((java.lang.Object) "Order: ; For: Milk [unit=ML, amount=100, type=null]; Paid: 97.0");
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4134");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: ; Paid: 10.0", (double) 32);
        boolean boolean3 = recipe2.isReady();
        boolean boolean4 = recipe2.isReady();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test4135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4135");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0");
    }

    @Test
    public void test4136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4136");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) -1, false);
        int int3 = coffee2.getAmount();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water5 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 0);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type11 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean12 = milk10.equals((java.lang.Object) type11);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk13 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) -1, type11);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 0, type11);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk15 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '4', type11);
        boolean boolean16 = water5.equals((java.lang.Object) type11);
        boolean boolean17 = coffee2.equals((java.lang.Object) boolean16);
        int int18 = coffee2.getAmount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type11.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test4137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4137");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        double double5 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", (double) 1L);
        java.lang.String str9 = recipe4.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size12, (int) (short) 10);
        boolean boolean16 = recipe14.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe14, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order22 = new uk.ac.sheffield.com1003.cafe.Order(recipe14, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk24 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean25 = recipe14.equals((java.lang.Object) 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee26 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str27 = coffee26.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type28 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean29 = coffee26.equals((java.lang.Object) type28);
        java.lang.String str30 = coffee26.toString();
        recipe14.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee26);
        java.lang.String str32 = coffee26.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee26);
        uk.ac.sheffield.com1003.cafe.Order order37 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=32, decaf=false]]", (double) 100, "Welcome to Order: ; For: ; Paid: 10.0");
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str27, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type28.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str30, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str32, "Coffee [unit=GR, amount=8, decaf=false]");
    }

    @Test
    public void test4138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4138");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        java.lang.String str2 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe1.getMenu();
        cafe1.printPendingOrders();
        cafe1.printMenu();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray3);
    }

    @Test
    public void test4139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4139");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order1 = cafe0.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order2 = cafe0.serveOrder();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray4 = cafe0.getMenu();
        java.lang.String str5 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray6 = cafe0.getMenu();
        org.junit.Assert.assertNull(order1);
        org.junit.Assert.assertNull(order2);
        org.junit.Assert.assertNotNull(recipeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cafe" + "'", str5, "Cafe");
        org.junit.Assert.assertNotNull(recipeArray6);
    }

    @Test
    public void test4140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4140");
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException0 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException1 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray2 = recipeNotFoundException1.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException4 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray5 = recipeNotFoundException4.getSuppressed();
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException4);
        recipeNotFoundException1.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException8 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray9 = cafeOutOfCapacityException8.getSuppressed();
        recipeNotFoundException1.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException8);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException11 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray12 = recipeNotFoundException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException11.getSuppressed();
        recipeNotFoundException1.addSuppressed((java.lang.Throwable) recipeNotFoundException11);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water15 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str16 = water15.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk18 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean19 = water15.equals((java.lang.Object) 30);
        java.lang.String str20 = water15.toString();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException21.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException23 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException24 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException24.getSuppressed();
        recipeNotFoundException23.addSuppressed((java.lang.Throwable) recipeNotFoundException24);
        recipeNotFoundException21.addSuppressed((java.lang.Throwable) recipeNotFoundException23);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException28 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray29 = cafeOutOfCapacityException28.getSuppressed();
        recipeNotFoundException21.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException28);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException31 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = recipeNotFoundException31.getSuppressed();
        recipeNotFoundException21.addSuppressed((java.lang.Throwable) recipeNotFoundException31);
        boolean boolean35 = water15.equals((java.lang.Object) recipeNotFoundException31);
        recipeNotFoundException11.addSuppressed((java.lang.Throwable) recipeNotFoundException31);
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) recipeNotFoundException31);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException38 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray39 = recipeNotFoundException38.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException40 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray41 = recipeNotFoundException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = recipeNotFoundException40.getSuppressed();
        recipeNotFoundException38.addSuppressed((java.lang.Throwable) recipeNotFoundException40);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException44 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray45 = recipeNotFoundException44.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException46 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException47 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray48 = recipeNotFoundException47.getSuppressed();
        recipeNotFoundException46.addSuppressed((java.lang.Throwable) recipeNotFoundException47);
        recipeNotFoundException44.addSuppressed((java.lang.Throwable) recipeNotFoundException46);
        recipeNotFoundException38.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) recipeNotFoundException38);
        java.lang.Throwable[] throwableArray53 = recipeNotFoundException38.getSuppressed();
        java.lang.String str54 = recipeNotFoundException38.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Water" + "'", str16, "Water");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Water [unit=ML, amount=30]" + "'", str20, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str54, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4141");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]");
        java.lang.String str2 = cafe1.greeting();
        cafe1.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Cafe cafe7 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=-1, type=SKIMMED]", (int) '4', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Cafe cafe11 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]", 30, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean15 = cafe11.addRecipe(recipe14);
        boolean boolean16 = cafe7.addRecipe(recipe14);
        boolean boolean17 = cafe1.addRecipe(recipe14);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]" + "'", str2, "Welcome to Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test4142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4142");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order5 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double6 = recipe2.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee9 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '4', true);
        boolean boolean11 = coffee9.equals((java.lang.Object) 10L);
        boolean boolean13 = coffee9.equals((java.lang.Object) (-1.0f));
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee9);
        double double15 = recipe2.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Water [unit=ML, amount=0]", (double) (byte) 100, "Coffee [unit=GR, amount=0, decaf=false]");
        double double20 = recipe2.getPrice();
        java.lang.Class<?> wildcardClass21 = recipe2.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test4143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4143");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type4 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 10, type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk7 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) 'a', type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk8 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 0, type4);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
    }

    @Test
    public void test4144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4144");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = null;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=30, type=WHOLE]", (double) (short) 10, size2, (int) '#');
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ');
        uk.ac.sheffield.com1003.cafe.ingredients.Water water7 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str8 = water7.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean11 = water7.equals((java.lang.Object) 30);
        java.lang.String str12 = water7.toString();
        java.lang.String str13 = water7.getName();
        boolean boolean15 = water7.equals((java.lang.Object) (byte) -1);
        java.lang.String str16 = water7.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit17 = water7.getUnit();
        boolean boolean18 = milk6.equals((java.lang.Object) water7);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water7);
        boolean boolean20 = recipe4.isReady();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water" + "'", str8, "Water");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Water [unit=ML, amount=30]" + "'", str12, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Water" + "'", str13, "Water");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Water" + "'", str16, "Water");
        org.junit.Assert.assertTrue("'" + unit17 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit17.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4145");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        double double5 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "", (double) (short) 10, "Water [unit=ML, amount=30]");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water13 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str14 = water13.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water13);
        uk.ac.sheffield.com1003.cafe.Cafe cafe16 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe16.printPendingOrders();
        java.lang.String str18 = cafe16.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray19 = cafe16.getMenu();
        cafe16.printMenu();
        boolean boolean21 = water13.equals((java.lang.Object) cafe16);
        java.lang.String str22 = water13.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe25 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean26 = water13.equals((java.lang.Object) 1.0f);
        uk.ac.sheffield.com1003.cafe.Cafe cafe28 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray29 = cafe28.getMenu();
        boolean boolean30 = water13.equals((java.lang.Object) recipeArray29);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size33 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe35 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size33, (int) (short) 10);
        double double36 = recipe35.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order39 = new uk.ac.sheffield.com1003.cafe.Order(recipe35, "Water", (double) 1L);
        uk.ac.sheffield.com1003.cafe.Order order43 = new uk.ac.sheffield.com1003.cafe.Order(recipe35, "Order: ; For: Coffee [unit=GR, amount=30, decaf=false]; Paid: 0.0", (double) (byte) 10, "Milk [unit=ML, amount=32, type=WHOLE]");
        boolean boolean44 = water13.equals((java.lang.Object) order43);
        order43.printReceipt();
        order43.serve();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Welcome to Cafe" + "'", str18, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Water" + "'", str22, "Water");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(recipeArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + size33 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size33.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test4146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4146");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup", (double) 10L, size4, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0", (double) 100.0f, size4, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size11 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size11, (int) '4');
        boolean boolean15 = recipe13.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order18 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Welcome to Cafe", 0.0d);
        boolean boolean20 = recipe13.equals((java.lang.Object) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0", 0.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee24 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str25 = coffee24.toString();
        java.lang.String str26 = coffee24.toString();
        java.lang.String str27 = coffee24.toString();
        int int28 = coffee24.getAmount();
        recipe13.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee24);
        java.lang.String str30 = coffee24.getName();
        recipe8.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee24);
        java.lang.String str32 = coffee24.toString();
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL));
        org.junit.Assert.assertTrue("'" + size11 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size11.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str25, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str26, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str27, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Coffee" + "'", str30, "Coffee");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str32, "Coffee [unit=GR, amount=8, decaf=false]");
    }

    @Test
    public void test4147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4147");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size8, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size8, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (byte) 100, size8, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: Water; Paid: 1.0", 0.0d, size8, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size19 = null;
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Milk", (double) (byte) 0, size19, 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water23 = new uk.ac.sheffield.com1003.cafe.ingredients.Water(0);
        java.lang.String str24 = water23.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit25 = water23.getUnit();
        uk.ac.sheffield.com1003.cafe.Recipe recipe28 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order31 = new uk.ac.sheffield.com1003.cafe.Order(recipe28, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        boolean boolean32 = water23.equals((java.lang.Object) 1.0d);
        java.lang.String str33 = water23.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit34 = water23.getUnit();
        boolean boolean35 = recipe21.equals((java.lang.Object) water23);
        boolean boolean36 = recipe16.equals((java.lang.Object) recipe21);
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Water [unit=ML, amount=0]" + "'", str24, "Water [unit=ML, amount=0]");
        org.junit.Assert.assertTrue("'" + unit25 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit25.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Water [unit=ML, amount=0]" + "'", str33, "Water [unit=ML, amount=0]");
        org.junit.Assert.assertTrue("'" + unit34 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit34.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test4148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4148");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        double double7 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Coffee [unit=GR, amount=30, decaf=false]", (double) 'a');
        order10.serve();
        order10.printReceipt();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test4149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4149");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", 35.0d);
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]", (double) (short) 10, "Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=]]]");
        java.lang.String str7 = order6.toString();
        java.lang.String str8 = order6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]; Paid: 10.0" + "'", str7, "Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]; Paid: 10.0");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]; Paid: 10.0" + "'", str8, "Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]; Paid: 10.0");
    }

    @Test
    public void test4150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4150");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Syrup [unit=ML, amount=10, flavour=Plain]", (double) (byte) 10);
        double double13 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order17 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water [unit=ML, amount=32]", (double) '4', "Order: Water; For: Water; Paid: 1.0");
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) (-1.0f));
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test4151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4151");
        uk.ac.sheffield.com1003.cafe.Recipe recipe0 = null;
        uk.ac.sheffield.com1003.cafe.Order order4 = new uk.ac.sheffield.com1003.cafe.Order(recipe0, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; Paid: 100.0", (double) 35, "Welcome to Syrup");
        // The following exception was thrown during execution in test generation
        try {
            order4.printReceipt();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4152");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe0.getMenu();
        java.lang.String str4 = cafe0.getName();
        java.lang.String str5 = cafe0.getName();
        java.lang.String str6 = cafe0.greeting();
        cafe0.printMenu();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Cafe" + "'", str4, "Cafe");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cafe" + "'", str5, "Cafe");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Welcome to Cafe" + "'", str6, "Welcome to Cafe");
    }

    @Test
    public void test4153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4153");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: ; Paid: 10.0");
        java.lang.String str2 = syrup1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: ; Paid: 10.0]" + "'", str2, "Syrup [unit=ML, amount=10, flavour=Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: ; Paid: 10.0]");
    }

    @Test
    public void test4154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4154");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 100);
        boolean boolean3 = recipe2.isReady();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test4155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4155");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=]]; For: Order: Water [unit=ML, amount=30]; For: ; Paid: 30.0; Paid: 10.0", (int) (byte) 1, (int) (short) 10);
    }

    @Test
    public void test4156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4156");
        // The following exception was thrown during execution in test generation
        try {
            uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=0, type=SKIMMED]", (int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4157");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (byte) 1);
        java.lang.String str2 = coffee1.toString();
        java.lang.String str3 = coffee1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit4 = coffee1.getUnit();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=1, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=1, decaf=false]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=1, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=1, decaf=false]");
        org.junit.Assert.assertTrue("'" + unit4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
    }

    @Test
    public void test4158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4158");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Welcome to Cafe; Paid: 10.0", (double) (-1.0f));
    }

    @Test
    public void test4159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4159");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: hi!; Paid: 0.0");
        java.lang.String str2 = syrup1.toString();
        java.lang.String str3 = syrup1.toString();
        java.lang.String str4 = syrup1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: hi!; Paid: 0.0]" + "'", str2, "Syrup [unit=ML, amount=10, flavour=Order: ; For: hi!; Paid: 0.0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: hi!; Paid: 0.0]" + "'", str3, "Syrup [unit=ML, amount=10, flavour=Order: ; For: hi!; Paid: 0.0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: hi!; Paid: 0.0]" + "'", str4, "Syrup [unit=ML, amount=10, flavour=Order: ; For: hi!; Paid: 0.0]");
    }

    @Test
    public void test4160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4160");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("hi!");
        java.lang.String str2 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        boolean boolean9 = recipe7.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "hi!", (double) 0L);
        boolean boolean13 = cafe1.addRecipe(recipe7);
        java.lang.String str14 = cafe1.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe recipe17 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe17, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe17, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean25 = cafe1.addRecipe(recipe17);
        cafe1.printMenu();
        java.lang.String str27 = cafe1.greeting();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Welcome to hi!" + "'", str14, "Welcome to hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Welcome to hi!" + "'", str27, "Welcome to hi!");
    }

    @Test
    public void test4161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4161");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]");
        cafe1.printMenu();
        java.lang.String str3 = cafe1.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]" + "'", str3, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]");
    }

    @Test
    public void test4162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4162");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) 0.0f);
    }

    @Test
    public void test4163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4163");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (byte) 100);
        order9.printReceipt();
        order9.printReceipt();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test4164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4164");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (byte) 0);
    }

    @Test
    public void test4165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4165");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj2 = null;
        boolean boolean3 = milk1.equals(obj2);
        java.lang.String str4 = milk1.toString();
        java.lang.String str5 = milk1.getName();
        java.lang.String str6 = milk1.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe9 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=30, decaf=false]", (double) (short) 100);
        boolean boolean10 = milk1.equals((java.lang.Object) recipe9);
        java.lang.String str11 = milk1.toString();
        int int12 = milk1.getAmount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str4, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Milk" + "'", str5, "Milk");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str6, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str11, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test4166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4166");
        // The following exception was thrown during execution in test generation
        try {
            uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk", (int) 'a', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4167");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Welcome to Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException]");
    }

    @Test
    public void test4168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4168");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        double double5 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", (double) 10);
        boolean boolean9 = recipe4.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee12 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(100, true);
        int int13 = coffee12.getAmount();
        java.lang.String str14 = coffee12.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe17 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Water; Paid: 1.0", (double) (-1));
        uk.ac.sheffield.com1003.cafe.Order order21 = new uk.ac.sheffield.com1003.cafe.Order(recipe17, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0", 1.0d, "Coffee");
        boolean boolean22 = coffee12.equals((java.lang.Object) recipe17);
        double double23 = recipe17.getPrice();
        boolean boolean24 = recipe4.equals((java.lang.Object) double23);
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Coffee [unit=GR, amount=100, decaf=true]" + "'", str14, "Coffee [unit=GR, amount=100, decaf=true]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4169");
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException0 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException1 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray2 = recipeNotFoundException1.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = recipeNotFoundException3.getSuppressed();
        recipeNotFoundException1.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException7 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException7.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException9 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException10 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray11 = recipeNotFoundException10.getSuppressed();
        recipeNotFoundException9.addSuppressed((java.lang.Throwable) recipeNotFoundException10);
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException9);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException14 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray15 = cafeOutOfCapacityException14.getSuppressed();
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException14);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException17 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray18 = recipeNotFoundException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = recipeNotFoundException17.getSuppressed();
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        recipeNotFoundException1.addSuppressed((java.lang.Throwable) recipeNotFoundException7);
        cafeOutOfCapacityException0.addSuppressed((java.lang.Throwable) recipeNotFoundException1);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException23 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray24 = recipeNotFoundException23.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException25 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException26 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray27 = recipeNotFoundException26.getSuppressed();
        recipeNotFoundException25.addSuppressed((java.lang.Throwable) recipeNotFoundException26);
        recipeNotFoundException23.addSuppressed((java.lang.Throwable) recipeNotFoundException25);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException30 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray31 = cafeOutOfCapacityException30.getSuppressed();
        recipeNotFoundException23.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException30);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water33 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int34 = water33.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException35 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException36 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray37 = recipeNotFoundException36.getSuppressed();
        recipeNotFoundException35.addSuppressed((java.lang.Throwable) recipeNotFoundException36);
        java.lang.Throwable[] throwableArray39 = recipeNotFoundException36.getSuppressed();
        boolean boolean40 = water33.equals((java.lang.Object) recipeNotFoundException36);
        java.lang.Throwable[] throwableArray41 = recipeNotFoundException36.getSuppressed();
        java.lang.Throwable[] throwableArray42 = recipeNotFoundException36.getSuppressed();
        recipeNotFoundException23.addSuppressed((java.lang.Throwable) recipeNotFoundException36);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException44 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray45 = recipeNotFoundException44.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException46 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray47 = recipeNotFoundException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = recipeNotFoundException46.getSuppressed();
        recipeNotFoundException44.addSuppressed((java.lang.Throwable) recipeNotFoundException46);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException50 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException51 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray52 = recipeNotFoundException51.getSuppressed();
        recipeNotFoundException50.addSuppressed((java.lang.Throwable) recipeNotFoundException51);
        recipeNotFoundException46.addSuppressed((java.lang.Throwable) recipeNotFoundException51);
        java.lang.Throwable[] throwableArray55 = recipeNotFoundException46.getSuppressed();
        recipeNotFoundException23.addSuppressed((java.lang.Throwable) recipeNotFoundException46);
        recipeNotFoundException1.addSuppressed((java.lang.Throwable) recipeNotFoundException23);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 30 + "'", int34 == 30);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
    }

    @Test
    public void test4170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4170");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        java.lang.String str2 = milk1.getName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Milk" + "'", str2, "Milk");
    }

    @Test
    public void test4171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4171");
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException0 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray1 = recipeNotFoundException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) recipeNotFoundException2);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException7 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray8 = cafeOutOfCapacityException7.getSuppressed();
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException7);
        java.lang.Throwable[] throwableArray10 = cafeOutOfCapacityException7.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException11 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        cafeOutOfCapacityException7.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException11);
        java.lang.Class<?> wildcardClass13 = cafeOutOfCapacityException7.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test4172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4172");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee0 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str1 = coffee0.toString();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size4, (int) (short) 10);
        boolean boolean8 = recipe6.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "Coffee [unit=GR, amount=0, decaf=false]", 0.0d);
        java.lang.String str15 = recipe6.getName();
        boolean boolean16 = coffee0.equals((java.lang.Object) str15);
        java.lang.String str17 = coffee0.toString();
        java.lang.String str18 = coffee0.getName();
        int int19 = coffee0.getAmount();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee22 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 100, false);
        java.lang.String str23 = coffee22.toString();
        boolean boolean24 = coffee0.equals((java.lang.Object) str23);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size27 = null;
        uk.ac.sheffield.com1003.cafe.Recipe recipe29 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) (byte) -1, size27, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Ingredient ingredient30 = null;
        recipe29.addIngredient(ingredient30);
        boolean boolean32 = coffee0.equals((java.lang.Object) recipe29);
        double double33 = recipe29.getPrice();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str1, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str17, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Coffee" + "'", str18, "Coffee");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Coffee [unit=GR, amount=100, decaf=false]" + "'", str23, "Coffee [unit=GR, amount=100, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
    }

    @Test
    public void test4173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4173");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (short) -1);
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Coffee [unit=GR, amount=35, decaf=false]", (double) 30, "Welcome to Order: ; For: hi!; Paid: 0.0");
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: Coffee [unit=GR, amount=8, decaf=false]; For: Coffee [unit=GR, amount=32, decaf=false]; Paid: 52.0", (double) (byte) 10, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=0, decaf=false]]");
        double double11 = recipe2.getPrice();
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
    }

    @Test
    public void test4174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4174");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Milk [unit=ML, amount=1, type=WHOLE]; For: Coffee [unit=GR, amount=-1, decaf=true]; Paid: 0.0");
    }

    @Test
    public void test4175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4175");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe0.getMenu();
        java.lang.String str4 = cafe0.getName();
        java.lang.String str5 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size8, (int) (short) 10);
        boolean boolean12 = recipe10.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order18 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk20 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean21 = recipe10.equals((java.lang.Object) 10);
        boolean boolean22 = cafe0.addRecipe(recipe10);
        java.lang.String str23 = cafe0.greeting();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = cafe0.placeOrder("Syrup [unit=ML, amount=10, flavour=Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0]", "Syrup [unit=ML, amount=10, flavour=Welcome to Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException]", (double) 52);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Cafe" + "'", str4, "Cafe");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cafe" + "'", str5, "Cafe");
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Welcome to Cafe" + "'", str23, "Welcome to Cafe");
    }

    @Test
    public void test4176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4176");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(0, true);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        double double8 = recipe7.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Water", (double) 1L);
        java.lang.String str12 = recipe7.getName();
        double double13 = recipe7.getPrice();
        boolean boolean14 = coffee2.equals((java.lang.Object) double13);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup16 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0");
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order22 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double23 = recipe19.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee26 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '4', true);
        boolean boolean28 = coffee26.equals((java.lang.Object) 10L);
        boolean boolean30 = coffee26.equals((java.lang.Object) (-1.0f));
        recipe19.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee26);
        double double32 = recipe19.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order35 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "Welcome to ", (double) 30);
        boolean boolean36 = syrup16.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit37 = syrup16.getUnit();
        boolean boolean38 = coffee2.equals((java.lang.Object) unit37);
        java.lang.String str39 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water40 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str41 = water40.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk43 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean44 = water40.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit45 = water40.getUnit();
        int int46 = water40.getAmount();
        java.lang.String str47 = water40.getName();
        java.lang.String str48 = water40.toString();
        boolean boolean49 = coffee2.equals((java.lang.Object) water40);
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + unit37 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit37.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Coffee [unit=GR, amount=0, decaf=true]" + "'", str39, "Coffee [unit=GR, amount=0, decaf=true]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Water" + "'", str41, "Water");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + unit45 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit45.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 30 + "'", int46 == 30);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Water" + "'", str47, "Water");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Water [unit=ML, amount=30]" + "'", str48, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test4177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4177");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Water [unit=ML, amount=30]; For: Welcome to Cafe; Paid: 0.0", (int) (short) 10, 100);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray4 = cafe3.getMenu();
        cafe3.printMenu();
        uk.ac.sheffield.com1003.cafe.Order order6 = cafe3.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order7 = cafe3.serveOrder();
        org.junit.Assert.assertNotNull(recipeArray4);
        org.junit.Assert.assertNull(order6);
        org.junit.Assert.assertNull(order7);
    }

    @Test
    public void test4178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4178");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order1 = cafe0.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order2 = cafe0.serveOrder();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean7 = recipe6.isReady();
        java.lang.String str8 = recipe6.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee9 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe6.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee9);
        java.lang.String str11 = recipe6.getName();
        double double12 = recipe6.getPrice();
        boolean boolean13 = recipe6.isReady();
        java.lang.String str14 = recipe6.getName();
        boolean boolean15 = cafe0.addRecipe(recipe6);
        java.lang.String str16 = cafe0.greeting();
        java.lang.String str17 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size20 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size20, (int) '4');
        boolean boolean24 = recipe22.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order27 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Welcome to Cafe", 0.0d);
        boolean boolean29 = recipe22.equals((java.lang.Object) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Order order32 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0", 0.0d);
        boolean boolean33 = cafe0.addRecipe(recipe22);
        boolean boolean34 = recipe22.isReady();
        org.junit.Assert.assertNull(order1);
        org.junit.Assert.assertNull(order2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Water [unit=ML, amount=30]" + "'", str11, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Welcome to Cafe" + "'", str16, "Welcome to Cafe");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Cafe" + "'", str17, "Cafe");
        org.junit.Assert.assertTrue("'" + size20 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size20.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test4179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4179");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (int) ' ', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size6, (int) '4');
        boolean boolean10 = recipe8.equals((java.lang.Object) 10.0d);
        double double11 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean16 = cafe3.addRecipe(recipe8);
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk", (double) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (short) -1, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee26 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 0, false);
        recipe19.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee26);
        boolean boolean28 = recipe8.equals((java.lang.Object) coffee26);
        uk.ac.sheffield.com1003.cafe.Order order31 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Milk [unit=ML, amount=1, type=WHOLE]", (double) 35);
        uk.ac.sheffield.com1003.cafe.Order order35 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Milk [unit=ML, amount=52, type=SEMI]", 100.0d, "Syrup [unit=ML, amount=10, flavour=Milk]");
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4180");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: -1.0]; Paid: 10.0");
    }

    @Test
    public void test4181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4181");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Milk [unit=ML, amount=0, type=SKIMMED]; Paid: 100.0");
    }

    @Test
    public void test4182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4182");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order1 = cafe0.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order2 = cafe0.serveOrder();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = null;
        boolean boolean5 = cafe0.addRecipe(recipe4);
        java.lang.String str6 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Order order7 = cafe0.serveOrder();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water9 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str10 = water9.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type15 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean16 = milk14.equals((java.lang.Object) type15);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk17 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) -1, type15);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk18 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 0, type15);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size21 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe23 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size21, (int) '4');
        boolean boolean25 = recipe23.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order28 = new uk.ac.sheffield.com1003.cafe.Order(recipe23, "Welcome to Cafe", 0.0d);
        order28.printReceipt();
        boolean boolean30 = milk18.equals((java.lang.Object) order28);
        boolean boolean31 = water9.equals((java.lang.Object) boolean30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit32 = water9.getUnit();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size37 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe39 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size37, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe41 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Welcome to ]", (double) (byte) -1, size37, (int) (byte) 1);
        java.lang.String str42 = recipe41.getName();
        boolean boolean43 = water9.equals((java.lang.Object) recipe41);
        boolean boolean44 = cafe0.addRecipe(recipe41);
        org.junit.Assert.assertNull(order1);
        org.junit.Assert.assertNull(order2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Welcome to Cafe" + "'", str6, "Welcome to Cafe");
        org.junit.Assert.assertNull(order7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water" + "'", str10, "Water");
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type15.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + size21 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size21.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + unit32 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit32.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + size37 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size37.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Welcome to ]" + "'", str42, "Syrup [unit=ML, amount=10, flavour=Welcome to ]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test4183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4183");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water2 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 0);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee6 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str7 = coffee6.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type8 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean9 = coffee6.equals((java.lang.Object) type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk11 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '4', type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk12 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type8);
        boolean boolean13 = water2.equals((java.lang.Object) type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 0, type8);
        java.lang.String str15 = milk14.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water16 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str17 = water16.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee19 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((-1));
        boolean boolean20 = water16.equals((java.lang.Object) (-1));
        java.lang.String str21 = water16.toString();
        java.lang.String str22 = water16.toString();
        java.lang.Object obj23 = null;
        boolean boolean24 = water16.equals(obj23);
        java.lang.String str25 = water16.toString();
        boolean boolean26 = milk14.equals((java.lang.Object) str25);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size39 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe41 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size39, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe43 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) ' ', size39, 30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe45 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=30, decaf=false]", (double) 1.0f, size39, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe47 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) 100L, size39, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe49 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to ", (double) 1L, size39, 35);
        uk.ac.sheffield.com1003.cafe.Recipe recipe51 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=10, type=SKIMMED]", (double) (short) 10, size39, (int) (short) 100);
        boolean boolean52 = recipe51.isReady();
        boolean boolean53 = milk14.equals((java.lang.Object) boolean52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str7, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type8.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Milk [unit=ML, amount=0, type=SKIMMED]" + "'", str15, "Milk [unit=ML, amount=0, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Water [unit=ML, amount=30]" + "'", str17, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Water [unit=ML, amount=30]" + "'", str21, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Water [unit=ML, amount=30]" + "'", str22, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Water [unit=ML, amount=30]" + "'", str25, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + size39 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size39.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test4184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4184");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order5 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Coffee [unit=GR, amount=8, decaf=false]", (double) (-1.0f));
        boolean boolean6 = recipe2.isReady();
        boolean boolean7 = recipe2.isReady();
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Welcome to Welcome to ", (double) 100.0f, "Welcome to Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup13 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Water");
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup13);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test4185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4185");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size12, (int) '4');
        boolean boolean15 = cafe0.addRecipe(recipe14);
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size19 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size19, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe21, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee25 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str26 = coffee25.toString();
        boolean boolean27 = recipe21.equals((java.lang.Object) str26);
        java.lang.String str28 = recipe21.getName();
        boolean boolean29 = cafe0.addRecipe(recipe21);
        uk.ac.sheffield.com1003.cafe.Order order30 = cafe0.serveOrder();
        cafe0.printMenu();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray33 = cafe0.getMenu();
        cafe0.printPendingOrders();
        cafe0.printMenu();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + size19 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size19.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str26, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(order30);
        org.junit.Assert.assertNotNull(recipeArray33);
    }

    @Test
    public void test4186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4186");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        java.lang.String str10 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=100]", (double) 1);
        boolean boolean14 = cafe0.addRecipe(recipe13);
        cafe0.printMenu();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Cafe" + "'", str10, "Cafe");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test4187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4187");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        double double5 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "", (double) (short) 10, "Water [unit=ML, amount=30]");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water13 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str14 = water13.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water13);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee16 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str17 = coffee16.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type18 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean19 = coffee16.equals((java.lang.Object) type18);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee16);
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=32, type=ALMOND]; Paid: 1.0]", (double) 52);
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str17, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type18.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4188");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Syrup [unit=ML, amount=10, flavour=Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0]");
    }

    @Test
    public void test4189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4189");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk0 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk();
        java.lang.String str1 = milk0.toString();
        java.lang.String str2 = milk0.getName();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Milk [unit=ML, amount=100, type=WHOLE]" + "'", str1, "Milk [unit=ML, amount=100, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Milk" + "'", str2, "Milk");
    }

    @Test
    public void test4190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4190");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: 1.0");
        uk.ac.sheffield.com1003.cafe.Order order2 = cafe1.serveOrder();
        org.junit.Assert.assertNull(order2);
    }

    @Test
    public void test4191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4191");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=-1, type=SKIMMED]", (int) '4', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray4 = cafe3.getMenu();
        java.lang.String str5 = cafe3.getName();
        org.junit.Assert.assertNotNull(recipeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Milk [unit=ML, amount=-1, type=SKIMMED]" + "'", str5, "Milk [unit=ML, amount=-1, type=SKIMMED]");
    }

    @Test
    public void test4192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4192");
        uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException tooManyIngredientsException0 = new uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException();
        java.lang.Throwable[] throwableArray1 = tooManyIngredientsException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water2 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int3 = water2.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException4 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException5.getSuppressed();
        recipeNotFoundException4.addSuppressed((java.lang.Throwable) recipeNotFoundException5);
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException5.getSuppressed();
        boolean boolean9 = water2.equals((java.lang.Object) recipeNotFoundException5);
        java.lang.Throwable[] throwableArray10 = recipeNotFoundException5.getSuppressed();
        tooManyIngredientsException0.addSuppressed((java.lang.Throwable) recipeNotFoundException5);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException14 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException15 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray16 = recipeNotFoundException15.getSuppressed();
        recipeNotFoundException14.addSuppressed((java.lang.Throwable) recipeNotFoundException15);
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException14);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException19 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray20 = cafeOutOfCapacityException19.getSuppressed();
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException19);
        tooManyIngredientsException0.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        java.lang.Throwable[] throwableArray23 = tooManyIngredientsException0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30 + "'", int3 == 30);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test4193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4193");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order1 = cafe0.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order2 = cafe0.serveOrder();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean7 = recipe6.isReady();
        java.lang.String str8 = recipe6.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee9 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe6.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee9);
        java.lang.String str11 = recipe6.getName();
        double double12 = recipe6.getPrice();
        boolean boolean13 = recipe6.isReady();
        java.lang.String str14 = recipe6.getName();
        boolean boolean15 = cafe0.addRecipe(recipe6);
        java.lang.String str16 = cafe0.greeting();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = cafe0.placeOrder("Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=]]", "", (double) (-1));
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(order1);
        org.junit.Assert.assertNull(order2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Water [unit=ML, amount=30]" + "'", str11, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Welcome to Cafe" + "'", str16, "Welcome to Cafe");
    }

    @Test
    public void test4194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4194");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee3 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str4 = coffee3.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type5 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean6 = coffee3.equals((java.lang.Object) type5);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk7 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type5);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk8 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '4', type5);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type5);
        int int10 = milk9.getAmount();
        uk.ac.sheffield.com1003.cafe.Cafe cafe14 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (int) ' ', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size17 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size17, (int) '4');
        boolean boolean21 = recipe19.equals((java.lang.Object) 10.0d);
        double double22 = recipe19.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order26 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean27 = cafe14.addRecipe(recipe19);
        uk.ac.sheffield.com1003.cafe.Recipe recipe30 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk", (double) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order34 = new uk.ac.sheffield.com1003.cafe.Order(recipe30, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (short) -1, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee37 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 0, false);
        recipe30.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee37);
        boolean boolean39 = recipe19.equals((java.lang.Object) coffee37);
        double double40 = recipe19.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order43 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Order: ; For: Welcome to Cafe; Paid: 10.0; Paid: 1.0", (double) 100.0f);
        boolean boolean44 = recipe19.isReady();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size51 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe53 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size51, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe55 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Plain]", (double) '#', size51, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe57 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", 10.0d, size51, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee60 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '#', true);
        recipe57.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee60);
        boolean boolean62 = recipe19.equals((java.lang.Object) coffee60);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit63 = coffee60.getUnit();
        boolean boolean64 = milk9.equals((java.lang.Object) unit63);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str4, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type5.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + size17 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size17.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + size51 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size51.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + unit63 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit63.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test4195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4195");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Coffee [unit=GR, amount=0, decaf=false]", 0.0d);
        java.lang.String str13 = recipe4.getName();
        java.lang.String str14 = recipe4.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee15 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str16 = coffee15.toString();
        java.lang.String str17 = coffee15.toString();
        java.lang.String str18 = coffee15.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit19 = coffee15.getUnit();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee15);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=10]]", (double) 100L, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str16, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str17, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str18, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + unit19 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit19.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
    }

    @Test
    public void test4196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4196");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: hi!; Paid: 0.0", 30.0d);
    }

    @Test
    public void test4197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4197");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size18 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size18, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) ' ', size18, 30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe24 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=30, decaf=false]", (double) 1.0f, size18, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (double) 10, size18, (int) '#');
        uk.ac.sheffield.com1003.cafe.Recipe recipe28 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 0L, size18, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe30 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) '4', size18, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe32 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) '4', size18, (int) '4');
        uk.ac.sheffield.com1003.cafe.Recipe recipe34 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: 1.0]", (double) 0.0f, size18, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe36 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]", 0.0d, size18, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup38 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("");
        java.lang.String str39 = syrup38.toString();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException40 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray41 = recipeNotFoundException40.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException42 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray43 = recipeNotFoundException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = recipeNotFoundException42.getSuppressed();
        recipeNotFoundException40.addSuppressed((java.lang.Throwable) recipeNotFoundException42);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException46 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException47 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray48 = recipeNotFoundException47.getSuppressed();
        recipeNotFoundException46.addSuppressed((java.lang.Throwable) recipeNotFoundException47);
        recipeNotFoundException42.addSuppressed((java.lang.Throwable) recipeNotFoundException47);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException51 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray52 = recipeNotFoundException51.getSuppressed();
        recipeNotFoundException47.addSuppressed((java.lang.Throwable) recipeNotFoundException51);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException54 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray55 = recipeNotFoundException54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = recipeNotFoundException54.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException57 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray58 = recipeNotFoundException57.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException59 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException60 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray61 = recipeNotFoundException60.getSuppressed();
        recipeNotFoundException59.addSuppressed((java.lang.Throwable) recipeNotFoundException60);
        recipeNotFoundException57.addSuppressed((java.lang.Throwable) recipeNotFoundException59);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException64 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray65 = cafeOutOfCapacityException64.getSuppressed();
        recipeNotFoundException57.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException64);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException67 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray68 = recipeNotFoundException67.getSuppressed();
        java.lang.Throwable[] throwableArray69 = recipeNotFoundException67.getSuppressed();
        recipeNotFoundException57.addSuppressed((java.lang.Throwable) recipeNotFoundException67);
        recipeNotFoundException54.addSuppressed((java.lang.Throwable) recipeNotFoundException67);
        recipeNotFoundException51.addSuppressed((java.lang.Throwable) recipeNotFoundException54);
        boolean boolean73 = syrup38.equals((java.lang.Object) recipeNotFoundException51);
        boolean boolean74 = recipe36.equals((java.lang.Object) recipeNotFoundException51);
        org.junit.Assert.assertTrue("'" + size18 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size18.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Syrup [unit=ML, amount=10, flavour=]" + "'", str39, "Syrup [unit=ML, amount=10, flavour=]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test4198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4198");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=1, decaf=true]]", (double) (-1.0f));
        double double3 = recipe2.getPrice();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test4199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4199");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((-1));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100, type3);
        uk.ac.sheffield.com1003.cafe.Recipe recipe5 = null;
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe5, "Coffee [unit=GR, amount=1, decaf=false]", (double) 0.0f);
        boolean boolean9 = milk4.equals((java.lang.Object) "Coffee [unit=GR, amount=1, decaf=false]");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee10 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str11 = coffee10.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type12 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean13 = coffee10.equals((java.lang.Object) type12);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException14 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException15 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray16 = recipeNotFoundException15.getSuppressed();
        recipeNotFoundException14.addSuppressed((java.lang.Throwable) recipeNotFoundException15);
        java.lang.Throwable[] throwableArray18 = recipeNotFoundException15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = recipeNotFoundException15.getSuppressed();
        boolean boolean20 = coffee10.equals((java.lang.Object) throwableArray19);
        uk.ac.sheffield.com1003.cafe.Recipe recipe23 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (short) -1);
        boolean boolean24 = coffee10.equals((java.lang.Object) recipe23);
        boolean boolean25 = milk4.equals((java.lang.Object) coffee10);
        boolean boolean26 = water1.equals((java.lang.Object) coffee10);
        java.lang.String str27 = water1.toString();
        int int28 = water1.getAmount();
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str11, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type12.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Water [unit=ML, amount=-1]" + "'", str27, "Water [unit=ML, amount=-1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test4200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4200");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean7 = cafe3.addRecipe(recipe6);
        boolean boolean8 = cafe1.addRecipe(recipe6);
        uk.ac.sheffield.com1003.cafe.Recipe recipe11 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 10L);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk13 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        recipe11.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk13);
        java.lang.String str15 = recipe11.getName();
        boolean boolean16 = cafe1.addRecipe(recipe11);
        java.lang.Class<?> wildcardClass17 = recipe11.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Cafe" + "'", str15, "Cafe");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test4201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4201");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee0 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str1 = coffee0.toString();
        java.lang.String str2 = coffee0.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe6 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]", (int) ' ', (int) (byte) 1);
        cafe6.printMenu();
        boolean boolean8 = coffee0.equals((java.lang.Object) cafe6);
        java.lang.String str9 = coffee0.toString();
        java.lang.Class<?> wildcardClass10 = coffee0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str1, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str9, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test4202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4202");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Syrup [unit=ML, amount=10, flavour=uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException]");
    }

    @Test
    public void test4203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4203");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Water [unit=ML, amount=0]; Paid: 100.0; Paid: 0.0", (double) 0);
    }

    @Test
    public void test4204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4204");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water(0);
        java.lang.String str2 = water1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit3 = water1.getUnit();
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        boolean boolean10 = water1.equals((java.lang.Object) 1.0d);
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0", (double) (short) -1);
        boolean boolean14 = recipe13.isReady();
        uk.ac.sheffield.com1003.cafe.Order order17 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Order: ; For: Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0; Paid: -1.0", (double) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Order order21 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=-1, type=WHOLE]]", (double) 0L, "Milk [unit=ML, amount=-1, type=SKIMMED]");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup23 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Welcome to Cafe");
        recipe13.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup23);
        boolean boolean25 = water1.equals((java.lang.Object) recipe13);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water [unit=ML, amount=0]" + "'", str2, "Water [unit=ML, amount=0]");
        org.junit.Assert.assertTrue("'" + unit3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test4205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4205");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee4 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str5 = coffee4.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type6 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean7 = coffee4.equals((java.lang.Object) type6);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk8 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type6);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1), type6);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type6);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk11 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 0, type6);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str5, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type6.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test4206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4206");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        java.lang.String str10 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray11 = cafe0.getMenu();
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order13 = cafe0.serveOrder();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray14 = cafe0.getMenu();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Welcome to Cafe" + "'", str10, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray11);
        org.junit.Assert.assertNull(order13);
        org.junit.Assert.assertNotNull(recipeArray14);
    }

    @Test
    public void test4207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4207");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray2 = cafe1.getMenu();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk12 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '#');
        recipe7.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk12);
        boolean boolean14 = cafe1.addRecipe(recipe7);
        java.lang.String str15 = cafe1.greeting();
        cafe1.printPendingOrders();
        cafe1.printMenu();
        org.junit.Assert.assertNotNull(recipeArray2);
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Welcome to Welcome to Cafe" + "'", str15, "Welcome to Welcome to Cafe");
    }

    @Test
    public void test4208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4208");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size4, (int) (short) 10);
        double double7 = recipe6.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size13 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe15 = new uk.ac.sheffield.com1003.cafe.Recipe("Water", (double) 100.0f, size13, 0);
        boolean boolean16 = recipe6.equals((java.lang.Object) size13);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: -1.0", 1.0d, size13, 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk20 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1));
        java.lang.String str21 = milk20.toString();
        java.lang.String str22 = milk20.toString();
        recipe18.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk20);
        uk.ac.sheffield.com1003.cafe.Cafe cafe27 = new uk.ac.sheffield.com1003.cafe.Cafe("", (int) (short) 1, (int) (byte) 1);
        cafe27.printMenu();
        boolean boolean29 = milk20.equals((java.lang.Object) cafe27);
        java.lang.String str30 = cafe27.greeting();
        cafe27.printPendingOrders();
        java.lang.String str32 = cafe27.getName();
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + size13 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size13.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str21, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str22, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Welcome to " + "'", str30, "Welcome to ");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test4209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4209");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj2 = null;
        boolean boolean3 = milk1.equals(obj2);
        java.lang.String str4 = milk1.toString();
        java.lang.String str5 = milk1.getName();
        java.lang.String str6 = milk1.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe10 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (int) (short) 100, (int) '#');
        cafe10.printPendingOrders();
        cafe10.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order13 = cafe10.serveOrder();
        boolean boolean14 = milk1.equals((java.lang.Object) order13);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size17 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size17, (int) (short) 10);
        double double20 = recipe19.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "Welcome to Cafe", (double) 10);
        boolean boolean24 = milk1.equals((java.lang.Object) recipe19);
        uk.ac.sheffield.com1003.cafe.Cafe cafe25 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe25.printPendingOrders();
        java.lang.String str27 = cafe25.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size30 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe32 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size30, (int) (short) 10);
        java.lang.String str33 = recipe32.getName();
        boolean boolean34 = cafe25.addRecipe(recipe32);
        cafe25.printMenu();
        cafe25.printPendingOrders();
        boolean boolean37 = milk1.equals((java.lang.Object) cafe25);
        java.lang.String str38 = milk1.toString();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size43 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe45 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size43, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe47 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=-1, type=WHOLE]", (double) 100L, size43, 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup49 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: ; Paid: 10.0");
        int int50 = syrup49.getAmount();
        java.lang.String str51 = syrup49.toString();
        recipe47.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup49);
        java.lang.String str53 = syrup49.toString();
        boolean boolean54 = milk1.equals((java.lang.Object) syrup49);
        java.lang.String str55 = milk1.getName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str4, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Milk" + "'", str5, "Milk");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str6, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertNull(order13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + size17 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size17.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Welcome to Cafe" + "'", str27, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size30 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size30.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str38, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + size43 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size43.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]" + "'", str51, "Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]" + "'", str53, "Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Milk" + "'", str55, "Milk");
    }

    @Test
    public void test4210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4210");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 97.0", (double) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup4 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Welcome to Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]");
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup4);
    }

    @Test
    public void test4211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4211");
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException0 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray1 = cafeOutOfCapacityException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray3 = recipeNotFoundException2.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException4 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray5 = recipeNotFoundException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException4.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException4);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException8 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException9 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray10 = recipeNotFoundException9.getSuppressed();
        recipeNotFoundException8.addSuppressed((java.lang.Throwable) recipeNotFoundException9);
        recipeNotFoundException4.addSuppressed((java.lang.Throwable) recipeNotFoundException9);
        cafeOutOfCapacityException0.addSuppressed((java.lang.Throwable) recipeNotFoundException4);
        java.lang.Throwable[] throwableArray14 = cafeOutOfCapacityException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException tooManyIngredientsException15 = new uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException();
        java.lang.Throwable[] throwableArray16 = tooManyIngredientsException15.getSuppressed();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water17 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int18 = water17.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException19 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException20 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray21 = recipeNotFoundException20.getSuppressed();
        recipeNotFoundException19.addSuppressed((java.lang.Throwable) recipeNotFoundException20);
        java.lang.Throwable[] throwableArray23 = recipeNotFoundException20.getSuppressed();
        boolean boolean24 = water17.equals((java.lang.Object) recipeNotFoundException20);
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException20.getSuppressed();
        tooManyIngredientsException15.addSuppressed((java.lang.Throwable) recipeNotFoundException20);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException27 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray28 = recipeNotFoundException27.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException29 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException30 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray31 = recipeNotFoundException30.getSuppressed();
        recipeNotFoundException29.addSuppressed((java.lang.Throwable) recipeNotFoundException30);
        recipeNotFoundException27.addSuppressed((java.lang.Throwable) recipeNotFoundException29);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException34 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray35 = cafeOutOfCapacityException34.getSuppressed();
        recipeNotFoundException27.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException34);
        tooManyIngredientsException15.addSuppressed((java.lang.Throwable) recipeNotFoundException27);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException38 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray39 = recipeNotFoundException38.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException40 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray41 = recipeNotFoundException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = recipeNotFoundException40.getSuppressed();
        recipeNotFoundException38.addSuppressed((java.lang.Throwable) recipeNotFoundException40);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException44 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException45 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray46 = recipeNotFoundException45.getSuppressed();
        recipeNotFoundException44.addSuppressed((java.lang.Throwable) recipeNotFoundException45);
        recipeNotFoundException40.addSuppressed((java.lang.Throwable) recipeNotFoundException45);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException49 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray50 = recipeNotFoundException49.getSuppressed();
        recipeNotFoundException45.addSuppressed((java.lang.Throwable) recipeNotFoundException49);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException52 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray53 = recipeNotFoundException52.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException54 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray55 = recipeNotFoundException54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = recipeNotFoundException54.getSuppressed();
        recipeNotFoundException52.addSuppressed((java.lang.Throwable) recipeNotFoundException54);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException58 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException59 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray60 = recipeNotFoundException59.getSuppressed();
        recipeNotFoundException58.addSuppressed((java.lang.Throwable) recipeNotFoundException59);
        recipeNotFoundException54.addSuppressed((java.lang.Throwable) recipeNotFoundException59);
        java.lang.Throwable[] throwableArray63 = recipeNotFoundException54.getSuppressed();
        recipeNotFoundException49.addSuppressed((java.lang.Throwable) recipeNotFoundException54);
        tooManyIngredientsException15.addSuppressed((java.lang.Throwable) recipeNotFoundException54);
        cafeOutOfCapacityException0.addSuppressed((java.lang.Throwable) tooManyIngredientsException15);
        java.lang.Throwable[] throwableArray67 = cafeOutOfCapacityException0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 30 + "'", int18 == 30);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
    }

    @Test
    public void test4212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4212");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe1.printMenu();
        java.lang.String str3 = cafe1.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size10 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size10, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size10, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: -1.0", 1.0d, size10, 30);
        boolean boolean17 = cafe1.addRecipe(recipe16);
        cafe1.printMenu();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Welcome to " + "'", str3, "Welcome to ");
        org.junit.Assert.assertTrue("'" + size10 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size10.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test4213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4213");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee8 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str9 = coffee8.toString();
        boolean boolean10 = recipe4.equals((java.lang.Object) str9);
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Syrup", (double) '#', "uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException");
        java.lang.String str15 = order14.toString();
        order14.serve();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str9, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Order: ; For: Syrup; Paid: 35.0" + "'", str15, "Order: ; For: Syrup; Paid: 35.0");
    }

    @Test
    public void test4214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4214");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size6, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) ' ', size6, 30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=30, decaf=false]", (double) 1.0f, size6, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee13 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str14 = coffee13.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type15 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean16 = coffee13.equals((java.lang.Object) type15);
        java.lang.String str17 = coffee13.toString();
        java.lang.String str18 = coffee13.toString();
        recipe12.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee13);
        java.lang.String str20 = coffee13.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk22 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1);
        java.lang.String str23 = milk22.toString();
        java.lang.String str24 = milk22.toString();
        boolean boolean25 = coffee13.equals((java.lang.Object) milk22);
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str14, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type15.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str17, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str18, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str20, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str23, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str24, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test4215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4215");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: Water [unit=ML, amount=30]; For: Order: ; For: Water; Paid: 1.0; Paid: 1.0");
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit2 = syrup1.getUnit();
        int int3 = syrup1.getAmount();
        org.junit.Assert.assertTrue("'" + unit2 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit2.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test4216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4216");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Welcome to Coffee [unit=GR, amount=0, decaf=false]", (int) (short) 100, (int) (short) 1);
        cafe3.printPendingOrders();
    }

    @Test
    public void test4217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4217");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("", (int) '4', (int) (short) 10);
    }

    @Test
    public void test4218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4218");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Water");
        java.lang.String str2 = syrup1.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe4 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean8 = cafe4.addRecipe(recipe7);
        boolean boolean9 = syrup1.equals((java.lang.Object) recipe7);
        uk.ac.sheffield.com1003.cafe.Cafe cafe13 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]", 30, (int) (byte) 100);
        boolean boolean14 = recipe7.equals((java.lang.Object) cafe13);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size17 = uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL;
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup", (double) 10L, size17, (int) (byte) 100);
        boolean boolean20 = cafe13.addRecipe(recipe19);
        double double21 = recipe19.getPrice();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Syrup" + "'", str2, "Syrup");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + size17 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL + "'", size17.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test4219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4219");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0", (double) 1);
        java.lang.String str3 = recipe2.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        boolean boolean10 = recipe8.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk18 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean19 = recipe8.equals((java.lang.Object) 10);
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]", (double) (byte) 10, "Coffee [unit=GR, amount=0, decaf=false]");
        boolean boolean24 = recipe2.equals((java.lang.Object) (byte) 10);
        uk.ac.sheffield.com1003.cafe.Order order27 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Milk [unit=ML, amount=35, type=SEMI]", (-1.0d));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0" + "'", str3, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4220");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) ' ');
    }

    @Test
    public void test4221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4221");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", 1.0d, "Water [unit=ML, amount=30]");
        java.lang.String str14 = recipe4.getName();
        double double15 = recipe4.getPrice();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test4222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4222");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; Paid: 1.0");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Water", (double) 1, size6, (int) ' ');
        double double11 = recipe10.getPrice();
        java.lang.String str12 = recipe10.getName();
        double double13 = recipe10.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water15 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 0);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee19 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str20 = coffee19.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type21 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean22 = coffee19.equals((java.lang.Object) type21);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk23 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type21);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk24 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '4', type21);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk25 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type21);
        boolean boolean26 = water15.equals((java.lang.Object) type21);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk28 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1));
        java.lang.String str29 = milk28.toString();
        java.lang.String str30 = milk28.getName();
        boolean boolean31 = water15.equals((java.lang.Object) milk28);
        boolean boolean32 = recipe10.equals((java.lang.Object) milk28);
        boolean boolean33 = cafe1.addRecipe(recipe10);
        double double34 = recipe10.getPrice();
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Water" + "'", str12, "Water");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str20, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type21.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str29, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Milk" + "'", str30, "Milk");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
    }

    @Test
    public void test4223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4223");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]");
        cafe1.printPendingOrders();
        java.lang.String str3 = cafe1.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray4 = cafe1.getMenu();
        java.lang.String str5 = cafe1.greeting();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Welcome to Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]" + "'", str3, "Welcome to Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]");
        org.junit.Assert.assertNotNull(recipeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Welcome to Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]" + "'", str5, "Welcome to Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]");
    }

    @Test
    public void test4224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4224");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: ; Paid: 10.0");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = null;
        boolean boolean3 = cafe1.addRecipe(recipe2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test4225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4225");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        double double5 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", (double) 1L);
        boolean boolean10 = recipe4.equals((java.lang.Object) "Milk");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size13 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe15 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size13, (int) (short) 10);
        double double16 = recipe15.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe15, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe15, "", (double) (short) 10, "Water [unit=ML, amount=30]");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water24 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str25 = water24.toString();
        recipe15.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water24);
        uk.ac.sheffield.com1003.cafe.Cafe cafe27 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe27.printPendingOrders();
        java.lang.String str29 = cafe27.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray30 = cafe27.getMenu();
        cafe27.printMenu();
        boolean boolean32 = water24.equals((java.lang.Object) cafe27);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee33 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str34 = coffee33.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type35 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean36 = coffee33.equals((java.lang.Object) type35);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup38 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException");
        java.lang.String str39 = syrup38.toString();
        boolean boolean40 = coffee33.equals((java.lang.Object) syrup38);
        boolean boolean41 = water24.equals((java.lang.Object) syrup38);
        java.lang.String str42 = syrup38.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup38);
        java.lang.String str44 = syrup38.getName();
        int int45 = syrup38.getAmount();
        java.lang.String str46 = syrup38.getName();
        java.lang.String str47 = syrup38.toString();
        int int48 = syrup38.getAmount();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + size13 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size13.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Water [unit=ML, amount=30]" + "'", str25, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Welcome to Cafe" + "'", str29, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str34, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type35.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Syrup [unit=ML, amount=10, flavour=uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException]" + "'", str39, "Syrup [unit=ML, amount=10, flavour=uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Syrup [unit=ML, amount=10, flavour=uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException]" + "'", str42, "Syrup [unit=ML, amount=10, flavour=uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Syrup" + "'", str44, "Syrup");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Syrup" + "'", str46, "Syrup");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Syrup [unit=ML, amount=10, flavour=uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException]" + "'", str47, "Syrup [unit=ML, amount=10, flavour=uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
    }

    @Test
    public void test4226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4226");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean7 = cafe3.addRecipe(recipe6);
        boolean boolean8 = cafe1.addRecipe(recipe6);
        cafe1.removeRecipe("Milk [unit=ML, amount=100, type=WHOLE]");
        cafe1.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water13 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee15 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean19 = recipe18.isReady();
        java.lang.String str20 = recipe18.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee21 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe18.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee21);
        boolean boolean23 = coffee15.equals((java.lang.Object) recipe18);
        boolean boolean24 = water13.equals((java.lang.Object) recipe18);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit25 = water13.getUnit();
        uk.ac.sheffield.com1003.cafe.Cafe cafe26 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe26.printPendingOrders();
        boolean boolean28 = water13.equals((java.lang.Object) cafe26);
        java.lang.String str29 = water13.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe33 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Order: ; For: ; Paid: 10.0", 0, 100);
        uk.ac.sheffield.com1003.cafe.Cafe cafe37 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]", 30, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe40 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean41 = cafe37.addRecipe(recipe40);
        uk.ac.sheffield.com1003.cafe.Order order44 = new uk.ac.sheffield.com1003.cafe.Order(recipe40, "Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", (double) (short) 100);
        uk.ac.sheffield.com1003.cafe.Order order48 = new uk.ac.sheffield.com1003.cafe.Order(recipe40, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Coffee [unit=GR, amount=8, decaf=false]; Paid: 0.0", (double) 30, "Welcome to Welcome to Cafe");
        boolean boolean49 = cafe33.addRecipe(recipe40);
        java.lang.String str50 = cafe33.getName();
        boolean boolean51 = water13.equals((java.lang.Object) str50);
        uk.ac.sheffield.com1003.cafe.Cafe cafe53 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe56 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean57 = cafe53.addRecipe(recipe56);
        uk.ac.sheffield.com1003.cafe.Order order61 = new uk.ac.sheffield.com1003.cafe.Order(recipe56, "Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: ; Paid: 10.0", 100.0d, "Welcome to hi!");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk64 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type65 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean66 = milk64.equals((java.lang.Object) type65);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk67 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) -1, type65);
        int int68 = milk67.getAmount();
        recipe56.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk67);
        boolean boolean70 = water13.equals((java.lang.Object) recipe56);
        boolean boolean71 = cafe1.addRecipe(recipe56);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Water [unit=ML, amount=30]" + "'", str20, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + unit25 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit25.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Water [unit=ML, amount=100]" + "'", str29, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Welcome to Order: ; For: ; Paid: 10.0" + "'", str50, "Welcome to Order: ; For: ; Paid: 10.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + type65 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type65.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test4227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4227");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean3 = recipe2.isReady();
        java.lang.String str4 = recipe2.getName();
        java.lang.String str5 = recipe2.getName();
        java.lang.String str6 = recipe2.getName();
        boolean boolean7 = recipe2.isReady();
        java.lang.String str8 = recipe2.getName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water [unit=ML, amount=30]" + "'", str4, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Water [unit=ML, amount=30]" + "'", str5, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Water [unit=ML, amount=30]" + "'", str6, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4228");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=]]", 0, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = cafe3.placeOrder("Order: hi!; For: Coffee [unit=GR, amount=97, decaf=false]; Paid: -1.0", "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=32, decaf=false]]", (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4229");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0");
        java.lang.String str2 = cafe1.greeting();
        uk.ac.sheffield.com1003.cafe.Order order3 = cafe1.serveOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = order3.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0" + "'", str2, "Welcome to Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0");
        org.junit.Assert.assertNull(order3);
    }

    @Test
    public void test4230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4230");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size12, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size12, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: -1.0", 1.0d, size12, 30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=0]", (double) '#', size12, (int) (short) 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Coffee [unit=GR, amount=0, decaf=false]", (double) 52, size12, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe24 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0]", 52.0d, size12, 52);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size27 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe29 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size27, (int) '4');
        uk.ac.sheffield.com1003.cafe.Order order32 = new uk.ac.sheffield.com1003.cafe.Order(recipe29, "Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=]]]", (double) 1L);
        boolean boolean33 = recipe24.equals((java.lang.Object) order32);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + size27 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size27.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test4231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4231");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup", (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = cafe3.placeOrder("Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]]", "Order: Cafe; For: Coffee [unit=GR, amount=32, decaf=false]; Paid: 100.0", 97.0d);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4232");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk", 1.0d);
    }

    @Test
    public void test4233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4233");
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException0 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray1 = recipeNotFoundException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) recipeNotFoundException2);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException7 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException7.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException9 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray10 = recipeNotFoundException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = recipeNotFoundException9.getSuppressed();
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException9);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException13 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException13.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException15 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException16.getSuppressed();
        recipeNotFoundException15.addSuppressed((java.lang.Throwable) recipeNotFoundException16);
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) recipeNotFoundException15);
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException13);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException21.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException23 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray24 = recipeNotFoundException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException23.getSuppressed();
        recipeNotFoundException21.addSuppressed((java.lang.Throwable) recipeNotFoundException23);
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) recipeNotFoundException23);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException13);
        uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException tooManyIngredientsException29 = new uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException();
        java.lang.Throwable[] throwableArray30 = tooManyIngredientsException29.getSuppressed();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water31 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int32 = water31.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException33 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException34 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray35 = recipeNotFoundException34.getSuppressed();
        recipeNotFoundException33.addSuppressed((java.lang.Throwable) recipeNotFoundException34);
        java.lang.Throwable[] throwableArray37 = recipeNotFoundException34.getSuppressed();
        boolean boolean38 = water31.equals((java.lang.Object) recipeNotFoundException34);
        java.lang.Throwable[] throwableArray39 = recipeNotFoundException34.getSuppressed();
        tooManyIngredientsException29.addSuppressed((java.lang.Throwable) recipeNotFoundException34);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException41 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray42 = recipeNotFoundException41.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException43 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException44 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray45 = recipeNotFoundException44.getSuppressed();
        recipeNotFoundException43.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        recipeNotFoundException41.addSuppressed((java.lang.Throwable) recipeNotFoundException43);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException48 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray49 = cafeOutOfCapacityException48.getSuppressed();
        recipeNotFoundException41.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException48);
        tooManyIngredientsException29.addSuppressed((java.lang.Throwable) recipeNotFoundException41);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException52 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray53 = recipeNotFoundException52.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException54 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray55 = recipeNotFoundException54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = recipeNotFoundException54.getSuppressed();
        recipeNotFoundException52.addSuppressed((java.lang.Throwable) recipeNotFoundException54);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException58 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException59 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray60 = recipeNotFoundException59.getSuppressed();
        recipeNotFoundException58.addSuppressed((java.lang.Throwable) recipeNotFoundException59);
        recipeNotFoundException54.addSuppressed((java.lang.Throwable) recipeNotFoundException59);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException63 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray64 = recipeNotFoundException63.getSuppressed();
        recipeNotFoundException59.addSuppressed((java.lang.Throwable) recipeNotFoundException63);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException66 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray67 = recipeNotFoundException66.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException68 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray69 = recipeNotFoundException68.getSuppressed();
        java.lang.Throwable[] throwableArray70 = recipeNotFoundException68.getSuppressed();
        recipeNotFoundException66.addSuppressed((java.lang.Throwable) recipeNotFoundException68);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException72 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException73 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray74 = recipeNotFoundException73.getSuppressed();
        recipeNotFoundException72.addSuppressed((java.lang.Throwable) recipeNotFoundException73);
        recipeNotFoundException68.addSuppressed((java.lang.Throwable) recipeNotFoundException73);
        java.lang.Throwable[] throwableArray77 = recipeNotFoundException68.getSuppressed();
        recipeNotFoundException63.addSuppressed((java.lang.Throwable) recipeNotFoundException68);
        tooManyIngredientsException29.addSuppressed((java.lang.Throwable) recipeNotFoundException68);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) tooManyIngredientsException29);
        java.lang.String str81 = tooManyIngredientsException29.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 30 + "'", int32 == 30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException" + "'", str81, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException");
    }

    @Test
    public void test4234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4234");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size10 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=8, decaf=false]", (double) (-1), size10, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) (byte) 10, size10, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=1, decaf=false]", 0.0d, size10, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: ; Paid: 10.0", (double) (byte) 10, size10, 8);
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=52, type=SKIMMED]", (double) (byte) 100, size10, 8);
        org.junit.Assert.assertTrue("'" + size10 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size10.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
    }

    @Test
    public void test4235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4235");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int1 = water0.getAmount();
        java.lang.String str2 = water0.toString();
        boolean boolean4 = water0.equals((java.lang.Object) 10);
        int int5 = water0.getAmount();
        java.lang.String str6 = water0.toString();
        java.lang.String str7 = water0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 30 + "'", int1 == 30);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water [unit=ML, amount=30]" + "'", str2, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 30 + "'", int5 == 30);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Water [unit=ML, amount=30]" + "'", str6, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water [unit=ML, amount=30]" + "'", str7, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4236");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(1, false);
        boolean boolean4 = coffee2.equals((java.lang.Object) (short) 0);
        java.lang.String str5 = coffee2.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Coffee [unit=GR, amount=1, decaf=false]" + "'", str5, "Coffee [unit=GR, amount=1, decaf=false]");
    }

    @Test
    public void test4237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4237");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Coffee [unit=GR, amount=30, decaf=false]", 8, 8);
    }

    @Test
    public void test4238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4238");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("hi!");
        java.lang.String str2 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        boolean boolean9 = recipe7.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "hi!", (double) 0L);
        boolean boolean13 = cafe1.addRecipe(recipe7);
        java.lang.String str14 = cafe1.greeting();
        java.lang.String str15 = cafe1.greeting();
        java.lang.String str16 = cafe1.getName();
        cafe1.printPendingOrders();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = cafe1.placeOrder("Coffee [unit=GR, amount=100, decaf=false]", "Milk [unit=ML, amount=30, type=WHOLE]", (double) '4');
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Welcome to hi!" + "'", str14, "Welcome to hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Welcome to hi!" + "'", str15, "Welcome to hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test4239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4239");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=52, decaf=true]");
    }

    @Test
    public void test4240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4240");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type1 = null;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk2 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100, type1);
        uk.ac.sheffield.com1003.cafe.Cafe cafe6 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]", 30, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe9 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean10 = cafe6.addRecipe(recipe9);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray11 = cafe6.getMenu();
        boolean boolean12 = milk2.equals((java.lang.Object) recipeArray11);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(recipeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4241");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0", (double) (short) -1);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        boolean boolean9 = recipe7.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk17 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean18 = recipe7.equals((java.lang.Object) 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee19 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str20 = coffee19.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type21 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean22 = coffee19.equals((java.lang.Object) type21);
        java.lang.String str23 = coffee19.toString();
        recipe7.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee19);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit25 = coffee19.getUnit();
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee19);
        uk.ac.sheffield.com1003.cafe.Cafe cafe28 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe28.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray30 = cafe28.getMenu();
        java.lang.String str31 = cafe28.getName();
        java.lang.String str32 = cafe28.getName();
        uk.ac.sheffield.com1003.cafe.Order order33 = cafe28.serveOrder();
        uk.ac.sheffield.com1003.cafe.Recipe recipe36 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order39 = new uk.ac.sheffield.com1003.cafe.Order(recipe36, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order43 = new uk.ac.sheffield.com1003.cafe.Order(recipe36, "Cafe", (double) 0.0f, "Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Order order47 = new uk.ac.sheffield.com1003.cafe.Order(recipe36, "Water", (double) 100.0f, "Milk");
        double double48 = recipe36.getPrice();
        boolean boolean49 = cafe28.addRecipe(recipe36);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water51 = new uk.ac.sheffield.com1003.cafe.ingredients.Water(8);
        recipe36.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water51);
        boolean boolean53 = recipe2.equals((java.lang.Object) recipe36);
        java.lang.String str54 = recipe2.getName();
        uk.ac.sheffield.com1003.cafe.Order order57 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Welcome to Welcome to Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", 52.0d);
        order57.serve();
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str20, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type21.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str23, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + unit25 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit25.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertNotNull(recipeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(order33);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0" + "'", str54, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0");
    }

    @Test
    public void test4242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4242");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Water; Paid: 1.0");
        java.lang.String str2 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Order order3 = cafe1.serveOrder();
        java.lang.String str4 = cafe1.getName();
        cafe1.printPendingOrders();
        cafe1.printPendingOrders();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Order: ; For: Water; Paid: 1.0" + "'", str2, "Order: ; For: Water; Paid: 1.0");
        org.junit.Assert.assertNull(order3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Order: ; For: Water; Paid: 1.0" + "'", str4, "Order: ; For: Water; Paid: 1.0");
    }

    @Test
    public void test4243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4243");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe", 10, (int) (short) 100);
        cafe3.printMenu();
        cafe3.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order6 = cafe3.serveOrder();
        // The following exception was thrown during execution in test generation
        try {
            cafe3.removeRecipe("Order: Water; For: Syrup; Paid: -1.0");
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(order6);
    }

    @Test
    public void test4244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4244");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (byte) 0, false);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(97);
        boolean boolean5 = coffee2.equals((java.lang.Object) milk4);
        int int6 = milk4.getAmount();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test4245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4245");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 35.0");
        cafe1.printPendingOrders();
    }

    @Test
    public void test4246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4246");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int1 = water0.getAmount();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee4 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) -1, true);
        boolean boolean5 = water0.equals((java.lang.Object) true);
        java.lang.String str6 = water0.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe9 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: ; For: Water; Paid: 1.0]", (double) 0);
        boolean boolean10 = water0.equals((java.lang.Object) recipe9);
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe9, "Welcome to Milk [unit=ML, amount=30, type=WHOLE]", (double) ' ', "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: 1.0; Paid: 30.0");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 30 + "'", int1 == 30);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Water [unit=ML, amount=30]" + "'", str6, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4247");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(1, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 10, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type3);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
    }

    @Test
    public void test4248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4248");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water(8);
        java.lang.String str2 = water1.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe5 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean6 = water1.equals((java.lang.Object) "Milk [unit=ML, amount=100, type=WHOLE]");
        java.lang.String str7 = water1.toString();
        java.lang.String str8 = water1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water [unit=ML, amount=8]" + "'", str2, "Water [unit=ML, amount=8]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water [unit=ML, amount=8]" + "'", str7, "Water [unit=ML, amount=8]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=8]" + "'", str8, "Water [unit=ML, amount=8]");
    }

    @Test
    public void test4249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4249");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe0.getMenu();
        java.lang.String str4 = cafe0.getName();
        java.lang.String str5 = cafe0.getName();
        java.lang.String str6 = cafe0.greeting();
        cafe0.printPendingOrders();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = cafe0.placeOrder("Coffee [unit=GR, amount=100, decaf=true]", "Syrup [unit=ML, amount=10, flavour=Welcome to Milk]", 97.0d);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Cafe" + "'", str4, "Cafe");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cafe" + "'", str5, "Cafe");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Welcome to Cafe" + "'", str6, "Welcome to Cafe");
    }

    @Test
    public void test4250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4250");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Coffee [unit=GR, amount=100, decaf=true]");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size4, (int) '4');
        boolean boolean8 = recipe6.equals((java.lang.Object) 10.0d);
        java.lang.String str9 = recipe6.getName();
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "Milk [unit=ML, amount=10, type=SKIMMED]", (double) (byte) 1, "Order: ; For: ; Paid: 10.0");
        boolean boolean14 = syrup1.equals((java.lang.Object) "Order: ; For: ; Paid: 10.0");
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit15 = syrup1.getUnit();
        java.lang.String str16 = syrup1.toString();
        java.lang.String str17 = syrup1.toString();
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Water [unit=ML, amount=30]" + "'", str9, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + unit15 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit15.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=100, decaf=true]]" + "'", str16, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=100, decaf=true]]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=100, decaf=true]]" + "'", str17, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=100, decaf=true]]");
    }

    @Test
    public void test4251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4251");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size4, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Welcome to Milk [unit=ML, amount=-1, type=WHOLE]; Paid: 32.0", 1.0d, size4, 100);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size11 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size11, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk18 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '#');
        recipe13.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk18);
        int int20 = milk18.getAmount();
        java.lang.String str21 = milk18.getName();
        recipe8.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk18);
        java.lang.String str23 = recipe8.getName();
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + size11 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size11.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Milk" + "'", str21, "Milk");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Welcome to Milk [unit=ML, amount=-1, type=WHOLE]; Paid: 32.0" + "'", str23, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Welcome to Milk [unit=ML, amount=-1, type=WHOLE]; Paid: 32.0");
    }

    @Test
    public void test4252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4252");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean3 = recipe2.isReady();
        java.lang.String str4 = recipe2.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee5 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee5);
        java.lang.String str7 = recipe2.getName();
        double double8 = recipe2.getPrice();
        boolean boolean9 = recipe2.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee12 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) -1, true);
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee12);
        uk.ac.sheffield.com1003.cafe.Order order17 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "", (double) (byte) 100, "");
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Cafe cafe24 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0]", 100, (int) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray25 = cafe24.getMenu();
        cafe24.printPendingOrders();
        boolean boolean27 = recipe2.equals((java.lang.Object) cafe24);
        double double28 = recipe2.getPrice();
        boolean boolean29 = recipe2.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water30 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str31 = water30.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk33 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean34 = water30.equals((java.lang.Object) 30);
        java.lang.String str35 = water30.toString();
        java.lang.String str36 = water30.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe40 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Coffee [unit=GR, amount=8, decaf=false]", 1, (int) '#');
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray41 = cafe40.getMenu();
        boolean boolean42 = water30.equals((java.lang.Object) recipeArray41);
        int int43 = water30.getAmount();
        int int44 = water30.getAmount();
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water30);
        java.lang.String str46 = water30.getName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water [unit=ML, amount=30]" + "'", str4, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water [unit=ML, amount=30]" + "'", str7, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(recipeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Water" + "'", str31, "Water");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Water [unit=ML, amount=30]" + "'", str35, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Water" + "'", str36, "Water");
        org.junit.Assert.assertNotNull(recipeArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 30 + "'", int43 == 30);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 30 + "'", int44 == 30);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Water" + "'", str46, "Water");
    }

    @Test
    public void test4253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4253");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size14 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size14, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) ' ', size14, 30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=30, decaf=false]", (double) 1.0f, size14, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (double) 10, size14, (int) '#');
        uk.ac.sheffield.com1003.cafe.Recipe recipe24 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 0L, size14, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) '4', size14, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe28 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=null]", (double) 0.0f, size14, 0);
        uk.ac.sheffield.com1003.cafe.Order order31 = new uk.ac.sheffield.com1003.cafe.Order(recipe28, "Welcome to Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) (short) 10);
        boolean boolean32 = recipe28.isReady();
        boolean boolean33 = recipe28.isReady();
        uk.ac.sheffield.com1003.cafe.Recipe recipe36 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order39 = new uk.ac.sheffield.com1003.cafe.Order(recipe36, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order43 = new uk.ac.sheffield.com1003.cafe.Order(recipe36, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean44 = recipe36.isReady();
        uk.ac.sheffield.com1003.cafe.Order order47 = new uk.ac.sheffield.com1003.cafe.Order(recipe36, "Order: ; For: Water; Paid: 1.0", (double) (byte) 100);
        boolean boolean48 = recipe28.equals((java.lang.Object) recipe36);
        org.junit.Assert.assertTrue("'" + size14 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size14.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test4254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4254");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type1 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk2 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100, type1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe3 = null;
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe3, "Coffee [unit=GR, amount=1, decaf=false]", (double) 0.0f);
        boolean boolean7 = milk2.equals((java.lang.Object) "Coffee [unit=GR, amount=1, decaf=false]");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee8 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str9 = coffee8.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type10 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean11 = coffee8.equals((java.lang.Object) type10);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException13 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException13.getSuppressed();
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException13);
        java.lang.Throwable[] throwableArray16 = recipeNotFoundException13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException13.getSuppressed();
        boolean boolean18 = coffee8.equals((java.lang.Object) throwableArray17);
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (short) -1);
        boolean boolean22 = coffee8.equals((java.lang.Object) recipe21);
        boolean boolean23 = milk2.equals((java.lang.Object) coffee8);
        java.lang.String str24 = milk2.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk26 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj27 = null;
        boolean boolean28 = milk26.equals(obj27);
        java.lang.String str29 = milk26.toString();
        java.lang.String str30 = milk26.getName();
        java.lang.String str31 = milk26.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe34 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=30, decaf=false]", (double) (short) 100);
        boolean boolean35 = milk26.equals((java.lang.Object) recipe34);
        boolean boolean36 = recipe34.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water37 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str38 = water37.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk40 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean41 = water37.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit42 = water37.getUnit();
        java.lang.Object obj43 = null;
        boolean boolean44 = water37.equals(obj43);
        java.lang.String str45 = water37.toString();
        java.lang.String str46 = water37.toString();
        recipe34.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water37);
        java.lang.String str48 = recipe34.getName();
        double double49 = recipe34.getPrice();
        boolean boolean50 = milk2.equals((java.lang.Object) recipe34);
        org.junit.Assert.assertTrue("'" + type1 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type1.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str9, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type10.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Milk [unit=ML, amount=100, type=SEMI]" + "'", str24, "Milk [unit=ML, amount=100, type=SEMI]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str29, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Milk" + "'", str30, "Milk");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str31, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Water" + "'", str38, "Water");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + unit42 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit42.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Water [unit=ML, amount=30]" + "'", str45, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Water [unit=ML, amount=30]" + "'", str46, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Coffee [unit=GR, amount=30, decaf=false]" + "'", str48, "Coffee [unit=GR, amount=30, decaf=false]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4255");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order1 = cafe0.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order2 = cafe0.serveOrder();
        cafe0.printPendingOrders();
        cafe0.printMenu();
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Cafe cafe7 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size10 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) '4', size10, 1);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe12, "", (double) 10L, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0");
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order22 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double23 = recipe19.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee26 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '4', true);
        boolean boolean28 = coffee26.equals((java.lang.Object) 10L);
        boolean boolean30 = coffee26.equals((java.lang.Object) (-1.0f));
        recipe19.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee26);
        double double32 = recipe19.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order36 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "Water [unit=ML, amount=0]", (double) (byte) 100, "Coffee [unit=GR, amount=0, decaf=false]");
        double double37 = recipe19.getPrice();
        boolean boolean38 = recipe12.equals((java.lang.Object) recipe19);
        boolean boolean39 = cafe7.addRecipe(recipe12);
        boolean boolean40 = cafe0.addRecipe(recipe12);
        org.junit.Assert.assertNull(order1);
        org.junit.Assert.assertNull(order2);
        org.junit.Assert.assertTrue("'" + size10 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size10.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test4256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4256");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type7 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean8 = milk6.equals((java.lang.Object) type7);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) -1, type7);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 0, type7);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk11 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '4', type7);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk12 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 100, type7);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk13 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 0, type7);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type7.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test4257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4257");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = null;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=1, type=WHOLE]", 1.0d, size2, (int) '#');
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Coffee [unit=GR, amount=-1, decaf=true]", 0.0d);
        order7.printReceipt();
    }

    @Test
    public void test4258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4258");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size2, (int) '4');
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", 0.0d);
        java.lang.String str10 = recipe4.getName();
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (double) (byte) 1, "Coffee [unit=GR, amount=8, decaf=false]");
        java.lang.String str15 = order14.toString();
        order14.printReceipt();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water [unit=ML, amount=30]" + "'", str10, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: 1.0" + "'", str15, "Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: 1.0");
    }

    @Test
    public void test4259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4259");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]]");
    }

    @Test
    public void test4260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4260");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk2 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean4 = milk2.equals((java.lang.Object) type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type3);
        java.lang.String str6 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee8 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str9 = coffee8.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type10 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean11 = coffee8.equals((java.lang.Object) type10);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk12 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type10);
        java.lang.String str13 = milk12.getName();
        java.lang.String str14 = milk12.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe16 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe16.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray18 = cafe16.getMenu();
        java.lang.String str19 = cafe16.getName();
        java.lang.String str20 = cafe16.getName();
        boolean boolean21 = milk12.equals((java.lang.Object) cafe16);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size24 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size24, (int) '4');
        boolean boolean28 = recipe26.equals((java.lang.Object) 10.0d);
        java.lang.String str29 = recipe26.getName();
        boolean boolean31 = recipe26.equals((java.lang.Object) "Coffee");
        boolean boolean32 = milk12.equals((java.lang.Object) recipe26);
        boolean boolean33 = milk5.equals((java.lang.Object) milk12);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup35 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("");
        java.lang.String str36 = syrup35.toString();
        java.lang.Class<?> wildcardClass37 = syrup35.getClass();
        boolean boolean38 = milk12.equals((java.lang.Object) syrup35);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size41 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe43 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size41, (int) (short) 10);
        double double44 = recipe43.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order47 = new uk.ac.sheffield.com1003.cafe.Order(recipe43, "Water", (double) 1L);
        order47.printReceipt();
        order47.serve();
        order47.printReceipt();
        boolean boolean51 = milk12.equals((java.lang.Object) order47);
        java.lang.String str52 = order47.toString();
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk [unit=ML, amount=0, type=SKIMMED]" + "'", str6, "Milk [unit=ML, amount=0, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str9, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type10.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Milk" + "'", str13, "Milk");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str14, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertNotNull(recipeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + size24 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size24.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Water [unit=ML, amount=30]" + "'", str29, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Syrup [unit=ML, amount=10, flavour=]" + "'", str36, "Syrup [unit=ML, amount=10, flavour=]");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + size41 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size41.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Order: ; For: Water; Paid: 1.0" + "'", str52, "Order: ; For: Water; Paid: 1.0");
    }

    @Test
    public void test4261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4261");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int1 = water0.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException3.getSuppressed();
        boolean boolean7 = water0.equals((java.lang.Object) recipeNotFoundException3);
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException3.getSuppressed();
        java.lang.Throwable[] throwableArray9 = recipeNotFoundException3.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException10 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray11 = recipeNotFoundException10.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException12.getSuppressed();
        recipeNotFoundException10.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException17 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray18 = recipeNotFoundException17.getSuppressed();
        recipeNotFoundException16.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException21.getSuppressed();
        recipeNotFoundException17.addSuppressed((java.lang.Throwable) recipeNotFoundException21);
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        java.lang.String str25 = recipeNotFoundException3.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 30 + "'", int1 == 30);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str25, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4262");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size10 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size10, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Plain]", (double) '#', size10, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", 10.0d, size10, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=8, decaf=true]", (double) 97, size10, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: Water [unit=ML, amount=30]; For: Welcome to Cafe; Paid: 0.0", (double) 32, size10, 10);
        org.junit.Assert.assertTrue("'" + size10 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size10.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
    }

    @Test
    public void test4263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4263");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        cafe0.printMenu();
        java.lang.Class<?> wildcardClass5 = cafe0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test4264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4264");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean7 = cafe3.addRecipe(recipe6);
        boolean boolean8 = cafe1.addRecipe(recipe6);
        uk.ac.sheffield.com1003.cafe.Recipe recipe11 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 10L);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk13 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        recipe11.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk13);
        java.lang.String str15 = recipe11.getName();
        boolean boolean16 = cafe1.addRecipe(recipe11);
        java.lang.Object obj17 = null;
        boolean boolean18 = recipe11.equals(obj17);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water19 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str20 = water19.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe22 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk");
        boolean boolean23 = water19.equals((java.lang.Object) "Milk");
        uk.ac.sheffield.com1003.cafe.Cafe cafe25 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=]");
        boolean boolean26 = water19.equals((java.lang.Object) cafe25);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water28 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) '4');
        boolean boolean29 = water19.equals((java.lang.Object) '4');
        recipe11.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water19);
        java.lang.String str31 = water19.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe34 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Water]", (double) 10.0f);
        boolean boolean35 = recipe34.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water37 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) -1);
        boolean boolean38 = recipe34.equals((java.lang.Object) water37);
        boolean boolean39 = water19.equals((java.lang.Object) boolean38);
        java.lang.String str40 = water19.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Cafe" + "'", str15, "Cafe");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Water [unit=ML, amount=30]" + "'", str20, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Water" + "'", str31, "Water");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Water [unit=ML, amount=30]" + "'", str40, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4265");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size2, (int) '4');
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "", (double) (-1.0f), "Welcome to ");
        double double9 = recipe4.getPrice();
        double double10 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee11 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str12 = coffee11.toString();
        java.lang.String str13 = coffee11.toString();
        java.lang.String str14 = coffee11.toString();
        java.lang.String str15 = coffee11.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee18 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(1, false);
        boolean boolean19 = coffee11.equals((java.lang.Object) false);
        boolean boolean21 = coffee11.equals((java.lang.Object) "Syrup");
        boolean boolean22 = recipe4.equals((java.lang.Object) "Syrup");
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str12, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str13, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str14, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str15, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4266");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup", (int) (short) 10, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size6, (int) '4');
        boolean boolean10 = recipe8.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Welcome to Cafe", 0.0d);
        java.lang.String str14 = recipe8.getName();
        uk.ac.sheffield.com1003.cafe.Order order18 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Milk [unit=ML, amount=10, type=WHOLE]", (double) (byte) 1, "Coffee [unit=GR, amount=8, decaf=false]");
        boolean boolean19 = cafe3.addRecipe(recipe8);
        uk.ac.sheffield.com1003.cafe.Order order20 = cafe3.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order21 = cafe3.serveOrder();
        java.lang.Class<?> wildcardClass22 = cafe3.getClass();
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(order20);
        org.junit.Assert.assertNull(order21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test4267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4267");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size6, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size6, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=97, decaf=false]", 32.0d, size6, (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
    }

    @Test
    public void test4268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4268");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size2, (int) '4');
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", 0.0d);
        boolean boolean11 = recipe4.equals((java.lang.Object) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0", 0.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee15 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str16 = coffee15.toString();
        java.lang.String str17 = coffee15.toString();
        java.lang.String str18 = coffee15.toString();
        int int19 = coffee15.getAmount();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee15);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee22 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(1);
        java.lang.Class<?> wildcardClass23 = coffee22.getClass();
        boolean boolean24 = coffee15.equals((java.lang.Object) coffee22);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk26 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ');
        uk.ac.sheffield.com1003.cafe.ingredients.Water water27 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str28 = water27.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk30 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean31 = water27.equals((java.lang.Object) 30);
        java.lang.String str32 = water27.toString();
        java.lang.String str33 = water27.getName();
        boolean boolean35 = water27.equals((java.lang.Object) (byte) -1);
        java.lang.String str36 = water27.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit37 = water27.getUnit();
        boolean boolean38 = milk26.equals((java.lang.Object) water27);
        java.lang.String str39 = milk26.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe40 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order41 = cafe40.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order42 = cafe40.serveOrder();
        cafe40.printMenu();
        boolean boolean44 = milk26.equals((java.lang.Object) cafe40);
        uk.ac.sheffield.com1003.cafe.Order order45 = cafe40.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order46 = cafe40.serveOrder();
        boolean boolean47 = coffee22.equals((java.lang.Object) cafe40);
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str16, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str17, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str18, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Water" + "'", str28, "Water");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Water [unit=ML, amount=30]" + "'", str32, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Water" + "'", str33, "Water");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Water" + "'", str36, "Water");
        org.junit.Assert.assertTrue("'" + unit37 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit37.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Milk" + "'", str39, "Milk");
        org.junit.Assert.assertNull(order41);
        org.junit.Assert.assertNull(order42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(order45);
        org.junit.Assert.assertNull(order46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test4269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4269");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (int) ' ', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size6, (int) '4');
        boolean boolean10 = recipe8.equals((java.lang.Object) 10.0d);
        double double11 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean16 = cafe3.addRecipe(recipe8);
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk", (double) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe19, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (short) -1, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee26 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 0, false);
        recipe19.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee26);
        boolean boolean28 = recipe8.equals((java.lang.Object) coffee26);
        uk.ac.sheffield.com1003.cafe.Cafe cafe30 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Plain]");
        boolean boolean31 = coffee26.equals((java.lang.Object) cafe30);
        java.lang.String str32 = coffee26.toString();
        java.lang.String str33 = coffee26.toString();
        java.lang.String str34 = coffee26.toString();
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str32, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str33, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str34, "Coffee [unit=GR, amount=0, decaf=false]");
    }

    @Test
    public void test4270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4270");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Welcome to ; Paid: 10.0");
    }

    @Test
    public void test4271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4271");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean15 = recipe4.equals((java.lang.Object) 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee16 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str17 = coffee16.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type18 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean19 = coffee16.equals((java.lang.Object) type18);
        java.lang.String str20 = coffee16.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee16);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit22 = coffee16.getUnit();
        java.lang.String str23 = coffee16.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe25 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Cafe cafe27 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe30 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean31 = cafe27.addRecipe(recipe30);
        boolean boolean32 = cafe25.addRecipe(recipe30);
        uk.ac.sheffield.com1003.cafe.Order order36 = new uk.ac.sheffield.com1003.cafe.Order(recipe30, "Coffee [unit=GR, amount=8, decaf=false]", 0.0d, "Order: ; For: Water; Paid: 1.0");
        java.lang.String str37 = order36.toString();
        order36.printReceipt();
        boolean boolean39 = coffee16.equals((java.lang.Object) order36);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit40 = coffee16.getUnit();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str17, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type18.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str20, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + unit22 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit22.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str23, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Coffee [unit=GR, amount=8, decaf=false]; Paid: 0.0" + "'", str37, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Coffee [unit=GR, amount=8, decaf=false]; Paid: 0.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + unit40 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit40.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
    }

    @Test
    public void test4272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4272");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: -1.0");
        java.lang.String str2 = syrup1.toString();
        java.lang.String str3 = syrup1.toString();
        java.lang.String str4 = syrup1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: -1.0]" + "'", str2, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: -1.0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: -1.0]" + "'", str3, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: -1.0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: -1.0]" + "'", str4, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: -1.0]");
    }

    @Test
    public void test4273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4273");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee4 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean8 = recipe7.isReady();
        java.lang.String str9 = recipe7.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee10 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe7.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee10);
        boolean boolean12 = coffee4.equals((java.lang.Object) recipe7);
        boolean boolean13 = cafe0.addRecipe(recipe7);
        java.lang.Class<?> wildcardClass14 = cafe0.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Water [unit=ML, amount=30]" + "'", str9, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test4274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4274");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Milk [unit=ML, amount=30, type=WHOLE]");
        java.lang.String str2 = syrup1.toString();
        java.lang.String str3 = syrup1.toString();
        int int4 = syrup1.getAmount();
        java.lang.String str5 = syrup1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]" + "'", str2, "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]" + "'", str3, "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]" + "'", str5, "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]");
    }

    @Test
    public void test4275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4275");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str2 = coffee1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean4 = coffee1.equals((java.lang.Object) type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type3);
        java.lang.String str6 = milk5.getName();
        java.lang.String str7 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe9 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe9.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray11 = cafe9.getMenu();
        java.lang.String str12 = cafe9.getName();
        java.lang.String str13 = cafe9.getName();
        boolean boolean14 = milk5.equals((java.lang.Object) cafe9);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size17 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size17, (int) '4');
        boolean boolean21 = recipe19.equals((java.lang.Object) 10.0d);
        java.lang.String str22 = recipe19.getName();
        boolean boolean24 = recipe19.equals((java.lang.Object) "Coffee");
        boolean boolean25 = milk5.equals((java.lang.Object) recipe19);
        java.lang.String str26 = milk5.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk" + "'", str6, "Milk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str7, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertNotNull(recipeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + size17 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size17.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Water [unit=ML, amount=30]" + "'", str22, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str26, "Milk [unit=ML, amount=10, type=SKIMMED]");
    }

    @Test
    public void test4276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4276");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", 1, (int) (short) 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: Water; Paid: 1.0", (double) 0);
        boolean boolean7 = cafe3.addRecipe(recipe6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test4277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4277");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type4 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1), type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '#', type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk7 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 0, type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk8 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ', type4);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
    }

    @Test
    public void test4278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4278");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(0, false);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup4 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Water");
        java.lang.String str5 = syrup4.toString();
        java.lang.String str6 = syrup4.toString();
        boolean boolean7 = coffee2.equals((java.lang.Object) syrup4);
        java.lang.String str8 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe12 = new uk.ac.sheffield.com1003.cafe.Cafe("Water", (int) (byte) 1, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray13 = cafe12.getMenu();
        boolean boolean14 = coffee2.equals((java.lang.Object) cafe12);
        java.lang.String str15 = coffee2.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Water]" + "'", str5, "Syrup [unit=ML, amount=10, flavour=Water]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Water]" + "'", str6, "Syrup [unit=ML, amount=10, flavour=Water]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str8, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertNotNull(recipeArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str15, "Coffee [unit=GR, amount=0, decaf=false]");
    }

    @Test
    public void test4279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4279");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Welcome to Milk [unit=ML, amount=-1, type=SKIMMED]");
        java.lang.String str2 = syrup1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Welcome to Milk [unit=ML, amount=-1, type=SKIMMED]]" + "'", str2, "Syrup [unit=ML, amount=10, flavour=Welcome to Milk [unit=ML, amount=-1, type=SKIMMED]]");
    }

    @Test
    public void test4280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4280");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee3 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean7 = recipe6.isReady();
        java.lang.String str8 = recipe6.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee9 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe6.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee9);
        boolean boolean11 = coffee3.equals((java.lang.Object) recipe6);
        boolean boolean12 = water1.equals((java.lang.Object) recipe6);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit13 = water1.getUnit();
        java.lang.String str14 = water1.toString();
        int int15 = water1.getAmount();
        uk.ac.sheffield.com1003.cafe.Cafe cafe17 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean21 = cafe17.addRecipe(recipe20);
        cafe17.printPendingOrders();
        cafe17.printMenu();
        boolean boolean24 = water1.equals((java.lang.Object) cafe17);
        cafe17.printPendingOrders();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = cafe17.placeOrder("Water [unit=ML, amount=30]", "Order: ; For: Welcome to Order: ; For: ; Paid: 10.0; Paid: -1.0", (double) 97);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + unit13 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit13.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=100]" + "'", str14, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4281");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str2 = coffee1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean4 = coffee1.equals((java.lang.Object) type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type3);
        java.lang.String str6 = milk5.getName();
        java.lang.String str7 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water8 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int9 = water8.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException10 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException11 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray12 = recipeNotFoundException11.getSuppressed();
        recipeNotFoundException10.addSuppressed((java.lang.Throwable) recipeNotFoundException11);
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException11.getSuppressed();
        boolean boolean15 = water8.equals((java.lang.Object) recipeNotFoundException11);
        java.lang.Throwable[] throwableArray16 = recipeNotFoundException11.getSuppressed();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException11.getSuppressed();
        boolean boolean18 = milk5.equals((java.lang.Object) recipeNotFoundException11);
        java.lang.String str19 = milk5.toString();
        int int20 = milk5.getAmount();
        java.lang.String str21 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe24 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Water; Paid: 1.0", (double) (-1));
        uk.ac.sheffield.com1003.cafe.Order order28 = new uk.ac.sheffield.com1003.cafe.Order(recipe24, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0", 1.0d, "Coffee");
        java.lang.String str29 = recipe24.getName();
        boolean boolean30 = milk5.equals((java.lang.Object) recipe24);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk" + "'", str6, "Milk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str7, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 30 + "'", int9 == 30);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str19, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str21, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Order: ; For: Water; Paid: 1.0" + "'", str29, "Order: ; For: Water; Paid: 1.0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4282");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water(52);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size4, (int) '4');
        boolean boolean8 = recipe6.equals((java.lang.Object) 10.0d);
        double double9 = recipe6.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "Water [unit=ML, amount=0]", (double) 10.0f);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water17 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str18 = water17.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk20 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean21 = water17.equals((java.lang.Object) 30);
        java.lang.String str22 = water17.toString();
        java.lang.String str23 = water17.getName();
        java.lang.String str24 = water17.getName();
        java.lang.String str25 = water17.toString();
        java.lang.String str26 = water17.toString();
        recipe6.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water17);
        boolean boolean28 = water1.equals((java.lang.Object) water17);
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Water" + "'", str18, "Water");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Water [unit=ML, amount=30]" + "'", str22, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Water" + "'", str23, "Water");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Water" + "'", str24, "Water");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Water [unit=ML, amount=30]" + "'", str25, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Water [unit=ML, amount=30]" + "'", str26, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4283");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee3 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((-1));
        boolean boolean4 = water0.equals((java.lang.Object) (-1));
        int int5 = water0.getAmount();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size12, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size12, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) 30, size12, (int) (short) 100);
        boolean boolean19 = water0.equals((java.lang.Object) "");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee20 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str21 = coffee20.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type22 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean23 = coffee20.equals((java.lang.Object) type22);
        java.lang.String str24 = coffee20.getName();
        boolean boolean25 = water0.equals((java.lang.Object) coffee20);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit26 = water0.getUnit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water [unit=ML, amount=30]" + "'", str1, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 30 + "'", int5 == 30);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str21, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type22.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Coffee" + "'", str24, "Coffee");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + unit26 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit26.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
    }

    @Test
    public void test4284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4284");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water(97);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit2 = water1.getUnit();
        java.lang.String str3 = water1.toString();
        org.junit.Assert.assertTrue("'" + unit2 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit2.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Water [unit=ML, amount=97]" + "'", str3, "Water [unit=ML, amount=97]");
    }

    @Test
    public void test4285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4285");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(0, false);
        int int3 = coffee2.getAmount();
        java.lang.String str4 = coffee2.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water6 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) -1);
        int int7 = water6.getAmount();
        uk.ac.sheffield.com1003.cafe.Cafe cafe8 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe8.printPendingOrders();
        java.lang.String str10 = cafe8.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray11 = cafe8.getMenu();
        java.lang.String str12 = cafe8.greeting();
        cafe8.printMenu();
        cafe8.printPendingOrders();
        boolean boolean15 = water6.equals((java.lang.Object) cafe8);
        cafe8.printMenu();
        java.lang.String str17 = cafe8.greeting();
        cafe8.printMenu();
        cafe8.printPendingOrders();
        boolean boolean20 = coffee2.equals((java.lang.Object) cafe8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Coffee" + "'", str4, "Coffee");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Welcome to Cafe" + "'", str10, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Welcome to Cafe" + "'", str12, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Welcome to Cafe" + "'", str17, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4286");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Water; Paid: 1.0", (double) (-1));
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0", 1.0d, "Coffee");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk8 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        java.lang.String str9 = milk8.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit10 = milk8.getUnit();
        java.lang.String str11 = milk8.toString();
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Milk [unit=ML, amount=30, type=WHOLE]" + "'", str9, "Milk [unit=ML, amount=30, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + unit10 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit10.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Milk [unit=ML, amount=30, type=WHOLE]" + "'", str11, "Milk [unit=ML, amount=30, type=WHOLE]");
    }

    @Test
    public void test4287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4287");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean15 = recipe4.equals((java.lang.Object) 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee16 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str17 = coffee16.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type18 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean19 = coffee16.equals((java.lang.Object) type18);
        java.lang.String str20 = coffee16.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee16);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size24 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size24, (int) (short) 10);
        boolean boolean27 = coffee16.equals((java.lang.Object) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size30 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe32 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=8, decaf=false]", (double) (-1), size30, 0);
        uk.ac.sheffield.com1003.cafe.Order order36 = new uk.ac.sheffield.com1003.cafe.Order(recipe32, "Milk [unit=ML, amount=100, type=WHOLE]", (double) 'a', "Order: ; For: ; Paid: 10.0");
        boolean boolean37 = coffee16.equals((java.lang.Object) recipe32);
        uk.ac.sheffield.com1003.cafe.Order order40 = new uk.ac.sheffield.com1003.cafe.Order(recipe32, "Milk [unit=ML, amount=30, type=WHOLE]", 0.0d);
        boolean boolean41 = recipe32.isReady();
        uk.ac.sheffield.com1003.cafe.Order order45 = new uk.ac.sheffield.com1003.cafe.Order(recipe32, "Welcome to Coffee [unit=GR, amount=8, decaf=false]", (double) ' ', "Order: Water; For: Water; Paid: 1.0");
        uk.ac.sheffield.com1003.cafe.Order order49 = new uk.ac.sheffield.com1003.cafe.Order(recipe32, "Coffee [unit=GR, amount=32, decaf=false]", (double) '4', "Milk [unit=ML, amount=52, type=WHOLE]");
        uk.ac.sheffield.com1003.cafe.Order order52 = new uk.ac.sheffield.com1003.cafe.Order(recipe32, "Milk [unit=ML, amount=32, type=WHOLE]", (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str17, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type18.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str20, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + size24 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size24.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + size30 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size30.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test4288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4288");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size4, (int) (short) 10);
        double double7 = recipe6.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size13 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe15 = new uk.ac.sheffield.com1003.cafe.Recipe("Water", (double) 100.0f, size13, 0);
        boolean boolean16 = recipe6.equals((java.lang.Object) size13);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: -1.0", 1.0d, size13, 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk20 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1));
        java.lang.String str21 = milk20.toString();
        java.lang.String str22 = milk20.toString();
        recipe18.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk20);
        int int24 = milk20.getAmount();
        java.lang.String str25 = milk20.toString();
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + size13 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size13.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str21, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str22, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str25, "Milk [unit=ML, amount=-1, type=WHOLE]");
    }

    @Test
    public void test4289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4289");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 10, type3);
        java.lang.String str7 = milk6.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type11 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean12 = milk10.equals((java.lang.Object) type11);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk13 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type11);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit14 = milk13.getUnit();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water16 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 100);
        java.lang.String str17 = water16.toString();
        uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException tooManyIngredientsException18 = new uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException();
        java.lang.Throwable[] throwableArray19 = tooManyIngredientsException18.getSuppressed();
        boolean boolean20 = water16.equals((java.lang.Object) tooManyIngredientsException18);
        boolean boolean21 = milk13.equals((java.lang.Object) boolean20);
        boolean boolean22 = milk6.equals((java.lang.Object) milk13);
        int int23 = milk6.getAmount();
        java.lang.String str24 = milk6.toString();
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Milk [unit=ML, amount=10, type=SEMI]" + "'", str7, "Milk [unit=ML, amount=10, type=SEMI]");
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type11.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + unit14 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit14.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Water [unit=ML, amount=100]" + "'", str17, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Milk [unit=ML, amount=10, type=SEMI]" + "'", str24, "Milk [unit=ML, amount=10, type=SEMI]");
    }

    @Test
    public void test4290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4290");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order5 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Coffee [unit=GR, amount=8, decaf=false]", (double) (-1.0f));
        java.lang.String str6 = recipe2.getName();
        double double7 = recipe2.getPrice();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk [unit=ML, amount=100, type=WHOLE]" + "'", str6, "Milk [unit=ML, amount=100, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test4291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4291");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order5 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Coffee [unit=GR, amount=8, decaf=false]", (double) (-1.0f));
        boolean boolean6 = recipe2.isReady();
        boolean boolean7 = recipe2.isReady();
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Welcome to Milk [unit=ML, amount=-1, type=WHOLE]", (double) 32, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]");
        order11.serve();
        order11.serve();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test4292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4292");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean3 = recipe2.isReady();
        java.lang.String str4 = recipe2.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee5 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee5);
        java.lang.String str7 = recipe2.getName();
        double double8 = recipe2.getPrice();
        boolean boolean9 = recipe2.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee12 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) -1, true);
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee12);
        boolean boolean14 = recipe2.isReady();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water [unit=ML, amount=30]" + "'", str4, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water [unit=ML, amount=30]" + "'", str7, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4293");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Welcome to Milk [unit=ML, amount=-1, type=SKIMMED]]");
    }

    @Test
    public void test4294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4294");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        boolean boolean10 = recipe8.equals((java.lang.Object) 10.0f);
        boolean boolean11 = cafe0.addRecipe(recipe8);
        java.lang.String str12 = cafe0.greeting();
        cafe0.printPendingOrders();
        java.lang.String str14 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray15 = cafe0.getMenu();
        java.lang.String str16 = cafe0.greeting();
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Welcome to Cafe" + "'", str12, "Welcome to Cafe");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Welcome to Cafe" + "'", str14, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Welcome to Cafe" + "'", str16, "Welcome to Cafe");
    }

    @Test
    public void test4295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4295");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (int) ' ', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size6, (int) '4');
        boolean boolean10 = recipe8.equals((java.lang.Object) 10.0d);
        double double11 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean16 = cafe3.addRecipe(recipe8);
        cafe3.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size20 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size20, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order25 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee26 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str27 = coffee26.toString();
        boolean boolean28 = recipe22.equals((java.lang.Object) str27);
        boolean boolean29 = recipe22.isReady();
        double double30 = recipe22.getPrice();
        boolean boolean31 = cafe3.addRecipe(recipe22);
        uk.ac.sheffield.com1003.cafe.Order order34 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Order: ; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: -1.0", (double) (short) 0);
        java.lang.String str35 = order34.toString();
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + size20 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size20.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str27, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Order: ; For: Order: ; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: -1.0; Paid: 0.0" + "'", str35, "Order: ; For: Order: ; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: -1.0; Paid: 0.0");
    }

    @Test
    public void test4296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4296");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Welcome to Cafe; Paid: 10.0", (int) ' ', (int) (short) 1);
        cafe3.printMenu();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = cafe3.placeOrder("Coffee [unit=GR, amount=97, decaf=false]", "Milk [unit=ML, amount=1, type=SEMI]", (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4297");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        double double5 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "", (double) (short) 10, "Water [unit=ML, amount=30]");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water13 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str14 = water13.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water13);
        uk.ac.sheffield.com1003.cafe.Cafe cafe16 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe16.printPendingOrders();
        java.lang.String str18 = cafe16.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray19 = cafe16.getMenu();
        cafe16.printMenu();
        boolean boolean21 = water13.equals((java.lang.Object) cafe16);
        java.lang.String str22 = water13.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe25 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean26 = water13.equals((java.lang.Object) 1.0f);
        uk.ac.sheffield.com1003.cafe.Cafe cafe28 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray29 = cafe28.getMenu();
        boolean boolean30 = water13.equals((java.lang.Object) recipeArray29);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size33 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe35 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size33, (int) (short) 10);
        double double36 = recipe35.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order39 = new uk.ac.sheffield.com1003.cafe.Order(recipe35, "Water", (double) 1L);
        uk.ac.sheffield.com1003.cafe.Order order43 = new uk.ac.sheffield.com1003.cafe.Order(recipe35, "Order: ; For: Coffee [unit=GR, amount=30, decaf=false]; Paid: 0.0", (double) (byte) 10, "Milk [unit=ML, amount=32, type=WHOLE]");
        boolean boolean44 = water13.equals((java.lang.Object) order43);
        order43.printReceipt();
        order43.printReceipt();
        order43.printReceipt();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Welcome to Cafe" + "'", str18, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Water" + "'", str22, "Water");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(recipeArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + size33 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size33.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test4298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4298");
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException0 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray1 = recipeNotFoundException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) recipeNotFoundException2);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException7 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray8 = cafeOutOfCapacityException7.getSuppressed();
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException7);
        java.lang.Throwable[] throwableArray10 = recipeNotFoundException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 10L);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk15 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        recipe13.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk15);
        java.lang.String str17 = recipe13.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean21 = recipe20.isReady();
        java.lang.String str22 = recipe20.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee23 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe20.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee23);
        recipe13.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee23);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException26 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException27 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray28 = cafeOutOfCapacityException27.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException29 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray30 = recipeNotFoundException29.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException31 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = recipeNotFoundException31.getSuppressed();
        recipeNotFoundException29.addSuppressed((java.lang.Throwable) recipeNotFoundException31);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException35 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException36 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray37 = recipeNotFoundException36.getSuppressed();
        recipeNotFoundException35.addSuppressed((java.lang.Throwable) recipeNotFoundException36);
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) recipeNotFoundException36);
        cafeOutOfCapacityException27.addSuppressed((java.lang.Throwable) recipeNotFoundException31);
        cafeOutOfCapacityException26.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException27);
        boolean boolean42 = recipe13.equals((java.lang.Object) cafeOutOfCapacityException27);
        java.lang.Throwable[] throwableArray43 = cafeOutOfCapacityException27.getSuppressed();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk45 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ');
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException46 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray47 = recipeNotFoundException46.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException48 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray49 = recipeNotFoundException48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = recipeNotFoundException48.getSuppressed();
        recipeNotFoundException46.addSuppressed((java.lang.Throwable) recipeNotFoundException48);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException52 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException53 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray54 = recipeNotFoundException53.getSuppressed();
        recipeNotFoundException52.addSuppressed((java.lang.Throwable) recipeNotFoundException53);
        recipeNotFoundException48.addSuppressed((java.lang.Throwable) recipeNotFoundException53);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException57 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray58 = recipeNotFoundException57.getSuppressed();
        recipeNotFoundException53.addSuppressed((java.lang.Throwable) recipeNotFoundException57);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException60 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray61 = recipeNotFoundException60.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException62 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray63 = recipeNotFoundException62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = recipeNotFoundException62.getSuppressed();
        recipeNotFoundException60.addSuppressed((java.lang.Throwable) recipeNotFoundException62);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException66 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException67 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray68 = recipeNotFoundException67.getSuppressed();
        recipeNotFoundException66.addSuppressed((java.lang.Throwable) recipeNotFoundException67);
        recipeNotFoundException62.addSuppressed((java.lang.Throwable) recipeNotFoundException67);
        java.lang.Throwable[] throwableArray71 = recipeNotFoundException62.getSuppressed();
        recipeNotFoundException57.addSuppressed((java.lang.Throwable) recipeNotFoundException62);
        boolean boolean73 = milk45.equals((java.lang.Object) recipeNotFoundException62);
        cafeOutOfCapacityException27.addSuppressed((java.lang.Throwable) recipeNotFoundException62);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException75 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray76 = recipeNotFoundException75.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException77 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException78 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray79 = recipeNotFoundException78.getSuppressed();
        recipeNotFoundException77.addSuppressed((java.lang.Throwable) recipeNotFoundException78);
        recipeNotFoundException75.addSuppressed((java.lang.Throwable) recipeNotFoundException77);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException82 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray83 = cafeOutOfCapacityException82.getSuppressed();
        recipeNotFoundException75.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException82);
        java.lang.Throwable[] throwableArray85 = cafeOutOfCapacityException82.getSuppressed();
        cafeOutOfCapacityException27.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException82);
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException27);
        java.lang.String str88 = recipeNotFoundException0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Cafe" + "'", str17, "Cafe");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Water [unit=ML, amount=30]" + "'", str22, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str88, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4299");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Water", (double) 1, size6, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("", (-1.0d), size6, (int) ' ');
        java.lang.String str13 = recipe12.getName();
        double double14 = recipe12.getPrice();
        java.lang.Class<?> wildcardClass15 = recipe12.getClass();
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4300");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean4 = water0.equals((java.lang.Object) 30);
        java.lang.String str5 = water0.toString();
        java.lang.String str6 = water0.getName();
        java.lang.String str7 = water0.getName();
        java.lang.String str8 = water0.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe12 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (int) (short) 100, (int) '#');
        cafe12.printPendingOrders();
        cafe12.printPendingOrders();
        cafe12.printPendingOrders();
        java.lang.String str16 = cafe12.greeting();
        java.lang.String str17 = cafe12.getName();
        boolean boolean18 = water0.equals((java.lang.Object) cafe12);
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 10L);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk23 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        recipe21.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk23);
        java.lang.String str25 = recipe21.getName();
        java.lang.String str26 = recipe21.getName();
        boolean boolean27 = cafe12.addRecipe(recipe21);
        java.lang.String str28 = cafe12.getName();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Water [unit=ML, amount=30]" + "'", str5, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Water" + "'", str6, "Water");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water" + "'", str7, "Water");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str16, "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str17, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Cafe" + "'", str25, "Cafe");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Cafe" + "'", str26, "Cafe");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str28, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4301");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water(8);
        java.lang.String str2 = water1.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe5 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean6 = water1.equals((java.lang.Object) "Milk [unit=ML, amount=100, type=WHOLE]");
        java.lang.Object obj7 = null;
        boolean boolean8 = water1.equals(obj7);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water10 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 0);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size13 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe15 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=8, decaf=false]", (double) (-1), size13, 0);
        boolean boolean16 = water10.equals((java.lang.Object) "Coffee [unit=GR, amount=8, decaf=false]");
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException17 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray18 = recipeNotFoundException17.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException19 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException20 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray21 = recipeNotFoundException20.getSuppressed();
        recipeNotFoundException19.addSuppressed((java.lang.Throwable) recipeNotFoundException20);
        recipeNotFoundException17.addSuppressed((java.lang.Throwable) recipeNotFoundException19);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException24 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray25 = cafeOutOfCapacityException24.getSuppressed();
        recipeNotFoundException17.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException24);
        java.lang.Throwable[] throwableArray27 = recipeNotFoundException17.getSuppressed();
        boolean boolean28 = water10.equals((java.lang.Object) throwableArray27);
        boolean boolean29 = water1.equals((java.lang.Object) throwableArray27);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water [unit=ML, amount=8]" + "'", str2, "Water [unit=ML, amount=8]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + size13 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size13.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test4302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4302");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) '4', size2, 1);
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "", (double) 10L, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0");
        uk.ac.sheffield.com1003.cafe.Cafe cafe9 = new uk.ac.sheffield.com1003.cafe.Cafe();
        java.lang.String str10 = cafe9.getName();
        boolean boolean11 = recipe4.equals((java.lang.Object) cafe9);
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "", (double) (short) 0, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=0, decaf=false]]");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup17 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Welcome to Milk");
        boolean boolean18 = recipe4.equals((java.lang.Object) syrup17);
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Cafe" + "'", str10, "Cafe");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4303");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean4 = water0.equals((java.lang.Object) 30);
        java.lang.String str5 = water0.toString();
        java.lang.String str6 = water0.getName();
        java.lang.String str7 = water0.getName();
        java.lang.String str8 = water0.toString();
        java.lang.String str9 = water0.toString();
        java.lang.String str10 = water0.toString();
        int int11 = water0.getAmount();
        java.lang.String str12 = water0.toString();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException13 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException13.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException15 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException16.getSuppressed();
        recipeNotFoundException15.addSuppressed((java.lang.Throwable) recipeNotFoundException16);
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) recipeNotFoundException15);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException20 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray21 = cafeOutOfCapacityException20.getSuppressed();
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException20);
        java.lang.Throwable[] throwableArray23 = recipeNotFoundException13.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException24 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException24.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException26 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray27 = recipeNotFoundException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = recipeNotFoundException26.getSuppressed();
        recipeNotFoundException24.addSuppressed((java.lang.Throwable) recipeNotFoundException26);
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) recipeNotFoundException24);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException31 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException31.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException33 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException34 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray35 = recipeNotFoundException34.getSuppressed();
        recipeNotFoundException33.addSuppressed((java.lang.Throwable) recipeNotFoundException34);
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) recipeNotFoundException33);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException38 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray39 = cafeOutOfCapacityException38.getSuppressed();
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException38);
        java.lang.Throwable[] throwableArray41 = cafeOutOfCapacityException38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = cafeOutOfCapacityException38.getSuppressed();
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException38);
        java.lang.Throwable[] throwableArray44 = recipeNotFoundException13.getSuppressed();
        boolean boolean45 = water0.equals((java.lang.Object) recipeNotFoundException13);
        java.lang.String str46 = water0.getName();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Water [unit=ML, amount=30]" + "'", str5, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Water" + "'", str6, "Water");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water" + "'", str7, "Water");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Water [unit=ML, amount=30]" + "'", str9, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water [unit=ML, amount=30]" + "'", str10, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30 + "'", int11 == 30);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Water [unit=ML, amount=30]" + "'", str12, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Water" + "'", str46, "Water");
    }

    @Test
    public void test4304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4304");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe0.getMenu();
        java.lang.String str4 = cafe0.getName();
        java.lang.String str5 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size8, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk15 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe10.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk15);
        boolean boolean17 = cafe0.addRecipe(recipe10);
        uk.ac.sheffield.com1003.cafe.Order order18 = cafe0.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order19 = cafe0.serveOrder();
        cafe0.printPendingOrders();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee22 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str23 = coffee22.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type24 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean25 = coffee22.equals((java.lang.Object) type24);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException26 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException27 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray28 = recipeNotFoundException27.getSuppressed();
        recipeNotFoundException26.addSuppressed((java.lang.Throwable) recipeNotFoundException27);
        java.lang.Throwable[] throwableArray30 = recipeNotFoundException27.getSuppressed();
        java.lang.Throwable[] throwableArray31 = recipeNotFoundException27.getSuppressed();
        boolean boolean32 = coffee22.equals((java.lang.Object) throwableArray31);
        uk.ac.sheffield.com1003.cafe.Recipe recipe35 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (short) -1);
        boolean boolean36 = coffee22.equals((java.lang.Object) recipe35);
        boolean boolean37 = cafe0.addRecipe(recipe35);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Cafe" + "'", str4, "Cafe");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cafe" + "'", str5, "Cafe");
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(order18);
        org.junit.Assert.assertNull(order19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str23, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type24.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test4305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4305");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (int) (short) 100, (int) '#');
        cafe3.printPendingOrders();
        cafe3.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order6 = cafe3.serveOrder();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray7 = cafe3.getMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray8 = cafe3.getMenu();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = cafe3.placeOrder("Milk [unit=ML, amount=100, type=WHOLE]", "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Water [unit=ML, amount=0]; Paid: 100.0", (double) (-1L));
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(order6);
        org.junit.Assert.assertNotNull(recipeArray7);
        org.junit.Assert.assertNotNull(recipeArray8);
    }

    @Test
    public void test4306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4306");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean3 = recipe2.isReady();
        java.lang.String str4 = recipe2.getName();
        java.lang.String str5 = recipe2.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double12 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee15 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '4', true);
        boolean boolean17 = coffee15.equals((java.lang.Object) 10L);
        boolean boolean19 = coffee15.equals((java.lang.Object) (-1.0f));
        recipe8.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee15);
        double double21 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order25 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Water [unit=ML, amount=0]", (double) (byte) 100, "Coffee [unit=GR, amount=0, decaf=false]");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk27 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj28 = null;
        boolean boolean29 = milk27.equals(obj28);
        java.lang.String str30 = milk27.toString();
        java.lang.String str31 = milk27.getName();
        int int32 = milk27.getAmount();
        boolean boolean34 = milk27.equals((java.lang.Object) "Water [unit=ML, amount=100]");
        recipe8.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk27);
        java.lang.String str36 = milk27.toString();
        boolean boolean37 = recipe2.equals((java.lang.Object) milk27);
        uk.ac.sheffield.com1003.cafe.Cafe cafe38 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe38.printPendingOrders();
        java.lang.String str40 = cafe38.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size43 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe45 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size43, (int) (short) 10);
        java.lang.String str46 = recipe45.getName();
        boolean boolean47 = cafe38.addRecipe(recipe45);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray48 = cafe38.getMenu();
        java.lang.String str49 = cafe38.greeting();
        boolean boolean50 = recipe2.equals((java.lang.Object) cafe38);
        uk.ac.sheffield.com1003.cafe.Order order51 = cafe38.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order52 = cafe38.serveOrder();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water [unit=ML, amount=30]" + "'", str4, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Water [unit=ML, amount=30]" + "'", str5, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str30, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Milk" + "'", str31, "Milk");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str36, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Welcome to Cafe" + "'", str40, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size43 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size43.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(recipeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Welcome to Cafe" + "'", str49, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(order51);
        org.junit.Assert.assertNull(order52);
    }

    @Test
    public void test4307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4307");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean5 = recipe4.isReady();
        java.lang.String str6 = recipe4.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee7 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee7);
        boolean boolean9 = coffee1.equals((java.lang.Object) recipe4);
        double double10 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup12 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("");
        java.lang.String str13 = syrup12.toString();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException14 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray15 = recipeNotFoundException14.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = recipeNotFoundException16.getSuppressed();
        recipeNotFoundException14.addSuppressed((java.lang.Throwable) recipeNotFoundException16);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException20 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException21.getSuppressed();
        recipeNotFoundException20.addSuppressed((java.lang.Throwable) recipeNotFoundException21);
        recipeNotFoundException16.addSuppressed((java.lang.Throwable) recipeNotFoundException21);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException25 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray26 = recipeNotFoundException25.getSuppressed();
        recipeNotFoundException21.addSuppressed((java.lang.Throwable) recipeNotFoundException25);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException28 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray29 = recipeNotFoundException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = recipeNotFoundException28.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException31 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException31.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException33 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException34 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray35 = recipeNotFoundException34.getSuppressed();
        recipeNotFoundException33.addSuppressed((java.lang.Throwable) recipeNotFoundException34);
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) recipeNotFoundException33);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException38 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray39 = cafeOutOfCapacityException38.getSuppressed();
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException38);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException41 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray42 = recipeNotFoundException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = recipeNotFoundException41.getSuppressed();
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) recipeNotFoundException41);
        recipeNotFoundException28.addSuppressed((java.lang.Throwable) recipeNotFoundException41);
        recipeNotFoundException25.addSuppressed((java.lang.Throwable) recipeNotFoundException28);
        boolean boolean47 = syrup12.equals((java.lang.Object) recipeNotFoundException25);
        java.lang.String str48 = syrup12.getName();
        java.lang.String str49 = syrup12.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup12);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Water [unit=ML, amount=30]" + "'", str6, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Syrup [unit=ML, amount=10, flavour=]" + "'", str13, "Syrup [unit=ML, amount=10, flavour=]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Syrup" + "'", str48, "Syrup");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Syrup [unit=ML, amount=10, flavour=]" + "'", str49, "Syrup [unit=ML, amount=10, flavour=]");
    }

    @Test
    public void test4308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4308");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe1.printMenu();
        uk.ac.sheffield.com1003.cafe.Order order3 = cafe1.serveOrder();
        java.lang.String str4 = cafe1.greeting();
        uk.ac.sheffield.com1003.cafe.Order order5 = cafe1.serveOrder();
        org.junit.Assert.assertNull(order3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Welcome to " + "'", str4, "Welcome to ");
        org.junit.Assert.assertNull(order5);
    }

    @Test
    public void test4309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4309");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Order: ; For: Order: ; For: Coffee [unit=GR, amount=30, decaf=false]; Paid: 0.0; Paid: 10.0]", (int) (byte) 1, (int) 'a');
    }

    @Test
    public void test4310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4310");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Water", (int) (byte) 1, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        boolean boolean10 = recipe8.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Coffee [unit=GR, amount=0, decaf=false]", 0.0d);
        java.lang.String str17 = recipe8.getName();
        java.lang.String str18 = recipe8.getName();
        boolean boolean19 = cafe3.addRecipe(recipe8);
        java.lang.String str20 = recipe8.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe23 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order26 = new uk.ac.sheffield.com1003.cafe.Order(recipe23, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double27 = recipe23.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee29 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 10);
        recipe23.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee29);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit31 = coffee29.getUnit();
        recipe8.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee29);
        boolean boolean33 = recipe8.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk35 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(1);
        java.lang.String str36 = milk35.toString();
        recipe8.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk35);
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + unit31 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit31.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Milk [unit=ML, amount=1, type=WHOLE]" + "'", str36, "Milk [unit=ML, amount=1, type=WHOLE]");
    }

    @Test
    public void test4311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4311");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk9);
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0", (double) (-1), "Milk [unit=ML, amount=-1, type=WHOLE]");
        double double15 = recipe4.getPrice();
        java.lang.String str16 = recipe4.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type18 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk19 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1), type18);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk19);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type23 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk24 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100, type23);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk25 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ', type23);
        boolean boolean26 = milk19.equals((java.lang.Object) type23);
        java.lang.String str27 = milk19.toString();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type18.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type23.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Milk [unit=ML, amount=-1, type=SKIMMED]" + "'", str27, "Milk [unit=ML, amount=-1, type=SKIMMED]");
    }

    @Test
    public void test4312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4312");
        uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException tooManyIngredientsException0 = new uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException();
        java.lang.Throwable[] throwableArray1 = tooManyIngredientsException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water2 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int3 = water2.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException4 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException5.getSuppressed();
        recipeNotFoundException4.addSuppressed((java.lang.Throwable) recipeNotFoundException5);
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException5.getSuppressed();
        boolean boolean9 = water2.equals((java.lang.Object) recipeNotFoundException5);
        java.lang.Throwable[] throwableArray10 = recipeNotFoundException5.getSuppressed();
        tooManyIngredientsException0.addSuppressed((java.lang.Throwable) recipeNotFoundException5);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException14 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException15 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray16 = recipeNotFoundException15.getSuppressed();
        recipeNotFoundException14.addSuppressed((java.lang.Throwable) recipeNotFoundException15);
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException14);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException19 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray20 = cafeOutOfCapacityException19.getSuppressed();
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException19);
        tooManyIngredientsException0.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException23 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException24 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException24.getSuppressed();
        recipeNotFoundException23.addSuppressed((java.lang.Throwable) recipeNotFoundException24);
        java.lang.Throwable[] throwableArray27 = recipeNotFoundException24.getSuppressed();
        tooManyIngredientsException0.addSuppressed((java.lang.Throwable) recipeNotFoundException24);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException29 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray30 = recipeNotFoundException29.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException31 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = recipeNotFoundException31.getSuppressed();
        recipeNotFoundException29.addSuppressed((java.lang.Throwable) recipeNotFoundException31);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException35 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray36 = recipeNotFoundException35.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException37 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException38 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray39 = recipeNotFoundException38.getSuppressed();
        recipeNotFoundException37.addSuppressed((java.lang.Throwable) recipeNotFoundException38);
        recipeNotFoundException35.addSuppressed((java.lang.Throwable) recipeNotFoundException37);
        recipeNotFoundException29.addSuppressed((java.lang.Throwable) recipeNotFoundException35);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee44 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 10);
        java.lang.String str45 = coffee44.getName();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException46 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray47 = recipeNotFoundException46.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException48 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException49 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray50 = recipeNotFoundException49.getSuppressed();
        recipeNotFoundException48.addSuppressed((java.lang.Throwable) recipeNotFoundException49);
        recipeNotFoundException46.addSuppressed((java.lang.Throwable) recipeNotFoundException48);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException53 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray54 = cafeOutOfCapacityException53.getSuppressed();
        recipeNotFoundException46.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException53);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException56 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray57 = recipeNotFoundException56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = recipeNotFoundException56.getSuppressed();
        recipeNotFoundException46.addSuppressed((java.lang.Throwable) recipeNotFoundException56);
        java.lang.Throwable[] throwableArray60 = recipeNotFoundException56.getSuppressed();
        boolean boolean61 = coffee44.equals((java.lang.Object) recipeNotFoundException56);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException62 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray63 = recipeNotFoundException62.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException64 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException65 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray66 = recipeNotFoundException65.getSuppressed();
        recipeNotFoundException64.addSuppressed((java.lang.Throwable) recipeNotFoundException65);
        recipeNotFoundException62.addSuppressed((java.lang.Throwable) recipeNotFoundException64);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException69 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray70 = cafeOutOfCapacityException69.getSuppressed();
        recipeNotFoundException62.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException69);
        java.lang.Throwable[] throwableArray72 = cafeOutOfCapacityException69.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException73 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray74 = recipeNotFoundException73.getSuppressed();
        java.lang.Throwable[] throwableArray75 = recipeNotFoundException73.getSuppressed();
        cafeOutOfCapacityException69.addSuppressed((java.lang.Throwable) recipeNotFoundException73);
        recipeNotFoundException56.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException69);
        recipeNotFoundException35.addSuppressed((java.lang.Throwable) recipeNotFoundException56);
        java.lang.Throwable[] throwableArray79 = recipeNotFoundException56.getSuppressed();
        tooManyIngredientsException0.addSuppressed((java.lang.Throwable) recipeNotFoundException56);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30 + "'", int3 == 30);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Coffee" + "'", str45, "Coffee");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test4313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4313");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type1 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk2 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100, type1);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit3 = milk2.getUnit();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        double double9 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "", (double) (short) 10, "Water [unit=ML, amount=30]");
        boolean boolean17 = milk2.equals((java.lang.Object) (short) 10);
        java.lang.String str18 = milk2.toString();
        java.lang.String str19 = milk2.toString();
        org.junit.Assert.assertTrue("'" + type1 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type1.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
        org.junit.Assert.assertTrue("'" + unit3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Milk [unit=ML, amount=100, type=SEMI]" + "'", str18, "Milk [unit=ML, amount=100, type=SEMI]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Milk [unit=ML, amount=100, type=SEMI]" + "'", str19, "Milk [unit=ML, amount=100, type=SEMI]");
    }

    @Test
    public void test4314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4314");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size2, (int) '4');
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", 0.0d);
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=SKIMMED]; Paid: 0.0", (double) (byte) 10, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: 1.0; Paid: 30.0");
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test4315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4315");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Water [unit=ML, amount=30]", (int) '#', (int) (byte) 1);
        java.lang.String str4 = cafe3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water [unit=ML, amount=30]" + "'", str4, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4316");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size12, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size12, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (byte) 100, size12, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=35, type=WHOLE]", (double) 1.0f, size12, (int) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=10, type=SEMI]", (double) (-1L), size12, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe24 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Coffee [unit=GR, amount=1, decaf=false]", (double) (short) 10, size12, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
    }

    @Test
    public void test4317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4317");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size12, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size12, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (byte) 100, size12, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=35, type=WHOLE]", (double) 1.0f, size12, (int) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=10, type=SEMI]", (double) (-1L), size12, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe24 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Water; For: Syrup; Paid: -1.0", (double) (short) 100, size12, 30);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
    }

    @Test
    public void test4318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4318");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean4 = water0.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit5 = water0.getUnit();
        int int6 = water0.getAmount();
        java.lang.String str7 = water0.getName();
        java.lang.String str8 = water0.getName();
        java.lang.String str9 = water0.toString();
        java.lang.String str10 = water0.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe12 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Cafe cafe14 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe17 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean18 = cafe14.addRecipe(recipe17);
        boolean boolean19 = cafe12.addRecipe(recipe17);
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe17, "Coffee [unit=GR, amount=8, decaf=false]", 0.0d, "Order: ; For: Water; Paid: 1.0");
        boolean boolean24 = water0.equals((java.lang.Object) recipe17);
        uk.ac.sheffield.com1003.cafe.Order order28 = new uk.ac.sheffield.com1003.cafe.Order(recipe17, "Welcome to Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0", (double) (byte) 10, "Welcome to Welcome to hi!");
        order28.serve();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + unit5 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit5.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 30 + "'", int6 == 30);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water" + "'", str7, "Water");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water" + "'", str8, "Water");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Water [unit=ML, amount=30]" + "'", str9, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water [unit=ML, amount=30]" + "'", str10, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4319");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup", (int) (short) 10, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray4 = cafe3.getMenu();
        java.lang.String str5 = cafe3.greeting();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = cafe3.placeOrder("Order: Coffee [unit=GR, amount=8, decaf=false]; For: Coffee [unit=GR, amount=32, decaf=false]; Paid: 52.0", "Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=32, type=ALMOND]; Paid: 1.0]", 1.0d);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(recipeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Welcome to Syrup" + "'", str5, "Welcome to Syrup");
    }

    @Test
    public void test4320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4320");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean4 = water0.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit5 = water0.getUnit();
        int int6 = water0.getAmount();
        java.lang.String str7 = water0.getName();
        java.lang.String str8 = water0.getName();
        java.lang.String str9 = water0.toString();
        java.lang.String str10 = water0.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe12 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to hi!");
        cafe12.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray14 = cafe12.getMenu();
        boolean boolean15 = water0.equals((java.lang.Object) recipeArray14);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type17 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk18 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1), type17);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException19 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray20 = recipeNotFoundException19.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException22 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray23 = recipeNotFoundException22.getSuppressed();
        recipeNotFoundException21.addSuppressed((java.lang.Throwable) recipeNotFoundException22);
        recipeNotFoundException19.addSuppressed((java.lang.Throwable) recipeNotFoundException21);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException26 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray27 = cafeOutOfCapacityException26.getSuppressed();
        recipeNotFoundException19.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException26);
        java.lang.Throwable[] throwableArray29 = cafeOutOfCapacityException26.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException30 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray31 = recipeNotFoundException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException30.getSuppressed();
        cafeOutOfCapacityException26.addSuppressed((java.lang.Throwable) recipeNotFoundException30);
        java.lang.Throwable[] throwableArray34 = cafeOutOfCapacityException26.getSuppressed();
        boolean boolean35 = milk18.equals((java.lang.Object) cafeOutOfCapacityException26);
        boolean boolean36 = water0.equals((java.lang.Object) boolean35);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + unit5 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit5.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 30 + "'", int6 == 30);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water" + "'", str7, "Water");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water" + "'", str8, "Water");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Water [unit=ML, amount=30]" + "'", str9, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water [unit=ML, amount=30]" + "'", str10, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertNotNull(recipeArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type17.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test4321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4321");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe1.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe1.getMenu();
        uk.ac.sheffield.com1003.cafe.Cafe cafe5 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Cafe cafe7 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean11 = cafe7.addRecipe(recipe10);
        boolean boolean12 = cafe5.addRecipe(recipe10);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Coffee [unit=GR, amount=8, decaf=false]", 0.0d, "Order: ; For: Water; Paid: 1.0");
        boolean boolean17 = cafe1.addRecipe(recipe10);
        uk.ac.sheffield.com1003.cafe.Order order18 = cafe1.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order19 = cafe1.serveOrder();
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(order18);
        org.junit.Assert.assertNull(order19);
    }

    @Test
    public void test4322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4322");
        // The following exception was thrown during execution in test generation
        try {
            uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("", 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4323");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=32, type=SKIMMED]", 30, 0);
        cafe3.printMenu();
    }

    @Test
    public void test4324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4324");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type2 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type2);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) -1, type2);
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type2.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
    }

    @Test
    public void test4325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4325");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean4 = water0.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException5.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException7 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = recipeNotFoundException7.getSuppressed();
        recipeNotFoundException5.addSuppressed((java.lang.Throwable) recipeNotFoundException7);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException11 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        recipeNotFoundException11.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException16.getSuppressed();
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException16);
        boolean boolean19 = water0.equals((java.lang.Object) recipeNotFoundException12);
        java.lang.String str20 = recipeNotFoundException12.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str20, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4326");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=SKIMMED]", (double) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order5 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Milk [unit=ML, amount=52, type=SEMI]", (double) 52);
    }

    @Test
    public void test4327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4327");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray2 = cafe1.getMenu();
        uk.ac.sheffield.com1003.cafe.Order order3 = cafe1.serveOrder();
        java.lang.Class<?> wildcardClass4 = cafe1.getClass();
        org.junit.Assert.assertNotNull(recipeArray2);
        org.junit.Assert.assertNull(order3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test4328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4328");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean15 = recipe4.equals((java.lang.Object) 10);
        double double16 = recipe4.getPrice();
        boolean boolean17 = recipe4.isReady();
        java.lang.String str18 = recipe4.getName();
        double double19 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water20 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str21 = water20.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk23 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean24 = water20.equals((java.lang.Object) 30);
        java.lang.String str25 = water20.toString();
        java.lang.String str26 = water20.getName();
        java.lang.String str27 = water20.getName();
        java.lang.String str28 = water20.toString();
        java.lang.String str29 = water20.toString();
        int int30 = water20.getAmount();
        java.lang.String str31 = water20.getName();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water20);
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Water" + "'", str21, "Water");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Water [unit=ML, amount=30]" + "'", str25, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Water" + "'", str26, "Water");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Water" + "'", str27, "Water");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Water [unit=ML, amount=30]" + "'", str28, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Water [unit=ML, amount=30]" + "'", str29, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 30 + "'", int30 == 30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Water" + "'", str31, "Water");
    }

    @Test
    public void test4329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4329");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        java.lang.String str1 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe2 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe2.printPendingOrders();
        java.lang.String str4 = cafe2.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size7 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe9 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size7, (int) (short) 10);
        java.lang.String str10 = recipe9.getName();
        boolean boolean11 = cafe2.addRecipe(recipe9);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size14 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size14, (int) '4');
        boolean boolean17 = cafe2.addRecipe(recipe16);
        cafe2.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size21 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe23 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size21, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order26 = new uk.ac.sheffield.com1003.cafe.Order(recipe23, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee27 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str28 = coffee27.toString();
        boolean boolean29 = recipe23.equals((java.lang.Object) str28);
        java.lang.String str30 = recipe23.getName();
        boolean boolean31 = cafe2.addRecipe(recipe23);
        uk.ac.sheffield.com1003.cafe.Order order35 = new uk.ac.sheffield.com1003.cafe.Order(recipe23, "uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException", (double) '#', "Milk [unit=ML, amount=1, type=WHOLE]");
        boolean boolean36 = cafe0.addRecipe(recipe23);
        java.lang.String str37 = recipe23.getName();
        double double38 = recipe23.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order42 = new uk.ac.sheffield.com1003.cafe.Order(recipe23, "Welcome to Milk", (double) (byte) 1, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException");
        uk.ac.sheffield.com1003.cafe.Order order46 = new uk.ac.sheffield.com1003.cafe.Order(recipe23, "Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=30]]", (double) (-1), "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 10.0");
        order46.serve();
        order46.serve();
        java.lang.String str49 = order46.toString();
        java.lang.String str50 = order46.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Cafe" + "'", str1, "Cafe");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Welcome to Cafe" + "'", str4, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size7 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size7.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + size14 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size14.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + size21 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size21.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str28, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Order: ; For: Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=30]]; Paid: -1.0" + "'", str49, "Order: ; For: Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=30]]; Paid: -1.0");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Order: ; For: Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=30]]; Paid: -1.0" + "'", str50, "Order: ; For: Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=30]]; Paid: -1.0");
    }

    @Test
    public void test4330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4330");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str3 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type4 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean5 = coffee2.equals((java.lang.Object) type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 100, type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk7 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ', type4);
        java.lang.String str8 = milk7.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Milk [unit=ML, amount=32, type=SKIMMED]" + "'", str8, "Milk [unit=ML, amount=32, type=SKIMMED]");
    }

    @Test
    public void test4331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4331");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Plain]");
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) 1.0f);
        boolean boolean5 = cafe1.addRecipe(recipe4);
        java.lang.Class<?> wildcardClass6 = cafe1.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test4332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4332");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type1 = null;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk2 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 100, type1);
        int int3 = milk2.getAmount();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj6 = null;
        boolean boolean7 = milk5.equals(obj6);
        java.lang.String str8 = milk5.toString();
        java.lang.String str9 = milk5.getName();
        java.lang.String str10 = milk5.toString();
        java.lang.String str11 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit12 = milk5.getUnit();
        boolean boolean13 = milk2.equals((java.lang.Object) milk5);
        uk.ac.sheffield.com1003.cafe.Cafe cafe14 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe14.printPendingOrders();
        java.lang.String str16 = cafe14.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size19 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size19, (int) (short) 10);
        java.lang.String str22 = recipe21.getName();
        boolean boolean23 = cafe14.addRecipe(recipe21);
        cafe14.printMenu();
        cafe14.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray26 = cafe14.getMenu();
        java.lang.String str27 = cafe14.getName();
        boolean boolean28 = milk2.equals((java.lang.Object) cafe14);
        java.lang.String str29 = cafe14.greeting();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str8, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Milk" + "'", str9, "Milk");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str10, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str11, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + unit12 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit12.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Welcome to Cafe" + "'", str16, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size19 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size19.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(recipeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Cafe" + "'", str27, "Cafe");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Welcome to Cafe" + "'", str29, "Welcome to Cafe");
    }

    @Test
    public void test4333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4333");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0", (int) (byte) 100, 10);
    }

    @Test
    public void test4334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4334");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Order: ; For: ; Paid: 10.0", (int) '#', (int) '#');
        cafe3.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray5 = cafe3.getMenu();
        org.junit.Assert.assertNotNull(recipeArray5);
    }

    @Test
    public void test4335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4335");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: ; Paid: 10.0");
        cafe1.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe recipe3 = null;
        boolean boolean4 = cafe1.addRecipe(recipe3);
        java.lang.String str5 = cafe1.getName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Order: ; For: ; Paid: 10.0" + "'", str5, "Order: ; For: ; Paid: 10.0");
    }

    @Test
    public void test4336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4336");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (int) (short) 100, (int) '#');
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray4 = cafe3.getMenu();
        org.junit.Assert.assertNotNull(recipeArray4);
    }

    @Test
    public void test4337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4337");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size6, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size6, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Water [unit=ML, amount=30]; For: Welcome to Cafe; Paid: 0.0", 0.0d, size6, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe12, "Order: Welcome to Welcome to Cafe; For: Water [unit=ML, amount=10]; Paid: 1.0", (double) '4');
        order15.serve();
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
    }

    @Test
    public void test4338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4338");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100);
        int int2 = milk1.getAmount();
        java.lang.Object obj3 = null;
        boolean boolean4 = milk1.equals(obj3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test4339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4339");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order5 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Cafe", (double) 0.0f, "Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup11 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("");
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup11);
        uk.ac.sheffield.com1003.cafe.ingredients.Ingredient ingredient13 = null;
        recipe2.addIngredient(ingredient13);
        double double15 = recipe2.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order18 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Milk [unit=ML, amount=-1, type=SKIMMED]", 1.0d);
        order18.serve();
        order18.serve();
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test4340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4340");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size6, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size6, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=1, type=WHOLE]", (double) 32, size6, 35);
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
    }

    @Test
    public void test4341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4341");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 0, true);
        uk.ac.sheffield.com1003.cafe.Cafe cafe4 = new uk.ac.sheffield.com1003.cafe.Cafe("hi!");
        java.lang.String str5 = cafe4.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size8, (int) (short) 10);
        boolean boolean12 = recipe10.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "hi!", (double) 0L);
        boolean boolean16 = cafe4.addRecipe(recipe10);
        java.lang.String str17 = cafe4.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray18 = cafe4.getMenu();
        boolean boolean19 = coffee2.equals((java.lang.Object) recipeArray18);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order25 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order29 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Cafe", (double) 0.0f, "Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Order order33 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Water", (double) 100.0f, "Milk");
        uk.ac.sheffield.com1003.cafe.Order order36 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Syrup [unit=ML, amount=10, flavour=Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0]", (double) 30);
        boolean boolean37 = recipe22.isReady();
        boolean boolean38 = coffee2.equals((java.lang.Object) recipe22);
        java.lang.String str39 = coffee2.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Welcome to hi!" + "'", str17, "Welcome to hi!");
        org.junit.Assert.assertNotNull(recipeArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Coffee [unit=GR, amount=0, decaf=true]" + "'", str39, "Coffee [unit=GR, amount=0, decaf=true]");
    }

    @Test
    public void test4342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4342");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size7 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe9 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=8, decaf=false]", (double) (-1), size7, 0);
        boolean boolean10 = cafe0.addRecipe(recipe9);
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean21 = recipe13.isReady();
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Order: ; For: Water; Paid: 1.0", (double) (byte) 100);
        boolean boolean25 = cafe0.addRecipe(recipe13);
        uk.ac.sheffield.com1003.cafe.Order order29 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Coffee [unit=GR, amount=100, decaf=true]", (-1.0d), "Order: ; For: Water; Paid: 1.0");
        org.junit.Assert.assertTrue("'" + size7 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size7.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test4343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4343");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        java.lang.String str2 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe1.getMenu();
        java.lang.String str4 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray5 = cafe1.getMenu();
        // The following exception was thrown during execution in test generation
        try {
            cafe1.removeRecipe("Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Water]; Paid: 0.0");
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Welcome to Cafe" + "'", str4, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray5);
    }

    @Test
    public void test4344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4344");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str3 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type4 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean5 = coffee2.equals((java.lang.Object) type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type4);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk7 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1), type4);
        java.lang.String str8 = milk7.toString();
        java.lang.String str9 = milk7.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Milk [unit=ML, amount=-1, type=SKIMMED]" + "'", str8, "Milk [unit=ML, amount=-1, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Milk [unit=ML, amount=-1, type=SKIMMED]" + "'", str9, "Milk [unit=ML, amount=-1, type=SKIMMED]");
    }

    @Test
    public void test4345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4345");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Welcome to Water; Paid: 1.0", (int) (byte) 100, (int) (short) 0);
    }

    @Test
    public void test4346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4346");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water2 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 0);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee6 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str7 = coffee6.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type8 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean9 = coffee6.equals((java.lang.Object) type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk11 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '4', type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk12 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type8);
        boolean boolean13 = water2.equals((java.lang.Object) type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 0, type8);
        java.lang.String str15 = milk14.toString();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size18 = null;
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) (short) 1, size18, 8);
        boolean boolean21 = milk14.equals((java.lang.Object) recipe20);
        double double22 = recipe20.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str7, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type8.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Milk [unit=ML, amount=0, type=SKIMMED]" + "'", str15, "Milk [unit=ML, amount=0, type=SKIMMED]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test4347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4347");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean4 = water0.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit5 = water0.getUnit();
        int int6 = water0.getAmount();
        java.lang.String str7 = water0.getName();
        java.lang.String str8 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk11 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type12 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean13 = milk11.equals((java.lang.Object) type12);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) -1, type12);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit15 = milk14.getUnit();
        boolean boolean16 = water0.equals((java.lang.Object) unit15);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup17 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup();
        java.lang.String str18 = syrup17.toString();
        java.lang.String str19 = syrup17.toString();
        java.lang.String str20 = syrup17.toString();
        java.lang.String str21 = syrup17.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit22 = syrup17.getUnit();
        boolean boolean23 = water0.equals((java.lang.Object) syrup17);
        java.lang.String str24 = syrup17.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + unit5 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit5.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 30 + "'", int6 == 30);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water" + "'", str7, "Water");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water" + "'", str8, "Water");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type12.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + unit15 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit15.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Plain]" + "'", str18, "Syrup [unit=ML, amount=10, flavour=Plain]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Plain]" + "'", str19, "Syrup [unit=ML, amount=10, flavour=Plain]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Plain]" + "'", str20, "Syrup [unit=ML, amount=10, flavour=Plain]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Plain]" + "'", str21, "Syrup [unit=ML, amount=10, flavour=Plain]");
        org.junit.Assert.assertTrue("'" + unit22 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit22.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Plain]" + "'", str24, "Syrup [unit=ML, amount=10, flavour=Plain]");
    }

    @Test
    public void test4348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4348");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (int) (short) 100, (int) '#');
        cafe3.printMenu();
        uk.ac.sheffield.com1003.cafe.Cafe cafe8 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (int) ' ', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size11 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size11, (int) '4');
        boolean boolean15 = recipe13.equals((java.lang.Object) 10.0d);
        double double16 = recipe13.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean21 = cafe8.addRecipe(recipe13);
        boolean boolean22 = cafe3.addRecipe(recipe13);
        java.lang.String str23 = cafe3.greeting();
        uk.ac.sheffield.com1003.cafe.Order order24 = cafe3.serveOrder();
        org.junit.Assert.assertTrue("'" + size11 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size11.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str23, "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        org.junit.Assert.assertNull(order24);
    }

    @Test
    public void test4349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4349");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1), type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(32, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '4', type3);
        java.lang.Class<?> wildcardClass7 = milk6.getClass();
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test4350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4350");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = null;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=30, type=WHOLE]", (double) (short) 10, size2, (int) '#');
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ');
        uk.ac.sheffield.com1003.cafe.ingredients.Water water7 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str8 = water7.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean11 = water7.equals((java.lang.Object) 30);
        java.lang.String str12 = water7.toString();
        java.lang.String str13 = water7.getName();
        boolean boolean15 = water7.equals((java.lang.Object) (byte) -1);
        java.lang.String str16 = water7.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit17 = water7.getUnit();
        boolean boolean18 = milk6.equals((java.lang.Object) water7);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water7);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit20 = water7.getUnit();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water" + "'", str8, "Water");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Water [unit=ML, amount=30]" + "'", str12, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Water" + "'", str13, "Water");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Water" + "'", str16, "Water");
        org.junit.Assert.assertTrue("'" + unit17 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit17.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + unit20 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit20.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
    }

    @Test
    public void test4351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4351");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Water; Paid: 1.0", (double) (byte) 100);
        boolean boolean3 = recipe2.isReady();
        double double4 = recipe2.getPrice();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
    }

    @Test
    public void test4352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4352");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee3 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean7 = recipe6.isReady();
        java.lang.String str8 = recipe6.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee9 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe6.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee9);
        boolean boolean11 = coffee3.equals((java.lang.Object) recipe6);
        boolean boolean12 = water1.equals((java.lang.Object) recipe6);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit13 = water1.getUnit();
        java.lang.String str14 = water1.toString();
        java.lang.String str15 = water1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee18 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(0, false);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup20 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Water");
        java.lang.String str21 = syrup20.toString();
        java.lang.String str22 = syrup20.toString();
        boolean boolean23 = coffee18.equals((java.lang.Object) syrup20);
        java.lang.String str24 = coffee18.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe28 = new uk.ac.sheffield.com1003.cafe.Cafe("Water", (int) (byte) 1, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray29 = cafe28.getMenu();
        boolean boolean30 = coffee18.equals((java.lang.Object) cafe28);
        java.lang.String str31 = coffee18.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit32 = coffee18.getUnit();
        boolean boolean33 = water1.equals((java.lang.Object) coffee18);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + unit13 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit13.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=100]" + "'", str14, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Water [unit=ML, amount=100]" + "'", str15, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Water]" + "'", str21, "Syrup [unit=ML, amount=10, flavour=Water]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Water]" + "'", str22, "Syrup [unit=ML, amount=10, flavour=Water]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str24, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertNotNull(recipeArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Coffee" + "'", str31, "Coffee");
        org.junit.Assert.assertTrue("'" + unit32 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit32.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test4353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4353");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.toString();
        boolean boolean3 = water0.equals((java.lang.Object) "Milk [unit=ML, amount=35, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water [unit=ML, amount=30]" + "'", str1, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test4354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4354");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) -1);
        java.lang.String str2 = coffee1.getName();
        java.lang.String str3 = coffee1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee" + "'", str2, "Coffee");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=-1, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=-1, decaf=false]");
    }

    @Test
    public void test4355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4355");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj5 = null;
        boolean boolean6 = milk4.equals(obj5);
        java.lang.String str7 = milk4.toString();
        java.lang.String str8 = milk4.getName();
        java.lang.String str9 = milk4.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee11 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str12 = coffee11.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type13 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean14 = coffee11.equals((java.lang.Object) type13);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk15 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type13);
        boolean boolean16 = milk4.equals((java.lang.Object) type13);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk17 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 0, type13);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk18 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(1, type13);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk19 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type13);
        uk.ac.sheffield.com1003.cafe.Cafe cafe23 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=35, type=SEMI]", (int) (byte) 0, (int) '4');
        boolean boolean24 = milk19.equals((java.lang.Object) "Milk [unit=ML, amount=35, type=SEMI]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str7, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Milk" + "'", str8, "Milk");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str9, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str12, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type13.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4356");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee0 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str1 = coffee0.toString();
        java.lang.String str2 = coffee0.toString();
        java.lang.String str3 = coffee0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj6 = null;
        boolean boolean7 = milk5.equals(obj6);
        java.lang.String str8 = milk5.toString();
        java.lang.String str9 = milk5.getName();
        java.lang.String str10 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe14 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (int) (short) 100, (int) '#');
        cafe14.printPendingOrders();
        cafe14.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order17 = cafe14.serveOrder();
        boolean boolean18 = milk5.equals((java.lang.Object) order17);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size21 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe23 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size21, (int) (short) 10);
        double double24 = recipe23.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order27 = new uk.ac.sheffield.com1003.cafe.Order(recipe23, "Welcome to Cafe", (double) 10);
        boolean boolean28 = milk5.equals((java.lang.Object) recipe23);
        uk.ac.sheffield.com1003.cafe.Cafe cafe29 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe29.printPendingOrders();
        java.lang.String str31 = cafe29.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size34 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe36 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size34, (int) (short) 10);
        java.lang.String str37 = recipe36.getName();
        boolean boolean38 = cafe29.addRecipe(recipe36);
        cafe29.printMenu();
        cafe29.printPendingOrders();
        boolean boolean41 = milk5.equals((java.lang.Object) cafe29);
        boolean boolean42 = coffee0.equals((java.lang.Object) cafe29);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray43 = cafe29.getMenu();
        uk.ac.sheffield.com1003.cafe.Cafe cafe47 = new uk.ac.sheffield.com1003.cafe.Cafe("Water", (int) (byte) 1, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size50 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe52 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size50, (int) (short) 10);
        boolean boolean54 = recipe52.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order57 = new uk.ac.sheffield.com1003.cafe.Order(recipe52, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order60 = new uk.ac.sheffield.com1003.cafe.Order(recipe52, "Coffee [unit=GR, amount=0, decaf=false]", 0.0d);
        java.lang.String str61 = recipe52.getName();
        java.lang.String str62 = recipe52.getName();
        boolean boolean63 = cafe47.addRecipe(recipe52);
        boolean boolean64 = cafe29.addRecipe(recipe52);
        cafe29.printPendingOrders();
        // The following exception was thrown during execution in test generation
        try {
            cafe29.removeRecipe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: 10.0");
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str1, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee" + "'", str3, "Coffee");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str8, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Milk" + "'", str9, "Milk");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str10, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertNull(order17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + size21 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size21.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Welcome to Cafe" + "'", str31, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size34 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size34.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(recipeArray43);
        org.junit.Assert.assertTrue("'" + size50 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size50.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test4357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4357");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) 'a');
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit2 = coffee1.getUnit();
        uk.ac.sheffield.com1003.cafe.Cafe cafe4 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=100, type=WHOLE]");
        boolean boolean5 = coffee1.equals((java.lang.Object) cafe4);
        java.lang.String str6 = coffee1.getName();
        java.lang.String str7 = coffee1.toString();
        org.junit.Assert.assertTrue("'" + unit2 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit2.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Coffee" + "'", str6, "Coffee");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Coffee [unit=GR, amount=97, decaf=false]" + "'", str7, "Coffee [unit=GR, amount=97, decaf=false]");
    }

    @Test
    public void test4358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4358");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 10L);
        double double3 = recipe2.getPrice();
        boolean boolean4 = recipe2.isReady();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test4359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4359");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size4, (int) '4');
        boolean boolean8 = recipe6.equals((java.lang.Object) 10.0d);
        boolean boolean9 = milk1.equals((java.lang.Object) recipe6);
        java.lang.String str10 = recipe6.getName();
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe6, "Syrup [unit=ML, amount=10, flavour=Plain]", (-1.0d), "Coffee [unit=GR, amount=1, decaf=false]");
        order14.printReceipt();
        order14.serve();
        order14.printReceipt();
        java.lang.String str18 = order14.toString();
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water [unit=ML, amount=30]" + "'", str10, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0" + "'", str18, "Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0");
    }

    @Test
    public void test4360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4360");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk2 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean4 = milk2.equals((java.lang.Object) type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type3);
        java.lang.String str6 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee8 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str9 = coffee8.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type10 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean11 = coffee8.equals((java.lang.Object) type10);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk12 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type10);
        java.lang.String str13 = milk12.getName();
        java.lang.String str14 = milk12.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe16 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe16.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray18 = cafe16.getMenu();
        java.lang.String str19 = cafe16.getName();
        java.lang.String str20 = cafe16.getName();
        boolean boolean21 = milk12.equals((java.lang.Object) cafe16);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size24 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size24, (int) '4');
        boolean boolean28 = recipe26.equals((java.lang.Object) 10.0d);
        java.lang.String str29 = recipe26.getName();
        boolean boolean31 = recipe26.equals((java.lang.Object) "Coffee");
        boolean boolean32 = milk12.equals((java.lang.Object) recipe26);
        boolean boolean33 = milk5.equals((java.lang.Object) milk12);
        java.lang.String str34 = milk12.toString();
        int int35 = milk12.getAmount();
        java.lang.String str36 = milk12.getName();
        java.lang.String str37 = milk12.toString();
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk [unit=ML, amount=0, type=SKIMMED]" + "'", str6, "Milk [unit=ML, amount=0, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str9, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type10.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Milk" + "'", str13, "Milk");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str14, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertNotNull(recipeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + size24 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size24.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Water [unit=ML, amount=30]" + "'", str29, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str34, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Milk" + "'", str36, "Milk");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str37, "Milk [unit=ML, amount=10, type=SKIMMED]");
    }

    @Test
    public void test4361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4361");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean4 = water0.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException5.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException7 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = recipeNotFoundException7.getSuppressed();
        recipeNotFoundException5.addSuppressed((java.lang.Throwable) recipeNotFoundException7);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException11 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        recipeNotFoundException11.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException16.getSuppressed();
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException16);
        boolean boolean19 = water0.equals((java.lang.Object) recipeNotFoundException12);
        java.lang.String str20 = water0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Water [unit=ML, amount=30]" + "'", str20, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4362");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(1);
        int int2 = coffee1.getAmount();
        java.lang.Object obj3 = null;
        boolean boolean4 = coffee1.equals(obj3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test4363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4363");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = null;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: ; For: Coffee [unit=GR, amount=10, decaf=false]; Paid: 35.0]", (-1.0d), size2, (int) 'a');
    }

    @Test
    public void test4364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4364");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) '4', size8, 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]", (double) 'a', size8, (int) (short) 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]", (double) (byte) 100, size8, (int) (short) 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", (double) 10, size8, (int) (short) 0);
        uk.ac.sheffield.com1003.cafe.Cafe cafe17 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe17.printPendingOrders();
        java.lang.String str19 = cafe17.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size22 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe24 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size22, (int) (short) 10);
        java.lang.String str25 = recipe24.getName();
        boolean boolean26 = cafe17.addRecipe(recipe24);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray27 = cafe17.getMenu();
        cafe17.printMenu();
        java.lang.String str29 = cafe17.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray30 = cafe17.getMenu();
        boolean boolean31 = recipe16.equals((java.lang.Object) recipeArray30);
        java.lang.String str32 = recipe16.getName();
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Welcome to Cafe" + "'", str19, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size22 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size22.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(recipeArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Welcome to Cafe" + "'", str29, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Welcome to Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0" + "'", str32, "Welcome to Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0");
    }

    @Test
    public void test4365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4365");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size4, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Plain]", (double) '#', size4, 0);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water9 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str10 = water9.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk12 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean13 = water9.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit14 = water9.getUnit();
        int int15 = water9.getAmount();
        boolean boolean16 = recipe8.equals((java.lang.Object) water9);
        double double17 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Welcome to Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0", (double) 100.0f);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size29 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe31 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size29, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe33 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: ; Paid: 10.0", (double) 0, size29, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe35 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (byte) 100, size29, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe37 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]", (double) 10L, size29, (int) (short) 0);
        boolean boolean38 = recipe8.equals((java.lang.Object) "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water" + "'", str10, "Water");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + unit14 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit14.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 30 + "'", int15 == 30);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + size29 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size29.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4366");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: Order: Water [unit=ML, amount=30]; For: Order: ; For: Water; Paid: 1.0; Paid: 1.0; Paid: 8.0");
    }

    @Test
    public void test4367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4367");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 10);
        java.lang.String str2 = coffee1.getName();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException6 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray7 = recipeNotFoundException6.getSuppressed();
        recipeNotFoundException5.addSuppressed((java.lang.Throwable) recipeNotFoundException6);
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException5);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException10 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray11 = cafeOutOfCapacityException10.getSuppressed();
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException10);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException13 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = recipeNotFoundException13.getSuppressed();
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException13);
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException13.getSuppressed();
        boolean boolean18 = coffee1.equals((java.lang.Object) recipeNotFoundException13);
        java.lang.String str19 = coffee1.toString();
        java.lang.String str20 = coffee1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water22 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 10);
        boolean boolean23 = coffee1.equals((java.lang.Object) (byte) 10);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee" + "'", str2, "Coffee");
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Coffee [unit=GR, amount=10, decaf=false]" + "'", str19, "Coffee [unit=GR, amount=10, decaf=false]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Coffee [unit=GR, amount=10, decaf=false]" + "'", str20, "Coffee [unit=GR, amount=10, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4368");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("");
        int int2 = syrup1.getAmount();
        java.lang.String str3 = syrup1.toString();
        java.lang.String str4 = syrup1.toString();
        java.lang.String str5 = syrup1.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Syrup [unit=ML, amount=10, flavour=]" + "'", str3, "Syrup [unit=ML, amount=10, flavour=]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Syrup [unit=ML, amount=10, flavour=]" + "'", str4, "Syrup [unit=ML, amount=10, flavour=]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Syrup [unit=ML, amount=10, flavour=]" + "'", str5, "Syrup [unit=ML, amount=10, flavour=]");
    }

    @Test
    public void test4369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4369");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size12, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Water", (double) 1, size12, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0]", 0.0d, size12, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Coffee [unit=GR, amount=10, decaf=false]; Paid: 35.0", 0.0d, size12, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Syrup [unit=ML, amount=10, flavour=Plain]", (double) 100.0f, size12, (int) 'a');
        uk.ac.sheffield.com1003.cafe.Recipe recipe24 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) 'a', size12, 0);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
    }

    @Test
    public void test4370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4370");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: 1.0");
        int int2 = syrup1.getAmount();
        java.lang.String str3 = syrup1.getName();
        java.lang.String str4 = syrup1.getName();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Syrup" + "'", str3, "Syrup");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Syrup" + "'", str4, "Syrup");
    }

    @Test
    public void test4371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4371");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: hi!; Paid: 0.0", 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Syrup [unit=ML, amount=10, flavour=]", (double) 10L, "Syrup [unit=ML, amount=10, flavour=Water]");
        uk.ac.sheffield.com1003.cafe.Cafe cafe10 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]", 30, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean14 = cafe10.addRecipe(recipe13);
        uk.ac.sheffield.com1003.cafe.Order order17 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", (double) (short) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup19 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Milk [unit=ML, amount=30, type=WHOLE]");
        recipe13.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup19);
        boolean boolean21 = recipe2.equals((java.lang.Object) recipe13);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Welcome to Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]", 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4372");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee0 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str1 = coffee0.toString();
        int int2 = coffee0.getAmount();
        java.lang.String str3 = coffee0.toString();
        java.lang.String str4 = coffee0.toString();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException5.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException7 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = recipeNotFoundException7.getSuppressed();
        recipeNotFoundException5.addSuppressed((java.lang.Throwable) recipeNotFoundException7);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException11 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        recipeNotFoundException11.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException16.getSuppressed();
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException16);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException19 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray20 = recipeNotFoundException19.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = recipeNotFoundException21.getSuppressed();
        recipeNotFoundException19.addSuppressed((java.lang.Throwable) recipeNotFoundException21);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException25 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException26 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray27 = recipeNotFoundException26.getSuppressed();
        recipeNotFoundException25.addSuppressed((java.lang.Throwable) recipeNotFoundException26);
        recipeNotFoundException21.addSuppressed((java.lang.Throwable) recipeNotFoundException26);
        java.lang.Throwable[] throwableArray30 = recipeNotFoundException21.getSuppressed();
        recipeNotFoundException16.addSuppressed((java.lang.Throwable) recipeNotFoundException21);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException32 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray33 = recipeNotFoundException32.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException34 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException35 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray36 = recipeNotFoundException35.getSuppressed();
        recipeNotFoundException34.addSuppressed((java.lang.Throwable) recipeNotFoundException35);
        recipeNotFoundException32.addSuppressed((java.lang.Throwable) recipeNotFoundException34);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException39 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray40 = cafeOutOfCapacityException39.getSuppressed();
        recipeNotFoundException32.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException39);
        java.lang.Throwable[] throwableArray42 = cafeOutOfCapacityException39.getSuppressed();
        java.lang.Throwable[] throwableArray43 = cafeOutOfCapacityException39.getSuppressed();
        recipeNotFoundException16.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException39);
        java.lang.Throwable[] throwableArray45 = cafeOutOfCapacityException39.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException46 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray47 = recipeNotFoundException46.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException48 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException49 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray50 = recipeNotFoundException49.getSuppressed();
        recipeNotFoundException48.addSuppressed((java.lang.Throwable) recipeNotFoundException49);
        recipeNotFoundException46.addSuppressed((java.lang.Throwable) recipeNotFoundException48);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException53 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray54 = cafeOutOfCapacityException53.getSuppressed();
        recipeNotFoundException46.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException53);
        java.lang.Throwable[] throwableArray56 = recipeNotFoundException46.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException57 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray58 = recipeNotFoundException57.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException59 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray60 = recipeNotFoundException59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = recipeNotFoundException59.getSuppressed();
        recipeNotFoundException57.addSuppressed((java.lang.Throwable) recipeNotFoundException59);
        recipeNotFoundException46.addSuppressed((java.lang.Throwable) recipeNotFoundException57);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException64 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray65 = recipeNotFoundException64.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException66 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException67 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray68 = recipeNotFoundException67.getSuppressed();
        recipeNotFoundException66.addSuppressed((java.lang.Throwable) recipeNotFoundException67);
        recipeNotFoundException64.addSuppressed((java.lang.Throwable) recipeNotFoundException66);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException71 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray72 = cafeOutOfCapacityException71.getSuppressed();
        recipeNotFoundException64.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException71);
        java.lang.Throwable[] throwableArray74 = cafeOutOfCapacityException71.getSuppressed();
        java.lang.Throwable[] throwableArray75 = cafeOutOfCapacityException71.getSuppressed();
        recipeNotFoundException46.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException71);
        cafeOutOfCapacityException39.addSuppressed((java.lang.Throwable) recipeNotFoundException46);
        java.lang.Throwable[] throwableArray78 = recipeNotFoundException46.getSuppressed();
        java.lang.Throwable[] throwableArray79 = recipeNotFoundException46.getSuppressed();
        boolean boolean80 = coffee0.equals((java.lang.Object) recipeNotFoundException46);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str1, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str3, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str4, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test4373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4373");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("", (int) (short) 100, 1);
    }

    @Test
    public void test4374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4374");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        boolean boolean10 = recipe8.equals((java.lang.Object) 10.0f);
        boolean boolean11 = cafe0.addRecipe(recipe8);
        java.lang.String str12 = cafe0.greeting();
        java.lang.String str13 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Cafe cafe15 = new uk.ac.sheffield.com1003.cafe.Cafe("hi!");
        java.lang.String str16 = cafe15.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size19 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size19, (int) (short) 10);
        boolean boolean23 = recipe21.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order26 = new uk.ac.sheffield.com1003.cafe.Order(recipe21, "hi!", (double) 0L);
        boolean boolean27 = cafe15.addRecipe(recipe21);
        java.lang.String str28 = cafe15.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe recipe31 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order34 = new uk.ac.sheffield.com1003.cafe.Order(recipe31, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order38 = new uk.ac.sheffield.com1003.cafe.Order(recipe31, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean39 = cafe15.addRecipe(recipe31);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray40 = cafe15.getMenu();
        uk.ac.sheffield.com1003.cafe.Cafe cafe42 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe42.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray44 = cafe42.getMenu();
        uk.ac.sheffield.com1003.cafe.Cafe cafe46 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Cafe cafe48 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe51 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean52 = cafe48.addRecipe(recipe51);
        boolean boolean53 = cafe46.addRecipe(recipe51);
        uk.ac.sheffield.com1003.cafe.Order order57 = new uk.ac.sheffield.com1003.cafe.Order(recipe51, "Coffee [unit=GR, amount=8, decaf=false]", 0.0d, "Order: ; For: Water; Paid: 1.0");
        boolean boolean58 = cafe42.addRecipe(recipe51);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size61 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe63 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size61, (int) (short) 10);
        boolean boolean65 = recipe63.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order68 = new uk.ac.sheffield.com1003.cafe.Order(recipe63, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Order order72 = new uk.ac.sheffield.com1003.cafe.Order(recipe63, "Welcome to Cafe", 1.0d, "Water [unit=ML, amount=30]");
        boolean boolean73 = recipe51.equals((java.lang.Object) order72);
        uk.ac.sheffield.com1003.cafe.Order order76 = new uk.ac.sheffield.com1003.cafe.Order(recipe51, "Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: 1.0", (double) 30);
        boolean boolean77 = cafe15.addRecipe(recipe51);
        boolean boolean78 = cafe0.addRecipe(recipe51);
        boolean boolean79 = recipe51.isReady();
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Welcome to Cafe" + "'", str12, "Welcome to Cafe");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Welcome to Cafe" + "'", str13, "Welcome to Cafe");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + size19 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size19.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Welcome to hi!" + "'", str28, "Welcome to hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(recipeArray40);
        org.junit.Assert.assertNotNull(recipeArray44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + size61 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size61.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test4375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4375");
        uk.ac.sheffield.com1003.cafe.Recipe recipe0 = null;
        uk.ac.sheffield.com1003.cafe.Order order4 = new uk.ac.sheffield.com1003.cafe.Order(recipe0, "Order: ; For: Water; Paid: 1.0", 100.0d, "Coffee [unit=GR, amount=1, decaf=false]");
        order4.serve();
    }

    @Test
    public void test4376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4376");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("");
        int int2 = syrup1.getAmount();
        java.lang.String str3 = syrup1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit4 = syrup1.getUnit();
        java.lang.String str5 = syrup1.getName();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Syrup [unit=ML, amount=10, flavour=]" + "'", str3, "Syrup [unit=ML, amount=10, flavour=]");
        org.junit.Assert.assertTrue("'" + unit4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Syrup" + "'", str5, "Syrup");
    }

    @Test
    public void test4377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4377");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Water [unit=ML, amount=52]");
    }

    @Test
    public void test4378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4378");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size14 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size14, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) ' ', size14, 30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=30, decaf=false]", (double) 1.0f, size14, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (double) 10, size14, (int) '#');
        uk.ac.sheffield.com1003.cafe.Recipe recipe24 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) 0L, size14, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) '4', size14, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe28 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=null]", (double) 0.0f, size14, 0);
        uk.ac.sheffield.com1003.cafe.Order order31 = new uk.ac.sheffield.com1003.cafe.Order(recipe28, "Welcome to Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) (short) 10);
        boolean boolean32 = recipe28.isReady();
        boolean boolean33 = recipe28.isReady();
        uk.ac.sheffield.com1003.cafe.Order order37 = new uk.ac.sheffield.com1003.cafe.Order(recipe28, "Milk [unit=ML, amount=100, type=null]", (double) 10L, "Order: ; For: Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0; Paid: 8.0");
        uk.ac.sheffield.com1003.cafe.Order order41 = new uk.ac.sheffield.com1003.cafe.Order(recipe28, "", (double) 1, "Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: 1.0]");
        org.junit.Assert.assertTrue("'" + size14 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size14.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test4379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4379");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=0, type=null]", (int) ' ', 0);
    }

    @Test
    public void test4380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4380");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type2 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1, type2);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(35, type2);
        java.lang.String str5 = milk4.toString();
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type2.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Milk [unit=ML, amount=35, type=SKIMMED]" + "'", str5, "Milk [unit=ML, amount=35, type=SKIMMED]");
    }

    @Test
    public void test4381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4381");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Water; Paid: 1.0", (double) (byte) 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 1);
        java.lang.String str5 = milk4.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water6 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str7 = water6.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean10 = water6.equals((java.lang.Object) 30);
        java.lang.String str11 = water6.toString();
        java.lang.String str12 = water6.getName();
        java.lang.String str13 = water6.getName();
        java.lang.String str14 = water6.toString();
        java.lang.String str15 = water6.toString();
        boolean boolean16 = milk4.equals((java.lang.Object) str15);
        boolean boolean17 = recipe2.equals((java.lang.Object) milk4);
        java.lang.Class<?> wildcardClass18 = milk4.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Milk [unit=ML, amount=1, type=WHOLE]" + "'", str5, "Milk [unit=ML, amount=1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water" + "'", str7, "Water");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Water [unit=ML, amount=30]" + "'", str11, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Water" + "'", str12, "Water");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Water" + "'", str13, "Water");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Water [unit=ML, amount=30]" + "'", str15, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test4382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4382");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        java.lang.String str1 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Order order2 = cafe0.serveOrder();
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe();
        java.lang.String str4 = cafe3.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe5 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe5.printPendingOrders();
        java.lang.String str7 = cafe5.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size10 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size10, (int) (short) 10);
        java.lang.String str13 = recipe12.getName();
        boolean boolean14 = cafe5.addRecipe(recipe12);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size17 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size17, (int) '4');
        boolean boolean20 = cafe5.addRecipe(recipe19);
        cafe5.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size24 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size24, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order29 = new uk.ac.sheffield.com1003.cafe.Order(recipe26, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee30 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str31 = coffee30.toString();
        boolean boolean32 = recipe26.equals((java.lang.Object) str31);
        java.lang.String str33 = recipe26.getName();
        boolean boolean34 = cafe5.addRecipe(recipe26);
        uk.ac.sheffield.com1003.cafe.Order order38 = new uk.ac.sheffield.com1003.cafe.Order(recipe26, "uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException", (double) '#', "Milk [unit=ML, amount=1, type=WHOLE]");
        boolean boolean39 = cafe3.addRecipe(recipe26);
        java.lang.String str40 = recipe26.getName();
        uk.ac.sheffield.com1003.cafe.Order order44 = new uk.ac.sheffield.com1003.cafe.Order(recipe26, "", 0.0d, "Syrup [unit=ML, amount=10, flavour=Welcome to ]");
        boolean boolean45 = cafe0.addRecipe(recipe26);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Cafe" + "'", str1, "Cafe");
        org.junit.Assert.assertNull(order2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Cafe" + "'", str4, "Cafe");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Welcome to Cafe" + "'", str7, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size10 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size10.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + size17 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size17.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + size24 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size24.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str31, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test4383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4383");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 10, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) 'a', type3);
        uk.ac.sheffield.com1003.cafe.Cafe cafe8 = new uk.ac.sheffield.com1003.cafe.Cafe("Water [unit=ML, amount=35]");
        java.lang.String str9 = cafe8.greeting();
        boolean boolean10 = milk6.equals((java.lang.Object) cafe8);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size17 = uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL;
        uk.ac.sheffield.com1003.cafe.Recipe recipe19 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=32, type=ALMOND]", (double) (-1), size17, 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("Water", 1.0d, size17, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe23 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=10, decaf=true]", (double) 10L, size17, (int) (byte) 10);
        uk.ac.sheffield.com1003.cafe.Order order27 = new uk.ac.sheffield.com1003.cafe.Order(recipe23, "Welcome to Milk", (double) (-1L), "Welcome to Water");
        boolean boolean28 = milk6.equals((java.lang.Object) (-1L));
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Welcome to Water [unit=ML, amount=35]" + "'", str9, "Welcome to Water [unit=ML, amount=35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + size17 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL + "'", size17.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.SMALL));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4384");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean15 = recipe4.equals((java.lang.Object) 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee16 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str17 = coffee16.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type18 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean19 = coffee16.equals((java.lang.Object) type18);
        java.lang.String str20 = coffee16.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee16);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size24 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size24, (int) (short) 10);
        boolean boolean27 = coffee16.equals((java.lang.Object) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size30 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe32 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=8, decaf=false]", (double) (-1), size30, 0);
        uk.ac.sheffield.com1003.cafe.Order order36 = new uk.ac.sheffield.com1003.cafe.Order(recipe32, "Milk [unit=ML, amount=100, type=WHOLE]", (double) 'a', "Order: ; For: ; Paid: 10.0");
        boolean boolean37 = coffee16.equals((java.lang.Object) recipe32);
        uk.ac.sheffield.com1003.cafe.Order order40 = new uk.ac.sheffield.com1003.cafe.Order(recipe32, "Milk [unit=ML, amount=30, type=WHOLE]", 0.0d);
        java.lang.String str41 = recipe32.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size54 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe56 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size54, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe58 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) ' ', size54, 30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe60 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=30, decaf=false]", (double) 1.0f, size54, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe62 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) 100L, size54, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe64 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to ", (double) 1L, size54, 35);
        uk.ac.sheffield.com1003.cafe.Recipe recipe66 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=8]", (double) (short) 1, size54, 10);
        boolean boolean67 = recipe32.equals((java.lang.Object) recipe66);
        double double68 = recipe32.getPrice();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str17, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type18.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str20, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + size24 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size24.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + size30 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size30.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str41, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + size54 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size54.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.0d) + "'", double68 == (-1.0d));
    }

    @Test
    public void test4385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4385");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) 10L);
    }

    @Test
    public void test4386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4386");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str2 = coffee1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean4 = coffee1.equals((java.lang.Object) type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type3);
        java.lang.String str6 = milk5.getName();
        java.lang.String str7 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water8 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int9 = water8.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException10 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException11 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray12 = recipeNotFoundException11.getSuppressed();
        recipeNotFoundException10.addSuppressed((java.lang.Throwable) recipeNotFoundException11);
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException11.getSuppressed();
        boolean boolean15 = water8.equals((java.lang.Object) recipeNotFoundException11);
        java.lang.Throwable[] throwableArray16 = recipeNotFoundException11.getSuppressed();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException11.getSuppressed();
        boolean boolean18 = milk5.equals((java.lang.Object) recipeNotFoundException11);
        java.lang.Throwable[] throwableArray19 = recipeNotFoundException11.getSuppressed();
        java.lang.Throwable[] throwableArray20 = recipeNotFoundException11.getSuppressed();
        java.lang.Throwable[] throwableArray21 = recipeNotFoundException11.getSuppressed();
        java.lang.String str22 = recipeNotFoundException11.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk" + "'", str6, "Milk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str7, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 30 + "'", int9 == 30);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str22, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4387");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean3 = recipe2.isReady();
        java.lang.String str4 = recipe2.getName();
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: ; For: Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0; Paid: 0.0", 0.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup9 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("hi!");
        java.lang.String str10 = syrup9.toString();
        java.lang.Class<?> wildcardClass11 = syrup9.getClass();
        boolean boolean12 = recipe2.equals((java.lang.Object) syrup9);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water [unit=ML, amount=30]" + "'", str4, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Syrup [unit=ML, amount=10, flavour=hi!]" + "'", str10, "Syrup [unit=ML, amount=10, flavour=hi!]");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4388");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: hi!; Paid: 0.0", 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Syrup [unit=ML, amount=10, flavour=]", (double) 10L, "Syrup [unit=ML, amount=10, flavour=Water]");
        uk.ac.sheffield.com1003.cafe.Cafe cafe10 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]", 30, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean14 = cafe10.addRecipe(recipe13);
        uk.ac.sheffield.com1003.cafe.Order order17 = new uk.ac.sheffield.com1003.cafe.Order(recipe13, "Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", (double) (short) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup19 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Milk [unit=ML, amount=30, type=WHOLE]");
        recipe13.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup19);
        boolean boolean21 = recipe2.equals((java.lang.Object) recipe13);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee23 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str24 = coffee23.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type25 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean26 = coffee23.equals((java.lang.Object) type25);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk27 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type25);
        java.lang.String str28 = milk27.getName();
        java.lang.String str29 = milk27.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water30 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int31 = water30.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException32 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException33 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray34 = recipeNotFoundException33.getSuppressed();
        recipeNotFoundException32.addSuppressed((java.lang.Throwable) recipeNotFoundException33);
        java.lang.Throwable[] throwableArray36 = recipeNotFoundException33.getSuppressed();
        boolean boolean37 = water30.equals((java.lang.Object) recipeNotFoundException33);
        java.lang.Throwable[] throwableArray38 = recipeNotFoundException33.getSuppressed();
        java.lang.Throwable[] throwableArray39 = recipeNotFoundException33.getSuppressed();
        boolean boolean40 = milk27.equals((java.lang.Object) recipeNotFoundException33);
        recipe13.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk27);
        uk.ac.sheffield.com1003.cafe.Recipe recipe44 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order47 = new uk.ac.sheffield.com1003.cafe.Order(recipe44, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order51 = new uk.ac.sheffield.com1003.cafe.Order(recipe44, "Cafe", (double) 0.0f, "Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Order order55 = new uk.ac.sheffield.com1003.cafe.Order(recipe44, "Coffee [unit=GR, amount=8, decaf=false]", (double) 0, "Welcome to Milk [unit=ML, amount=-1, type=WHOLE]");
        order55.printReceipt();
        boolean boolean57 = recipe13.equals((java.lang.Object) order55);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str24, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type25.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Milk" + "'", str28, "Milk");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str29, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 30 + "'", int31 == 30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test4389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4389");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("hi!");
        java.lang.String str2 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        boolean boolean9 = recipe7.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "hi!", (double) 0L);
        boolean boolean13 = cafe1.addRecipe(recipe7);
        java.lang.String str14 = cafe1.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray15 = cafe1.getMenu();
        cafe1.printPendingOrders();
        cafe1.printMenu();
        cafe1.printPendingOrders();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Welcome to hi!" + "'", str14, "Welcome to hi!");
        org.junit.Assert.assertNotNull(recipeArray15);
    }

    @Test
    public void test4390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4390");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException]", (int) '4', 0);
        uk.ac.sheffield.com1003.cafe.Cafe cafe7 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0", (int) 'a', (int) (short) 10);
        java.lang.String str8 = cafe7.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray9 = cafe7.getMenu();
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe12, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe12, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean20 = recipe12.isReady();
        java.lang.String str21 = recipe12.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size24 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size24, (int) '4');
        boolean boolean28 = recipe26.equals((java.lang.Object) 10.0d);
        double double29 = recipe26.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order33 = new uk.ac.sheffield.com1003.cafe.Order(recipe26, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean34 = recipe12.equals((java.lang.Object) "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean35 = cafe7.addRecipe(recipe12);
        boolean boolean36 = cafe3.addRecipe(recipe12);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = cafe3.placeOrder("Order: ; For: ; Paid: 10.0", "Order: ; For: Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0; Paid: 0.0", 8.0d);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Welcome to Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0" + "'", str8, "Welcome to Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0");
        org.junit.Assert.assertNotNull(recipeArray9);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Milk [unit=ML, amount=100, type=WHOLE]" + "'", str21, "Milk [unit=ML, amount=100, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + size24 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size24.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test4391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4391");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean4 = water0.equals((java.lang.Object) 30);
        java.lang.String str5 = water0.toString();
        java.lang.String str6 = water0.getName();
        java.lang.String str7 = water0.getName();
        java.lang.String str8 = water0.toString();
        java.lang.String str9 = water0.toString();
        java.lang.String str10 = water0.toString();
        int int11 = water0.getAmount();
        java.lang.String str12 = water0.toString();
        boolean boolean14 = water0.equals((java.lang.Object) "Water");
        java.lang.String str15 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit16 = water0.getUnit();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee17 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str18 = coffee17.toString();
        java.lang.String str19 = coffee17.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe23 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe", 10, (int) (short) 100);
        cafe23.printMenu();
        boolean boolean25 = coffee17.equals((java.lang.Object) cafe23);
        boolean boolean26 = water0.equals((java.lang.Object) boolean25);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Water [unit=ML, amount=30]" + "'", str5, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Water" + "'", str6, "Water");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water" + "'", str7, "Water");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Water [unit=ML, amount=30]" + "'", str9, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water [unit=ML, amount=30]" + "'", str10, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30 + "'", int11 == 30);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Water [unit=ML, amount=30]" + "'", str12, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Water" + "'", str15, "Water");
        org.junit.Assert.assertTrue("'" + unit16 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit16.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str18, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str19, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4392");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size8, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Plain]", (double) '#', size8, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", 10.0d, size8, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=1, type=SKIMMED]", (double) 1.0f, size8, 35);
        boolean boolean17 = recipe16.isReady();
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4393");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) (-1));
        uk.ac.sheffield.com1003.cafe.ingredients.Water water3 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str4 = water3.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean7 = water3.equals((java.lang.Object) 30);
        java.lang.String str8 = water3.toString();
        java.lang.String str9 = water3.getName();
        java.lang.String str10 = water3.getName();
        java.lang.String str11 = water3.toString();
        java.lang.String str12 = water3.getName();
        boolean boolean13 = recipe2.equals((java.lang.Object) water3);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size16 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size16, (int) '4');
        boolean boolean20 = recipe18.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe18, "Welcome to Cafe", 0.0d);
        boolean boolean24 = recipe18.isReady();
        boolean boolean25 = recipe18.isReady();
        double double26 = recipe18.getPrice();
        boolean boolean27 = water3.equals((java.lang.Object) recipe18);
        java.lang.String str28 = recipe18.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water" + "'", str4, "Water");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Water" + "'", str9, "Water");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water" + "'", str10, "Water");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Water [unit=ML, amount=30]" + "'", str11, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Water" + "'", str12, "Water");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + size16 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size16.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Water [unit=ML, amount=30]" + "'", str28, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4394");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 100);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray3 = recipeNotFoundException2.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException4 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException5.getSuppressed();
        recipeNotFoundException4.addSuppressed((java.lang.Throwable) recipeNotFoundException5);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException4);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException9 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray10 = recipeNotFoundException9.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException11 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        recipeNotFoundException11.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        recipeNotFoundException9.addSuppressed((java.lang.Throwable) recipeNotFoundException11);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException16 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray17 = cafeOutOfCapacityException16.getSuppressed();
        recipeNotFoundException9.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException16);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException9);
        boolean boolean20 = milk1.equals((java.lang.Object) recipeNotFoundException2);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee21 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str22 = coffee21.toString();
        int int23 = coffee21.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException24 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = recipeNotFoundException24.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException27 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray28 = recipeNotFoundException27.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException29 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException30 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray31 = recipeNotFoundException30.getSuppressed();
        recipeNotFoundException29.addSuppressed((java.lang.Throwable) recipeNotFoundException30);
        recipeNotFoundException27.addSuppressed((java.lang.Throwable) recipeNotFoundException29);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException34 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray35 = cafeOutOfCapacityException34.getSuppressed();
        recipeNotFoundException27.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException34);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException37 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray38 = recipeNotFoundException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = recipeNotFoundException37.getSuppressed();
        recipeNotFoundException27.addSuppressed((java.lang.Throwable) recipeNotFoundException37);
        recipeNotFoundException24.addSuppressed((java.lang.Throwable) recipeNotFoundException37);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException42 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray43 = recipeNotFoundException42.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException44 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray45 = recipeNotFoundException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = recipeNotFoundException44.getSuppressed();
        recipeNotFoundException42.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException48 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray49 = recipeNotFoundException48.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException50 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException51 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray52 = recipeNotFoundException51.getSuppressed();
        recipeNotFoundException50.addSuppressed((java.lang.Throwable) recipeNotFoundException51);
        recipeNotFoundException48.addSuppressed((java.lang.Throwable) recipeNotFoundException50);
        recipeNotFoundException42.addSuppressed((java.lang.Throwable) recipeNotFoundException48);
        recipeNotFoundException24.addSuppressed((java.lang.Throwable) recipeNotFoundException42);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException57 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray58 = recipeNotFoundException57.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException59 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray60 = recipeNotFoundException59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = recipeNotFoundException59.getSuppressed();
        recipeNotFoundException57.addSuppressed((java.lang.Throwable) recipeNotFoundException59);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException63 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException64 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray65 = recipeNotFoundException64.getSuppressed();
        recipeNotFoundException63.addSuppressed((java.lang.Throwable) recipeNotFoundException64);
        recipeNotFoundException59.addSuppressed((java.lang.Throwable) recipeNotFoundException64);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException68 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray69 = recipeNotFoundException68.getSuppressed();
        recipeNotFoundException64.addSuppressed((java.lang.Throwable) recipeNotFoundException68);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException71 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray72 = recipeNotFoundException71.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException73 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray74 = recipeNotFoundException73.getSuppressed();
        java.lang.Throwable[] throwableArray75 = recipeNotFoundException73.getSuppressed();
        recipeNotFoundException71.addSuppressed((java.lang.Throwable) recipeNotFoundException73);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException77 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException78 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray79 = recipeNotFoundException78.getSuppressed();
        recipeNotFoundException77.addSuppressed((java.lang.Throwable) recipeNotFoundException78);
        recipeNotFoundException73.addSuppressed((java.lang.Throwable) recipeNotFoundException78);
        java.lang.Throwable[] throwableArray82 = recipeNotFoundException73.getSuppressed();
        recipeNotFoundException68.addSuppressed((java.lang.Throwable) recipeNotFoundException73);
        recipeNotFoundException42.addSuppressed((java.lang.Throwable) recipeNotFoundException68);
        java.lang.Throwable[] throwableArray85 = recipeNotFoundException68.getSuppressed();
        boolean boolean86 = coffee21.equals((java.lang.Object) recipeNotFoundException68);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException68);
        java.lang.String str88 = recipeNotFoundException2.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str22, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str88, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4395");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe1.printMenu();
        java.lang.String str3 = cafe1.getName();
        cafe1.printMenu();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test4396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4396");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        java.lang.String str1 = cafe0.greeting();
        cafe0.printPendingOrders();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Welcome to Cafe" + "'", str1, "Welcome to Cafe");
    }

    @Test
    public void test4397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4397");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk13 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe8.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk13);
        double double15 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order18 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Order: ; For: hi!; Paid: 0.0", 0.0d);
        uk.ac.sheffield.com1003.cafe.Order order21 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Welcome to ", (double) (short) 100);
        boolean boolean22 = cafe0.addRecipe(recipe8);
        uk.ac.sheffield.com1003.cafe.Order order26 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Coffee [unit=GR, amount=0, decaf=false]", (double) (byte) 1, "Welcome to ");
        uk.ac.sheffield.com1003.cafe.Cafe cafe30 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (int) ' ', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size33 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe35 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size33, (int) '4');
        boolean boolean37 = recipe35.equals((java.lang.Object) 10.0d);
        double double38 = recipe35.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order42 = new uk.ac.sheffield.com1003.cafe.Order(recipe35, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean43 = cafe30.addRecipe(recipe35);
        uk.ac.sheffield.com1003.cafe.Recipe recipe46 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk", (double) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order50 = new uk.ac.sheffield.com1003.cafe.Order(recipe46, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (short) -1, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee53 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 0, false);
        recipe46.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee53);
        boolean boolean55 = recipe35.equals((java.lang.Object) coffee53);
        double double56 = recipe35.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order59 = new uk.ac.sheffield.com1003.cafe.Order(recipe35, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Order: ; For: Welcome to Cafe; Paid: 10.0; Paid: 1.0", (double) 100.0f);
        boolean boolean60 = recipe8.equals((java.lang.Object) recipe35);
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + size33 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size33.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test4398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4398");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1);
        java.lang.String str2 = milk1.toString();
        java.lang.String str3 = milk1.toString();
        java.lang.String str4 = milk1.toString();
        java.lang.Class<?> wildcardClass5 = milk1.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str2, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str3, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str4, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test4399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4399");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size2, (int) '4');
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0d);
        java.lang.String str7 = recipe4.getName();
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "", (double) (byte) 1, "");
        double double12 = recipe4.getPrice();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water [unit=ML, amount=30]" + "'", str7, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test4400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4400");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Syrup [unit=ML, amount=10, flavour=Plain]", (double) (byte) 10);
        order12.serve();
        order12.serve();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test4401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4401");
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException0 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray1 = recipeNotFoundException0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = recipeNotFoundException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException6 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray7 = recipeNotFoundException6.getSuppressed();
        recipeNotFoundException5.addSuppressed((java.lang.Throwable) recipeNotFoundException6);
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException5);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException10 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray11 = cafeOutOfCapacityException10.getSuppressed();
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException10);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException13 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = recipeNotFoundException13.getSuppressed();
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException13);
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) recipeNotFoundException13);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException18 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray19 = recipeNotFoundException18.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException20 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray21 = recipeNotFoundException20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException20.getSuppressed();
        recipeNotFoundException18.addSuppressed((java.lang.Throwable) recipeNotFoundException20);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException24 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException25 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray26 = recipeNotFoundException25.getSuppressed();
        recipeNotFoundException24.addSuppressed((java.lang.Throwable) recipeNotFoundException25);
        recipeNotFoundException20.addSuppressed((java.lang.Throwable) recipeNotFoundException25);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException29 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray30 = recipeNotFoundException29.getSuppressed();
        recipeNotFoundException25.addSuppressed((java.lang.Throwable) recipeNotFoundException29);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water32 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str33 = water32.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk35 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean36 = water32.equals((java.lang.Object) 30);
        java.lang.String str37 = water32.toString();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException38 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray39 = recipeNotFoundException38.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException40 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException41 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray42 = recipeNotFoundException41.getSuppressed();
        recipeNotFoundException40.addSuppressed((java.lang.Throwable) recipeNotFoundException41);
        recipeNotFoundException38.addSuppressed((java.lang.Throwable) recipeNotFoundException40);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException45 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray46 = cafeOutOfCapacityException45.getSuppressed();
        recipeNotFoundException38.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException45);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException48 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray49 = recipeNotFoundException48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = recipeNotFoundException48.getSuppressed();
        recipeNotFoundException38.addSuppressed((java.lang.Throwable) recipeNotFoundException48);
        boolean boolean52 = water32.equals((java.lang.Object) recipeNotFoundException48);
        recipeNotFoundException25.addSuppressed((java.lang.Throwable) recipeNotFoundException48);
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) recipeNotFoundException48);
        java.lang.String str55 = recipeNotFoundException48.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Water" + "'", str33, "Water");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Water [unit=ML, amount=30]" + "'", str37, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str55, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4402");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size12, (int) (short) 10);
        boolean boolean16 = recipe14.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe14, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (byte) 100);
        boolean boolean20 = cafe0.addRecipe(recipe14);
        cafe0.printMenu();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test4403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4403");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 1, true);
        uk.ac.sheffield.com1003.cafe.Recipe recipe5 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0", (double) (short) -1);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe5, "", (double) 8, "Order: Water [unit=ML, amount=30]; For: Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0; Paid: 0.0");
        boolean boolean10 = coffee2.equals((java.lang.Object) recipe5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4404");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Order: ; For: Welcome to Cafe; Paid: 1.0");
    }

    @Test
    public void test4405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4405");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.toString();
        java.lang.String str2 = water0.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit3 = water0.getUnit();
        uk.ac.sheffield.com1003.cafe.Cafe cafe4 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe4.printPendingOrders();
        java.lang.String str6 = cafe4.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray7 = cafe4.getMenu();
        boolean boolean8 = water0.equals((java.lang.Object) recipeArray7);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water10 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 100);
        java.lang.String str11 = water10.toString();
        boolean boolean12 = water0.equals((java.lang.Object) water10);
        java.lang.String str13 = water10.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean17 = recipe16.isReady();
        boolean boolean18 = recipe16.isReady();
        java.lang.String str19 = recipe16.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe21 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException");
        boolean boolean22 = recipe16.equals((java.lang.Object) cafe21);
        boolean boolean23 = water10.equals((java.lang.Object) boolean22);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water [unit=ML, amount=30]" + "'", str1, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water [unit=ML, amount=30]" + "'", str2, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + unit3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Welcome to Cafe" + "'", str6, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Water [unit=ML, amount=100]" + "'", str11, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Water [unit=ML, amount=100]" + "'", str13, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Water [unit=ML, amount=30]" + "'", str19, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4406");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Welcome to Milk; Paid: 1.0");
        cafe1.printMenu();
        java.lang.String str3 = cafe1.greeting();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Welcome to Order: ; For: Welcome to Milk; Paid: 1.0" + "'", str3, "Welcome to Order: ; For: Welcome to Milk; Paid: 1.0");
    }

    @Test
    public void test4407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4407");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type6 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean7 = milk5.equals((java.lang.Object) type6);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk8 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) -1, type6);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 0, type6);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size12, (int) '4');
        boolean boolean16 = recipe14.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe14, "Welcome to Cafe", 0.0d);
        order19.printReceipt();
        boolean boolean21 = milk9.equals((java.lang.Object) order19);
        boolean boolean22 = water0.equals((java.lang.Object) boolean21);
        java.lang.Object obj23 = null;
        boolean boolean24 = water0.equals(obj23);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type6.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4408");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        boolean boolean7 = recipe4.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee10 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(0, true);
        java.lang.String str11 = coffee10.toString();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size14 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size14, (int) '4');
        boolean boolean18 = recipe16.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order21 = new uk.ac.sheffield.com1003.cafe.Order(recipe16, "Welcome to Cafe", 0.0d);
        boolean boolean23 = recipe16.equals((java.lang.Object) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Order order27 = new uk.ac.sheffield.com1003.cafe.Order(recipe16, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) 100L, "Order: ; For: Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0; Paid: -1.0");
        boolean boolean28 = coffee10.equals((java.lang.Object) "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        java.lang.String str29 = coffee10.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe30 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe30.printPendingOrders();
        java.lang.String str32 = cafe30.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size35 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe37 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size35, (int) (short) 10);
        java.lang.String str38 = recipe37.getName();
        boolean boolean39 = cafe30.addRecipe(recipe37);
        cafe30.printPendingOrders();
        cafe30.printPendingOrders();
        boolean boolean42 = coffee10.equals((java.lang.Object) cafe30);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee10);
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Coffee [unit=GR, amount=0, decaf=true]" + "'", str11, "Coffee [unit=GR, amount=0, decaf=true]");
        org.junit.Assert.assertTrue("'" + size14 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size14.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Coffee" + "'", str29, "Coffee");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Welcome to Cafe" + "'", str32, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size35 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size35.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test4409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4409");
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException0 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray1 = recipeNotFoundException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) recipeNotFoundException2);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException7 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException7.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException9 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray10 = recipeNotFoundException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = recipeNotFoundException9.getSuppressed();
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException9);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException13 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException13.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException15 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException16.getSuppressed();
        recipeNotFoundException15.addSuppressed((java.lang.Throwable) recipeNotFoundException16);
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) recipeNotFoundException15);
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException13);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException21.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException23 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray24 = recipeNotFoundException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException23.getSuppressed();
        recipeNotFoundException21.addSuppressed((java.lang.Throwable) recipeNotFoundException23);
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) recipeNotFoundException23);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException13);
        java.lang.Throwable[] throwableArray29 = recipeNotFoundException13.getSuppressed();
        java.lang.Throwable[] throwableArray30 = recipeNotFoundException13.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException31 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = recipeNotFoundException31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = recipeNotFoundException31.getSuppressed();
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) recipeNotFoundException31);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test4410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4410");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk4 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1, type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30, type3);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
    }

    @Test
    public void test4411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4411");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=-1, type=SKIMMED]]");
    }

    @Test
    public void test4412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4412");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size4, (int) '4');
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException", 100.0d, size4, 32);
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Coffee [unit=GR, amount=-1, decaf=true]", 8.0d);
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
    }

    @Test
    public void test4413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4413");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk9);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type15 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean16 = milk14.equals((java.lang.Object) type15);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk17 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type15);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk18 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ', type15);
        java.lang.String str19 = milk18.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk18);
        java.lang.String str21 = milk18.toString();
        java.lang.String str22 = milk18.toString();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type15.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Milk [unit=ML, amount=32, type=SKIMMED]" + "'", str19, "Milk [unit=ML, amount=32, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Milk [unit=ML, amount=32, type=SKIMMED]" + "'", str21, "Milk [unit=ML, amount=32, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Milk [unit=ML, amount=32, type=SKIMMED]" + "'", str22, "Milk [unit=ML, amount=32, type=SKIMMED]");
    }

    @Test
    public void test4414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4414");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0", (double) (short) -1);
        boolean boolean3 = recipe2.isReady();
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Syrup [unit=ML, amount=10, flavour=Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0]", (double) 10, "Coffee");
        order7.serve();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test4415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4415");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean15 = recipe4.equals((java.lang.Object) 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup17 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Water");
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup17);
        java.lang.String str19 = syrup17.toString();
        java.lang.String str20 = syrup17.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe22 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0; Paid: -1.0");
        boolean boolean23 = syrup17.equals((java.lang.Object) cafe22);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = cafe22.placeOrder("Welcome to Water [unit=ML, amount=10]", "Syrup [unit=ML, amount=10, flavour=Welcome to Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0]", (double) 1);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Water]" + "'", str19, "Syrup [unit=ML, amount=10, flavour=Water]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Water]" + "'", str20, "Syrup [unit=ML, amount=10, flavour=Water]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4416");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type1 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.WHOLE;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk2 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 0, type1);
        int int3 = milk2.getAmount();
        java.lang.String str4 = milk2.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe5 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe5.printPendingOrders();
        java.lang.String str7 = cafe5.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size10 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size10, (int) (short) 10);
        java.lang.String str13 = recipe12.getName();
        boolean boolean14 = cafe5.addRecipe(recipe12);
        cafe5.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee", 1.0d);
        boolean boolean19 = cafe5.addRecipe(recipe18);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: ; Paid: 10.0", (double) 10L);
        boolean boolean23 = cafe5.addRecipe(recipe22);
        boolean boolean24 = milk2.equals((java.lang.Object) recipe22);
        org.junit.Assert.assertTrue("'" + type1 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.WHOLE + "'", type1.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.WHOLE));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Milk" + "'", str4, "Milk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Welcome to Cafe" + "'", str7, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size10 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size10.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4417");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=30]]; Paid: -1.0", (int) (byte) 0, 100);
    }

    @Test
    public void test4418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4418");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water2 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 0);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee6 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str7 = coffee6.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type8 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean9 = coffee6.equals((java.lang.Object) type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk11 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '4', type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk12 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type8);
        boolean boolean13 = water2.equals((java.lang.Object) type8);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (byte) 0, type8);
        uk.ac.sheffield.com1003.cafe.Cafe cafe18 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]", 30, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean22 = cafe18.addRecipe(recipe21);
        uk.ac.sheffield.com1003.cafe.Order order25 = new uk.ac.sheffield.com1003.cafe.Order(recipe21, "Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", (double) (short) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup27 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Milk [unit=ML, amount=30, type=WHOLE]");
        recipe21.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup27);
        boolean boolean29 = milk14.equals((java.lang.Object) syrup27);
        java.lang.String str30 = syrup27.toString();
        java.lang.String str31 = syrup27.toString();
        java.lang.String str32 = syrup27.toString();
        java.lang.String str33 = syrup27.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str7, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type8.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]" + "'", str30, "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]" + "'", str31, "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]" + "'", str32, "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]" + "'", str33, "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]");
    }

    @Test
    public void test4419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4419");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(10, true);
        java.lang.String str3 = coffee2.toString();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size8 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("", 0.0d, size8, (int) (byte) 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) ' ', size8, 30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe15 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order18 = new uk.ac.sheffield.com1003.cafe.Order(recipe15, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        order18.printReceipt();
        boolean boolean20 = recipe12.equals((java.lang.Object) order18);
        boolean boolean21 = coffee2.equals((java.lang.Object) boolean20);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk26 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type27 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean28 = milk26.equals((java.lang.Object) type27);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk29 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type27);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk30 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type27);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk31 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(32, type27);
        boolean boolean32 = coffee2.equals((java.lang.Object) milk31);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water33 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str34 = water33.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe36 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk");
        boolean boolean37 = water33.equals((java.lang.Object) "Milk");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size46 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe48 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) '4', size46, 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe50 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]", (double) 'a', size46, (int) (short) 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe52 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]", (double) (byte) 100, size46, (int) (short) 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe54 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", (double) 10, size46, (int) (short) 0);
        double double55 = recipe54.getPrice();
        boolean boolean56 = water33.equals((java.lang.Object) double55);
        boolean boolean57 = milk31.equals((java.lang.Object) boolean56);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Coffee [unit=GR, amount=10, decaf=true]" + "'", str3, "Coffee [unit=GR, amount=10, decaf=true]");
        org.junit.Assert.assertTrue("'" + size8 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size8.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type27.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Water [unit=ML, amount=30]" + "'", str34, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + size46 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size46.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test4420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4420");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]", 30, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean7 = cafe3.addRecipe(recipe6);
        cafe3.printMenu();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = cafe3.placeOrder("Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0]]", "Water [unit=ML, amount=0]", (-1.0d));
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test4421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4421");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=30]]");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size4, (int) (short) 10);
        boolean boolean8 = recipe6.equals((java.lang.Object) 10.0f);
        java.lang.Class<?> wildcardClass9 = recipe6.getClass();
        boolean boolean10 = syrup1.equals((java.lang.Object) wildcardClass9);
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4422");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) (short) 0);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type4 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.ALMOND;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ', type4);
        java.lang.String str6 = milk5.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee7 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        boolean boolean8 = milk5.equals((java.lang.Object) coffee7);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 0);
        boolean boolean11 = coffee7.equals((java.lang.Object) milk10);
        boolean boolean12 = recipe2.equals((java.lang.Object) boolean11);
        boolean boolean13 = recipe2.isReady();
        double double14 = recipe2.getPrice();
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.ALMOND + "'", type4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.ALMOND));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk" + "'", str6, "Milk");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test4423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4423");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean3 = recipe2.isReady();
        java.lang.String str4 = recipe2.getName();
        java.lang.String str5 = recipe2.getName();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Order: ; For: Water; Paid: 1.0; Paid: 100.0", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "", (double) 0.0f, "Order: Water [unit=ML, amount=30]; For: Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0; Paid: 100.0");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water [unit=ML, amount=30]" + "'", str4, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Water [unit=ML, amount=30]" + "'", str5, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4424");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        double double5 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "", (double) (short) 10, "Water [unit=ML, amount=30]");
        boolean boolean13 = recipe4.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk15 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100);
        boolean boolean16 = recipe4.equals((java.lang.Object) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water18 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee20 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe23 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean24 = recipe23.isReady();
        java.lang.String str25 = recipe23.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee26 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe23.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee26);
        boolean boolean28 = coffee20.equals((java.lang.Object) recipe23);
        boolean boolean29 = water18.equals((java.lang.Object) recipe23);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit30 = water18.getUnit();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water18);
        java.lang.String str32 = water18.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe34 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Coffee [unit=GR, amount=0, decaf=false]");
        boolean boolean35 = water18.equals((java.lang.Object) cafe34);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size38 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe40 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size38, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order43 = new uk.ac.sheffield.com1003.cafe.Order(recipe40, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk45 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '#');
        recipe40.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk45);
        uk.ac.sheffield.com1003.cafe.Order order49 = new uk.ac.sheffield.com1003.cafe.Order(recipe40, "Milk [unit=ML, amount=35, type=WHOLE]", (double) 100L);
        boolean boolean50 = cafe34.addRecipe(recipe40);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = cafe34.placeOrder("Order: ; For: Syrup [unit=ML, amount=10, flavour=Water [unit=ML, amount=10]]; Paid: -1.0", "Order: Water [unit=ML, amount=30]; For: uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException; Paid: 0.0", (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Water [unit=ML, amount=30]" + "'", str25, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + unit30 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit30.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Water [unit=ML, amount=100]" + "'", str32, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + size38 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size38.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test4425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4425");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size12, (int) '4');
        boolean boolean15 = cafe0.addRecipe(recipe14);
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size19 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size19, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order24 = new uk.ac.sheffield.com1003.cafe.Order(recipe21, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee25 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str26 = coffee25.toString();
        boolean boolean27 = recipe21.equals((java.lang.Object) str26);
        java.lang.String str28 = recipe21.getName();
        boolean boolean29 = cafe0.addRecipe(recipe21);
        double double30 = recipe21.getPrice();
        double double31 = recipe21.getPrice();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + size19 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size19.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str26, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
    }

    @Test
    public void test4426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4426");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk9);
        uk.ac.sheffield.com1003.cafe.Recipe recipe13 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) 10L);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water14 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str15 = water14.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk17 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean18 = water14.equals((java.lang.Object) 30);
        java.lang.String str19 = water14.toString();
        java.lang.String str20 = water14.getName();
        boolean boolean22 = water14.equals((java.lang.Object) (byte) -1);
        java.lang.String str23 = water14.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup25 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: Welcome to Cafe; Paid: 10.0");
        java.lang.String str26 = syrup25.toString();
        java.lang.String str27 = syrup25.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit28 = syrup25.getUnit();
        boolean boolean29 = water14.equals((java.lang.Object) syrup25);
        recipe13.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water14);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException31 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException31.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException33 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray34 = recipeNotFoundException33.getSuppressed();
        java.lang.Throwable[] throwableArray35 = recipeNotFoundException33.getSuppressed();
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) recipeNotFoundException33);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException37 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray38 = recipeNotFoundException37.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException39 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException40 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray41 = recipeNotFoundException40.getSuppressed();
        recipeNotFoundException39.addSuppressed((java.lang.Throwable) recipeNotFoundException40);
        recipeNotFoundException37.addSuppressed((java.lang.Throwable) recipeNotFoundException39);
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) recipeNotFoundException37);
        boolean boolean45 = water14.equals((java.lang.Object) recipeNotFoundException31);
        java.lang.Throwable[] throwableArray46 = recipeNotFoundException31.getSuppressed();
        java.lang.Throwable[] throwableArray47 = recipeNotFoundException31.getSuppressed();
        boolean boolean48 = milk9.equals((java.lang.Object) throwableArray47);
        uk.ac.sheffield.com1003.cafe.Recipe recipe51 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (short) -1);
        uk.ac.sheffield.com1003.cafe.Order order55 = new uk.ac.sheffield.com1003.cafe.Order(recipe51, "Coffee [unit=GR, amount=35, decaf=false]", (double) 30, "Welcome to Order: ; For: hi!; Paid: 0.0");
        uk.ac.sheffield.com1003.cafe.Order order59 = new uk.ac.sheffield.com1003.cafe.Order(recipe51, "Order: Coffee [unit=GR, amount=8, decaf=false]; For: Coffee [unit=GR, amount=32, decaf=false]; Paid: 52.0", (double) (byte) 10, "Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=0, decaf=false]]");
        boolean boolean60 = milk9.equals((java.lang.Object) (byte) 10);
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Water" + "'", str15, "Water");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Water [unit=ML, amount=30]" + "'", str19, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Water" + "'", str20, "Water");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Water" + "'", str23, "Water");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]" + "'", str26, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]" + "'", str27, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        org.junit.Assert.assertTrue("'" + unit28 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit28.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test4427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4427");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (int) ' ', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size6, (int) '4');
        boolean boolean10 = recipe8.equals((java.lang.Object) 10.0d);
        double double11 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean16 = cafe3.addRecipe(recipe8);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0", 0.0d);
        java.lang.String str20 = recipe8.getName();
        boolean boolean21 = recipe8.isReady();
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Water [unit=ML, amount=30]" + "'", str20, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4428");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee3 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean7 = recipe6.isReady();
        java.lang.String str8 = recipe6.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee9 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe6.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee9);
        boolean boolean11 = coffee3.equals((java.lang.Object) recipe6);
        boolean boolean12 = water1.equals((java.lang.Object) recipe6);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit13 = water1.getUnit();
        uk.ac.sheffield.com1003.cafe.Cafe cafe14 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe14.printPendingOrders();
        boolean boolean16 = water1.equals((java.lang.Object) cafe14);
        uk.ac.sheffield.com1003.cafe.Order order17 = cafe14.serveOrder();
        cafe14.printMenu();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + unit13 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit13.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(order17);
    }

    @Test
    public void test4429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4429");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; Paid: 1.0]", (double) 10.0f);
    }

    @Test
    public void test4430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4430");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; For: Coffee [unit=GR, amount=32, decaf=false]; Paid: 0.0", 97, (int) (short) 100);
    }

    @Test
    public void test4431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4431");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe0.getMenu();
        cafe0.printMenu();
        cafe0.printPendingOrders();
        java.lang.String str6 = cafe0.greeting();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Welcome to Cafe" + "'", str6, "Welcome to Cafe");
    }

    @Test
    public void test4432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4432");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=30, decaf=false]]");
        cafe1.printPendingOrders();
    }

    @Test
    public void test4433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4433");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: Milk [unit=ML, amount=100, type=null]; Paid: 97.0");
    }

    @Test
    public void test4434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4434");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size4 = uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE;
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) '4', size4, 1);
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Cafe", (double) (short) -1, size4, 0);
        uk.ac.sheffield.com1003.cafe.Cafe cafe10 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray11 = cafe10.getMenu();
        boolean boolean12 = recipe8.equals((java.lang.Object) cafe10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe15 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0", (double) (short) -1);
        boolean boolean16 = recipe15.isReady();
        boolean boolean17 = cafe10.addRecipe(recipe15);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size20 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size20, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order25 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk27 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe22.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk27);
        double double29 = recipe22.getPrice();
        boolean boolean30 = recipe22.isReady();
        double double31 = recipe22.getPrice();
        boolean boolean32 = cafe10.addRecipe(recipe22);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee35 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 0, false);
        java.lang.String str36 = coffee35.toString();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size39 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe41 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size39, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order44 = new uk.ac.sheffield.com1003.cafe.Order(recipe41, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee45 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str46 = coffee45.toString();
        boolean boolean47 = recipe41.equals((java.lang.Object) str46);
        uk.ac.sheffield.com1003.cafe.Order order51 = new uk.ac.sheffield.com1003.cafe.Order(recipe41, "Syrup", (double) '#', "uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException");
        double double52 = recipe41.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order56 = new uk.ac.sheffield.com1003.cafe.Order(recipe41, "Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0", (double) 8, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        boolean boolean57 = coffee35.equals((java.lang.Object) "Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0");
        recipe22.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee35);
        org.junit.Assert.assertTrue("'" + size4 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE + "'", size4.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.LARGE));
        org.junit.Assert.assertNotNull(recipeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + size20 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size20.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str36, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertTrue("'" + size39 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size39.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str46, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test4435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4435");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Order order3 = cafe0.serveOrder();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray5 = cafe0.getMenu();
        // The following exception was thrown during execution in test generation
        try {
            cafe0.removeRecipe("Water [unit=ML, amount=30]");
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(order3);
        org.junit.Assert.assertNotNull(recipeArray5);
    }

    @Test
    public void test4436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4436");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1);
        java.lang.String str2 = milk1.toString();
        java.lang.String str3 = milk1.toString();
        java.lang.String str4 = milk1.toString();
        java.lang.String str5 = milk1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit6 = milk1.getUnit();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException7 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException7.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException9 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException10 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray11 = recipeNotFoundException10.getSuppressed();
        recipeNotFoundException9.addSuppressed((java.lang.Throwable) recipeNotFoundException10);
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException9);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException14 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray15 = cafeOutOfCapacityException14.getSuppressed();
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException14);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException17 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray18 = recipeNotFoundException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = recipeNotFoundException17.getSuppressed();
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        java.lang.Throwable[] throwableArray21 = recipeNotFoundException17.getSuppressed();
        boolean boolean22 = milk1.equals((java.lang.Object) throwableArray21);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee23 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str24 = coffee23.toString();
        java.lang.String str25 = coffee23.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe29 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Coffee [unit=GR, amount=8, decaf=false]]", (int) ' ', (int) (byte) 1);
        cafe29.printMenu();
        boolean boolean31 = coffee23.equals((java.lang.Object) cafe29);
        java.lang.String str32 = coffee23.toString();
        boolean boolean33 = milk1.equals((java.lang.Object) coffee23);
        java.lang.String str34 = milk1.toString();
        java.lang.String str35 = milk1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str2, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str3, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str4, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str5, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + unit6 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit6.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str24, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str25, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str32, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str34, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str35, "Milk [unit=ML, amount=-1, type=WHOLE]");
    }

    @Test
    public void test4437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4437");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("");
        java.lang.String str2 = syrup1.toString();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = recipeNotFoundException5.getSuppressed();
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException5);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException9 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException10 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray11 = recipeNotFoundException10.getSuppressed();
        recipeNotFoundException9.addSuppressed((java.lang.Throwable) recipeNotFoundException10);
        recipeNotFoundException5.addSuppressed((java.lang.Throwable) recipeNotFoundException10);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException14 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray15 = recipeNotFoundException14.getSuppressed();
        recipeNotFoundException10.addSuppressed((java.lang.Throwable) recipeNotFoundException14);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException17 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray18 = recipeNotFoundException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = recipeNotFoundException17.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException20 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray21 = recipeNotFoundException20.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException22 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException23 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray24 = recipeNotFoundException23.getSuppressed();
        recipeNotFoundException22.addSuppressed((java.lang.Throwable) recipeNotFoundException23);
        recipeNotFoundException20.addSuppressed((java.lang.Throwable) recipeNotFoundException22);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException27 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray28 = cafeOutOfCapacityException27.getSuppressed();
        recipeNotFoundException20.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException27);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException30 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray31 = recipeNotFoundException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException30.getSuppressed();
        recipeNotFoundException20.addSuppressed((java.lang.Throwable) recipeNotFoundException30);
        recipeNotFoundException17.addSuppressed((java.lang.Throwable) recipeNotFoundException30);
        recipeNotFoundException14.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        boolean boolean36 = syrup1.equals((java.lang.Object) recipeNotFoundException14);
        java.lang.Throwable[] throwableArray37 = recipeNotFoundException14.getSuppressed();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Syrup [unit=ML, amount=10, flavour=]" + "'", str2, "Syrup [unit=ML, amount=10, flavour=]");
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(throwableArray37);
    }

    @Test
    public void test4438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4438");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Cafe; Paid: 0.0", (double) (short) -1);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        boolean boolean9 = recipe7.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order15 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk17 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean18 = recipe7.equals((java.lang.Object) 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee19 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str20 = coffee19.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type21 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean22 = coffee19.equals((java.lang.Object) type21);
        java.lang.String str23 = coffee19.toString();
        recipe7.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee19);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit25 = coffee19.getUnit();
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee19);
        java.lang.String str27 = coffee19.getName();
        java.lang.String str28 = coffee19.toString();
        java.lang.String str29 = coffee19.getName();
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str20, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type21.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str23, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + unit25 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit25.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Coffee" + "'", str27, "Coffee");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str28, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Coffee" + "'", str29, "Coffee");
    }

    @Test
    public void test4439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4439");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        int int1 = water0.getAmount();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException3.getSuppressed();
        boolean boolean7 = water0.equals((java.lang.Object) recipeNotFoundException3);
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException3.getSuppressed();
        java.lang.Throwable[] throwableArray9 = recipeNotFoundException3.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException10 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray11 = recipeNotFoundException10.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException12.getSuppressed();
        recipeNotFoundException10.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException17 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray18 = recipeNotFoundException17.getSuppressed();
        recipeNotFoundException16.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        recipeNotFoundException12.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException21.getSuppressed();
        recipeNotFoundException17.addSuppressed((java.lang.Throwable) recipeNotFoundException21);
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException17);
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException3.getSuppressed();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk27 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ');
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException28 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray29 = recipeNotFoundException28.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException30 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray31 = recipeNotFoundException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException30.getSuppressed();
        recipeNotFoundException28.addSuppressed((java.lang.Throwable) recipeNotFoundException30);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException34 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException35 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray36 = recipeNotFoundException35.getSuppressed();
        recipeNotFoundException34.addSuppressed((java.lang.Throwable) recipeNotFoundException35);
        recipeNotFoundException30.addSuppressed((java.lang.Throwable) recipeNotFoundException35);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException39 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray40 = recipeNotFoundException39.getSuppressed();
        recipeNotFoundException35.addSuppressed((java.lang.Throwable) recipeNotFoundException39);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException42 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray43 = recipeNotFoundException42.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException44 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray45 = recipeNotFoundException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = recipeNotFoundException44.getSuppressed();
        recipeNotFoundException42.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException48 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException49 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray50 = recipeNotFoundException49.getSuppressed();
        recipeNotFoundException48.addSuppressed((java.lang.Throwable) recipeNotFoundException49);
        recipeNotFoundException44.addSuppressed((java.lang.Throwable) recipeNotFoundException49);
        java.lang.Throwable[] throwableArray53 = recipeNotFoundException44.getSuppressed();
        recipeNotFoundException39.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        boolean boolean55 = milk27.equals((java.lang.Object) recipeNotFoundException44);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size60 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe62 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size60, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe64 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee", (double) 1L, size60, 1);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException65 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray66 = recipeNotFoundException65.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException67 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray68 = recipeNotFoundException67.getSuppressed();
        java.lang.Throwable[] throwableArray69 = recipeNotFoundException67.getSuppressed();
        recipeNotFoundException65.addSuppressed((java.lang.Throwable) recipeNotFoundException67);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException71 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException72 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray73 = recipeNotFoundException72.getSuppressed();
        recipeNotFoundException71.addSuppressed((java.lang.Throwable) recipeNotFoundException72);
        recipeNotFoundException67.addSuppressed((java.lang.Throwable) recipeNotFoundException72);
        java.lang.Throwable[] throwableArray76 = recipeNotFoundException67.getSuppressed();
        boolean boolean77 = recipe64.equals((java.lang.Object) recipeNotFoundException67);
        java.lang.Throwable[] throwableArray78 = recipeNotFoundException67.getSuppressed();
        recipeNotFoundException44.addSuppressed((java.lang.Throwable) recipeNotFoundException67);
        java.lang.Throwable[] throwableArray80 = recipeNotFoundException44.getSuppressed();
        recipeNotFoundException3.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        java.lang.String str82 = recipeNotFoundException44.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 30 + "'", int1 == 30);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + size60 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size60.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str82, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4440");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray10 = cafe0.getMenu();
        cafe0.printMenu();
        java.lang.String str12 = cafe0.greeting();
        java.lang.String str13 = cafe0.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe16, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double20 = recipe16.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee23 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '4', true);
        boolean boolean25 = coffee23.equals((java.lang.Object) 10L);
        boolean boolean27 = coffee23.equals((java.lang.Object) (-1.0f));
        recipe16.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee23);
        double double29 = recipe16.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order33 = new uk.ac.sheffield.com1003.cafe.Order(recipe16, "Water [unit=ML, amount=0]", (double) (byte) 100, "Coffee [unit=GR, amount=0, decaf=false]");
        boolean boolean34 = cafe0.addRecipe(recipe16);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recipeArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Welcome to Cafe" + "'", str12, "Welcome to Cafe");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Cafe" + "'", str13, "Cafe");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test4441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4441");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("hi!", (double) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee5 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (byte) -1, true);
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee5);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit7 = coffee5.getUnit();
        java.lang.String str8 = coffee5.toString();
        org.junit.Assert.assertTrue("'" + unit7 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit7.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Coffee [unit=GR, amount=-1, decaf=true]" + "'", str8, "Coffee [unit=GR, amount=-1, decaf=true]");
    }

    @Test
    public void test4442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4442");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        java.lang.String str2 = cafe1.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe3 = null;
        boolean boolean4 = cafe1.addRecipe(recipe3);
        cafe1.printPendingOrders();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test4443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4443");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", 100.0d);
        double double13 = recipe4.getPrice();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test4444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4444");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee8 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str9 = coffee8.toString();
        boolean boolean10 = recipe4.equals((java.lang.Object) str9);
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Syrup", (double) '#', "uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water15 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str16 = water15.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk18 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean19 = water15.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit20 = water15.getUnit();
        int int21 = water15.getAmount();
        uk.ac.sheffield.com1003.cafe.Cafe cafe22 = new uk.ac.sheffield.com1003.cafe.Cafe();
        boolean boolean23 = water15.equals((java.lang.Object) cafe22);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water15);
        java.lang.String str25 = water15.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit26 = water15.getUnit();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size29 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe31 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size29, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order34 = new uk.ac.sheffield.com1003.cafe.Order(recipe31, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk36 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe31.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk36);
        double double38 = recipe31.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order41 = new uk.ac.sheffield.com1003.cafe.Order(recipe31, "Order: ; For: hi!; Paid: 0.0", 0.0d);
        uk.ac.sheffield.com1003.cafe.Order order44 = new uk.ac.sheffield.com1003.cafe.Order(recipe31, "Welcome to ", (double) (short) 100);
        boolean boolean45 = water15.equals((java.lang.Object) "Welcome to ");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type47 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk48 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(100, type47);
        java.lang.String str49 = milk48.getName();
        boolean boolean50 = water15.equals((java.lang.Object) milk48);
        java.lang.String str51 = milk48.toString();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str9, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Water" + "'", str16, "Water");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + unit20 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit20.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 30 + "'", int21 == 30);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Water [unit=ML, amount=30]" + "'", str25, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + unit26 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit26.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + size29 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size29.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI + "'", type47.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SEMI));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Milk" + "'", str49, "Milk");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Milk [unit=ML, amount=100, type=SEMI]" + "'", str51, "Milk [unit=ML, amount=100, type=SEMI]");
    }

    @Test
    public void test4445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4445");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        double double5 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "", (double) (short) 10, "Water [unit=ML, amount=30]");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water13 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str14 = water13.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water13);
        uk.ac.sheffield.com1003.cafe.Cafe cafe16 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe16.printPendingOrders();
        java.lang.String str18 = cafe16.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray19 = cafe16.getMenu();
        cafe16.printMenu();
        boolean boolean21 = water13.equals((java.lang.Object) cafe16);
        java.lang.String str22 = water13.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe25 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean26 = water13.equals((java.lang.Object) 1.0f);
        uk.ac.sheffield.com1003.cafe.Cafe cafe28 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Cafe");
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray29 = cafe28.getMenu();
        boolean boolean30 = water13.equals((java.lang.Object) recipeArray29);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size33 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe35 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size33, (int) (short) 10);
        double double36 = recipe35.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order39 = new uk.ac.sheffield.com1003.cafe.Order(recipe35, "Water", (double) 1L);
        uk.ac.sheffield.com1003.cafe.Order order43 = new uk.ac.sheffield.com1003.cafe.Order(recipe35, "Order: ; For: Coffee [unit=GR, amount=30, decaf=false]; Paid: 0.0", (double) (byte) 10, "Milk [unit=ML, amount=32, type=WHOLE]");
        boolean boolean44 = water13.equals((java.lang.Object) order43);
        order43.printReceipt();
        java.lang.String str46 = order43.toString();
        java.lang.String str47 = order43.toString();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Welcome to Cafe" + "'", str18, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Water" + "'", str22, "Water");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(recipeArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + size33 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size33.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Order: ; For: Order: ; For: Coffee [unit=GR, amount=30, decaf=false]; Paid: 0.0; Paid: 10.0" + "'", str46, "Order: ; For: Order: ; For: Coffee [unit=GR, amount=30, decaf=false]; Paid: 0.0; Paid: 10.0");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Order: ; For: Order: ; For: Coffee [unit=GR, amount=30, decaf=false]; Paid: 0.0; Paid: 10.0" + "'", str47, "Order: ; For: Order: ; For: Coffee [unit=GR, amount=30, decaf=false]; Paid: 0.0; Paid: 10.0");
    }

    @Test
    public void test4446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4446");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type1 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.ALMOND;
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk2 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(35, type1);
        java.lang.String str3 = milk2.getName();
        org.junit.Assert.assertTrue("'" + type1 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.ALMOND + "'", type1.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.ALMOND));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Milk" + "'", str3, "Milk");
    }

    @Test
    public void test4447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4447");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Water", 100.0d);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        boolean boolean15 = recipe4.equals((java.lang.Object) 10);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup17 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Water");
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) syrup17);
        java.lang.String str19 = syrup17.toString();
        java.lang.String str20 = syrup17.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe22 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0; Paid: -1.0");
        boolean boolean23 = syrup17.equals((java.lang.Object) cafe22);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray24 = cafe22.getMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray25 = cafe22.getMenu();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Water]" + "'", str19, "Syrup [unit=ML, amount=10, flavour=Water]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Water]" + "'", str20, "Syrup [unit=ML, amount=10, flavour=Water]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(recipeArray24);
        org.junit.Assert.assertNotNull(recipeArray25);
    }

    @Test
    public void test4448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4448");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("hi!");
        java.lang.Object obj2 = null;
        boolean boolean3 = syrup1.equals(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test4449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4449");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean3 = recipe2.isReady();
        boolean boolean4 = recipe2.isReady();
        uk.ac.sheffield.com1003.cafe.Order order8 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: ; For: Welcome to Cafe; Paid: 10.0", (double) (short) 0, "Order: ; For: Syrup; Paid: 35.0");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk10 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ');
        uk.ac.sheffield.com1003.cafe.ingredients.Water water11 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str12 = water11.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean15 = water11.equals((java.lang.Object) 30);
        java.lang.String str16 = water11.toString();
        java.lang.String str17 = water11.getName();
        boolean boolean19 = water11.equals((java.lang.Object) (byte) -1);
        java.lang.String str20 = water11.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit21 = water11.getUnit();
        boolean boolean22 = milk10.equals((java.lang.Object) water11);
        java.lang.String str23 = milk10.getName();
        java.lang.String str24 = milk10.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup26 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: ; Paid: 0.0");
        boolean boolean27 = milk10.equals((java.lang.Object) "Order: ; For: ; Paid: 0.0");
        int int28 = milk10.getAmount();
        boolean boolean29 = recipe2.equals((java.lang.Object) milk10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Water" + "'", str12, "Water");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Water [unit=ML, amount=30]" + "'", str16, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Water" + "'", str17, "Water");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Water" + "'", str20, "Water");
        org.junit.Assert.assertTrue("'" + unit21 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit21.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Milk" + "'", str23, "Milk");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Milk [unit=ML, amount=32, type=WHOLE]" + "'", str24, "Milk [unit=ML, amount=32, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test4450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4450");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Coffee [unit=GR, amount=32, decaf=false]");
    }

    @Test
    public void test4451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4451");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=]]");
        cafe1.printMenu();
    }

    @Test
    public void test4452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4452");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup0 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size3 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe5 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size3, (int) (short) 10);
        boolean boolean7 = recipe5.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe5, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe5, "Coffee [unit=GR, amount=0, decaf=false]", 0.0d);
        java.lang.String str14 = order13.toString();
        java.lang.String str15 = order13.toString();
        java.lang.String str16 = order13.toString();
        order13.serve();
        order13.serve();
        boolean boolean19 = syrup0.equals((java.lang.Object) order13);
        org.junit.Assert.assertTrue("'" + size3 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size3.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0" + "'", str14, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0" + "'", str15, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0" + "'", str16, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test4453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4453");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        int int2 = milk1.getAmount();
        uk.ac.sheffield.com1003.cafe.Recipe recipe5 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) 10L);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water6 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str7 = water6.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean10 = water6.equals((java.lang.Object) 30);
        java.lang.String str11 = water6.toString();
        java.lang.String str12 = water6.getName();
        boolean boolean14 = water6.equals((java.lang.Object) (byte) -1);
        java.lang.String str15 = water6.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup17 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: Welcome to Cafe; Paid: 10.0");
        java.lang.String str18 = syrup17.toString();
        java.lang.String str19 = syrup17.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit20 = syrup17.getUnit();
        boolean boolean21 = water6.equals((java.lang.Object) syrup17);
        recipe5.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water6);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water24 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 0);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee28 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str29 = coffee28.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type30 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean31 = coffee28.equals((java.lang.Object) type30);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk32 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type30);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk33 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '4', type30);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk34 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1, type30);
        boolean boolean35 = water24.equals((java.lang.Object) type30);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk37 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((-1));
        java.lang.String str38 = milk37.toString();
        java.lang.String str39 = milk37.getName();
        boolean boolean40 = water24.equals((java.lang.Object) milk37);
        recipe5.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk37);
        boolean boolean42 = milk1.equals((java.lang.Object) recipe5);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee44 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) ' ');
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit45 = coffee44.getUnit();
        boolean boolean46 = recipe5.equals((java.lang.Object) coffee44);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water" + "'", str7, "Water");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Water [unit=ML, amount=30]" + "'", str11, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Water" + "'", str12, "Water");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Water" + "'", str15, "Water");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]" + "'", str18, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]" + "'", str19, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        org.junit.Assert.assertTrue("'" + unit20 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit20.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str29, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type30.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Milk [unit=ML, amount=-1, type=WHOLE]" + "'", str38, "Milk [unit=ML, amount=-1, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Milk" + "'", str39, "Milk");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + unit45 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit45.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test4454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4454");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order1 = cafe0.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order2 = cafe0.serveOrder();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = null;
        boolean boolean5 = cafe0.addRecipe(recipe4);
        java.lang.String str6 = cafe0.getName();
        org.junit.Assert.assertNull(order1);
        org.junit.Assert.assertNull(order2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Cafe" + "'", str6, "Cafe");
    }

    @Test
    public void test4455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4455");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size2, (int) '4');
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order9 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Welcome to Cafe", 0.0d);
        boolean boolean11 = recipe4.equals((java.lang.Object) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0", 0.0d);
        order14.printReceipt();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4456");
        uk.ac.sheffield.com1003.cafe.Recipe recipe0 = null;
        uk.ac.sheffield.com1003.cafe.Order order3 = new uk.ac.sheffield.com1003.cafe.Order(recipe0, "Coffee [unit=GR, amount=1, decaf=false]", (double) 0.0f);
        order3.serve();
        order3.serve();
        java.lang.Class<?> wildcardClass6 = order3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test4457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4457");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        java.lang.String str10 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray11 = cafe0.getMenu();
        cafe0.printPendingOrders();
        cafe0.printMenu();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Welcome to Cafe" + "'", str10, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray11);
    }

    @Test
    public void test4458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4458");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order5 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double6 = recipe2.getPrice();
        double double7 = recipe2.getPrice();
        double double8 = recipe2.getPrice();
        double double9 = recipe2.getPrice();
        boolean boolean10 = recipe2.isReady();
        uk.ac.sheffield.com1003.cafe.Order order13 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: -1.0", 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4459");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) 'a');
    }

    @Test
    public void test4460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4460");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=10, type=SEMI]", 10, (int) (short) 0);
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray4 = cafe3.getMenu();
        org.junit.Assert.assertNotNull(recipeArray4);
    }

    @Test
    public void test4461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4461");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk9);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk14 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type15 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean16 = milk14.equals((java.lang.Object) type15);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk17 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(0, type15);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk18 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ', type15);
        java.lang.String str19 = milk18.toString();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk18);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk22 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) '#');
        uk.ac.sheffield.com1003.cafe.ingredients.Water water23 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str24 = water23.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk26 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean27 = water23.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit28 = water23.getUnit();
        java.lang.Class<?> wildcardClass29 = unit28.getClass();
        boolean boolean30 = milk22.equals((java.lang.Object) wildcardClass29);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk22);
        uk.ac.sheffield.com1003.cafe.Cafe cafe32 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order33 = cafe32.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order34 = cafe32.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order35 = cafe32.serveOrder();
        java.lang.String str36 = cafe32.greeting();
        java.lang.String str37 = cafe32.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray38 = cafe32.getMenu();
        boolean boolean39 = milk22.equals((java.lang.Object) cafe32);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit40 = milk22.getUnit();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type15.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Milk [unit=ML, amount=32, type=SKIMMED]" + "'", str19, "Milk [unit=ML, amount=32, type=SKIMMED]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Water" + "'", str24, "Water");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + unit28 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit28.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(order33);
        org.junit.Assert.assertNull(order34);
        org.junit.Assert.assertNull(order35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Welcome to Cafe" + "'", str36, "Welcome to Cafe");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Welcome to Cafe" + "'", str37, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + unit40 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit40.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
    }

    @Test
    public void test4462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4462");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=]]", (double) 1.0f);
    }

    @Test
    public void test4463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4463");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        cafe0.printMenu();
        cafe0.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=1, decaf=false]", (double) (short) -1);
        double double15 = recipe14.getPrice();
        boolean boolean16 = cafe0.addRecipe(recipe14);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException17 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray18 = recipeNotFoundException17.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException19 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray20 = recipeNotFoundException19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = recipeNotFoundException19.getSuppressed();
        recipeNotFoundException17.addSuppressed((java.lang.Throwable) recipeNotFoundException19);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException23 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException24 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException24.getSuppressed();
        recipeNotFoundException23.addSuppressed((java.lang.Throwable) recipeNotFoundException24);
        recipeNotFoundException19.addSuppressed((java.lang.Throwable) recipeNotFoundException24);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException28 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray29 = recipeNotFoundException28.getSuppressed();
        recipeNotFoundException24.addSuppressed((java.lang.Throwable) recipeNotFoundException28);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException31 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = recipeNotFoundException31.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException34 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray35 = recipeNotFoundException34.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException36 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException37 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray38 = recipeNotFoundException37.getSuppressed();
        recipeNotFoundException36.addSuppressed((java.lang.Throwable) recipeNotFoundException37);
        recipeNotFoundException34.addSuppressed((java.lang.Throwable) recipeNotFoundException36);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException41 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray42 = cafeOutOfCapacityException41.getSuppressed();
        recipeNotFoundException34.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException41);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException44 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray45 = recipeNotFoundException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = recipeNotFoundException44.getSuppressed();
        recipeNotFoundException34.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        recipeNotFoundException31.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        recipeNotFoundException28.addSuppressed((java.lang.Throwable) recipeNotFoundException31);
        java.lang.Throwable[] throwableArray50 = recipeNotFoundException31.getSuppressed();
        java.lang.Throwable[] throwableArray51 = recipeNotFoundException31.getSuppressed();
        boolean boolean52 = recipe14.equals((java.lang.Object) recipeNotFoundException31);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test4464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4464");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size10 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe12 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size10, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("Water", (double) 1, size10, (int) ' ');
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0]", 0.0d, size10, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe18 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]", (double) (short) -1, size10, 0);
        uk.ac.sheffield.com1003.cafe.Recipe recipe20 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Water [unit=ML, amount=0]; Paid: 100.0", (double) ' ', size10, 30);
        org.junit.Assert.assertTrue("'" + size10 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size10.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
    }

    @Test
    public void test4465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4465");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Cafe cafe5 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (int) (short) 100, (int) '#');
        cafe5.printPendingOrders();
        boolean boolean7 = water1.equals((java.lang.Object) cafe5);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit8 = water1.getUnit();
        int int9 = water1.getAmount();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + unit8 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit8.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test4466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4466");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) ' ');
        uk.ac.sheffield.com1003.cafe.ingredients.Water water2 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str3 = water2.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean6 = water2.equals((java.lang.Object) 30);
        java.lang.String str7 = water2.toString();
        java.lang.String str8 = water2.getName();
        boolean boolean10 = water2.equals((java.lang.Object) (byte) -1);
        java.lang.String str11 = water2.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit12 = water2.getUnit();
        boolean boolean13 = milk1.equals((java.lang.Object) water2);
        java.lang.String str14 = milk1.getName();
        uk.ac.sheffield.com1003.cafe.Cafe cafe15 = new uk.ac.sheffield.com1003.cafe.Cafe();
        uk.ac.sheffield.com1003.cafe.Order order16 = cafe15.serveOrder();
        uk.ac.sheffield.com1003.cafe.Order order17 = cafe15.serveOrder();
        cafe15.printMenu();
        boolean boolean19 = milk1.equals((java.lang.Object) cafe15);
        uk.ac.sheffield.com1003.cafe.Order order20 = cafe15.serveOrder();
        cafe15.printPendingOrders();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Water" + "'", str3, "Water");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water [unit=ML, amount=30]" + "'", str7, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water" + "'", str8, "Water");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Water" + "'", str11, "Water");
        org.junit.Assert.assertTrue("'" + unit12 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit12.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Milk" + "'", str14, "Milk");
        org.junit.Assert.assertNull(order16);
        org.junit.Assert.assertNull(order17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(order20);
    }

    @Test
    public void test4467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4467");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: Water [unit=ML, amount=30]; For: Order: ; For: Water; Paid: 1.0; Paid: 1.0", (double) 8);
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: ; For: Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; Paid: 1.0", (double) 10.0f, "Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=30, type=WHOLE]]");
    }

    @Test
    public void test4468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4468");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (short) 10);
        java.lang.String str2 = water1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water [unit=ML, amount=10]" + "'", str2, "Water [unit=ML, amount=10]");
    }

    @Test
    public void test4469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4469");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=8, decaf=false]", (double) (-1), size2, 0);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Order: ; For: hi!; Paid: 0.0", (double) 'a');
        java.lang.String str8 = recipe4.getName();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str8, "Coffee [unit=GR, amount=8, decaf=false]");
    }

    @Test
    public void test4470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4470");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str2 = coffee1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean4 = coffee1.equals((java.lang.Object) type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type3);
        java.lang.String str6 = milk5.getName();
        java.lang.String str7 = milk5.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe9 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe9.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray11 = cafe9.getMenu();
        java.lang.String str12 = cafe9.getName();
        java.lang.String str13 = cafe9.getName();
        boolean boolean14 = milk5.equals((java.lang.Object) cafe9);
        uk.ac.sheffield.com1003.cafe.Order order15 = cafe9.serveOrder();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = cafe9.placeOrder("Order: ; For: ; Paid: 0.0", "Welcome to Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=-1, type=WHOLE]]", (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk" + "'", str6, "Milk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Milk [unit=ML, amount=10, type=SKIMMED]" + "'", str7, "Milk [unit=ML, amount=10, type=SKIMMED]");
        org.junit.Assert.assertNotNull(recipeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(order15);
    }

    @Test
    public void test4471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4471");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 100);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray3 = recipeNotFoundException2.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException4 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException5 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray6 = recipeNotFoundException5.getSuppressed();
        recipeNotFoundException4.addSuppressed((java.lang.Throwable) recipeNotFoundException5);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException4);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException9 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray10 = recipeNotFoundException9.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException11 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException12 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray13 = recipeNotFoundException12.getSuppressed();
        recipeNotFoundException11.addSuppressed((java.lang.Throwable) recipeNotFoundException12);
        recipeNotFoundException9.addSuppressed((java.lang.Throwable) recipeNotFoundException11);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException16 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray17 = cafeOutOfCapacityException16.getSuppressed();
        recipeNotFoundException9.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException16);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException9);
        boolean boolean20 = milk1.equals((java.lang.Object) recipeNotFoundException2);
        java.lang.Throwable[] throwableArray21 = recipeNotFoundException2.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException22 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray23 = cafeOutOfCapacityException22.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException24 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException24.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException26 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray27 = recipeNotFoundException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = recipeNotFoundException26.getSuppressed();
        recipeNotFoundException24.addSuppressed((java.lang.Throwable) recipeNotFoundException26);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException30 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException31 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray32 = recipeNotFoundException31.getSuppressed();
        recipeNotFoundException30.addSuppressed((java.lang.Throwable) recipeNotFoundException31);
        recipeNotFoundException26.addSuppressed((java.lang.Throwable) recipeNotFoundException31);
        cafeOutOfCapacityException22.addSuppressed((java.lang.Throwable) recipeNotFoundException26);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException36 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray37 = recipeNotFoundException36.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException38 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray39 = recipeNotFoundException38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = recipeNotFoundException38.getSuppressed();
        recipeNotFoundException36.addSuppressed((java.lang.Throwable) recipeNotFoundException38);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException42 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray43 = recipeNotFoundException42.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException44 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException45 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray46 = recipeNotFoundException45.getSuppressed();
        recipeNotFoundException44.addSuppressed((java.lang.Throwable) recipeNotFoundException45);
        recipeNotFoundException42.addSuppressed((java.lang.Throwable) recipeNotFoundException44);
        recipeNotFoundException36.addSuppressed((java.lang.Throwable) recipeNotFoundException42);
        recipeNotFoundException26.addSuppressed((java.lang.Throwable) recipeNotFoundException36);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException26);
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException52 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray53 = cafeOutOfCapacityException52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = cafeOutOfCapacityException52.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) cafeOutOfCapacityException52);
        java.lang.String str56 = recipeNotFoundException2.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str56, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4472");
        // The following exception was thrown during execution in test generation
        try {
            uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Coffee [unit=GR, amount=8, decaf=false]; Paid: -1.0]", (-1), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4473");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", 0, (int) (byte) 100);
        java.lang.String str4 = cafe3.greeting();
        cafe3.printMenu();
        java.lang.String str6 = cafe3.greeting();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str4, "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str6, "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4474");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Welcome to ]", (int) 'a', (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = cafe3.placeOrder("Water [unit=ML, amount=10]", "Syrup [unit=ML, amount=10, flavour=Welcome to Milk]", 8.0d);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4475");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0", (int) 'a', (int) (short) 10);
        java.lang.String str4 = cafe3.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray5 = cafe3.getMenu();
        cafe3.printPendingOrders();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Welcome to Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0" + "'", str4, "Welcome to Order: Coffee [unit=GR, amount=8, decaf=false]; For: Milk [unit=ML, amount=100, type=WHOLE]; Paid: 97.0");
        org.junit.Assert.assertNotNull(recipeArray5);
    }

    @Test
    public void test4476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4476");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) 1);
        int int2 = milk1.getAmount();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water3 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str4 = water3.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order14 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean15 = water3.equals((java.lang.Object) "Welcome to Cafe");
        boolean boolean16 = milk1.equals((java.lang.Object) boolean15);
        java.lang.String str17 = milk1.getName();
        java.lang.String str18 = milk1.getName();
        int int19 = milk1.getAmount();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee22 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(0, false);
        int int23 = coffee22.getAmount();
        boolean boolean24 = milk1.equals((java.lang.Object) coffee22);
        int int25 = coffee22.getAmount();
        uk.ac.sheffield.com1003.cafe.Cafe cafe29 = new uk.ac.sheffield.com1003.cafe.Cafe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (int) (short) 100, (int) '#');
        cafe29.printPendingOrders();
        cafe29.printPendingOrders();
        cafe29.printPendingOrders();
        java.lang.String str33 = cafe29.greeting();
        uk.ac.sheffield.com1003.cafe.Order order34 = cafe29.serveOrder();
        boolean boolean35 = coffee22.equals((java.lang.Object) cafe29);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water" + "'", str4, "Water");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Milk" + "'", str17, "Milk");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Milk" + "'", str18, "Milk");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str33, "Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        org.junit.Assert.assertNull(order34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test4477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4477");
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException0 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray1 = recipeNotFoundException0.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException2 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException3 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray4 = recipeNotFoundException3.getSuppressed();
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException3);
        recipeNotFoundException0.addSuppressed((java.lang.Throwable) recipeNotFoundException2);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException7 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray8 = recipeNotFoundException7.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException9 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray10 = recipeNotFoundException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = recipeNotFoundException9.getSuppressed();
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException9);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException13 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray14 = recipeNotFoundException13.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException15 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException16 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray17 = recipeNotFoundException16.getSuppressed();
        recipeNotFoundException15.addSuppressed((java.lang.Throwable) recipeNotFoundException16);
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) recipeNotFoundException15);
        recipeNotFoundException7.addSuppressed((java.lang.Throwable) recipeNotFoundException13);
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException21 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray22 = recipeNotFoundException21.getSuppressed();
        uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException recipeNotFoundException23 = new uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException();
        java.lang.Throwable[] throwableArray24 = recipeNotFoundException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = recipeNotFoundException23.getSuppressed();
        recipeNotFoundException21.addSuppressed((java.lang.Throwable) recipeNotFoundException23);
        recipeNotFoundException13.addSuppressed((java.lang.Throwable) recipeNotFoundException23);
        recipeNotFoundException2.addSuppressed((java.lang.Throwable) recipeNotFoundException13);
        java.lang.String str29 = recipeNotFoundException2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str29, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
    }

    @Test
    public void test4478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4478");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", 35.0d);
        uk.ac.sheffield.com1003.cafe.Order order6 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=Syrup [unit=ML, amount=10, flavour=]]]", 52.0d, "Welcome to Welcome to Cafe");
        double double7 = recipe2.getPrice();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test4479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4479");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        java.lang.String str2 = cafe1.greeting();
        uk.ac.sheffield.com1003.cafe.Cafe cafe6 = new uk.ac.sheffield.com1003.cafe.Cafe("Water", (int) (byte) 1, (int) (short) 1);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size9 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe11 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size9, (int) (short) 10);
        boolean boolean13 = recipe11.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "hi!", (double) 0L);
        uk.ac.sheffield.com1003.cafe.Order order19 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "Coffee [unit=GR, amount=0, decaf=false]", 0.0d);
        java.lang.String str20 = recipe11.getName();
        java.lang.String str21 = recipe11.getName();
        boolean boolean22 = cafe6.addRecipe(recipe11);
        java.lang.String str23 = recipe11.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe26 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order29 = new uk.ac.sheffield.com1003.cafe.Order(recipe26, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double30 = recipe26.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee32 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 10);
        recipe26.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee32);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit34 = coffee32.getUnit();
        recipe11.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee32);
        boolean boolean36 = cafe1.addRecipe(recipe11);
        // The following exception was thrown during execution in test generation
        try {
            cafe1.removeRecipe("Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 35.0");
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str2, "Welcome to Welcome to uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        org.junit.Assert.assertTrue("'" + size9 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size9.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + unit34 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR + "'", unit34.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.GR));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test4480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4480");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        java.lang.String str2 = water1.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe5 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=100, decaf=false]", (double) 'a');
        boolean boolean6 = water1.equals((java.lang.Object) "Coffee [unit=GR, amount=100, decaf=false]");
        java.lang.String str7 = water1.getName();
        java.lang.String str8 = water1.getName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water [unit=ML, amount=100]" + "'", str2, "Water [unit=ML, amount=100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water" + "'", str7, "Water");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water" + "'", str8, "Water");
    }

    @Test
    public void test4481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4481");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk1 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj2 = null;
        boolean boolean3 = milk1.equals(obj2);
        java.lang.String str4 = milk1.toString();
        java.lang.String str5 = milk1.getName();
        java.lang.String str6 = milk1.toString();
        java.lang.String str7 = milk1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk8 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk();
        uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException cafeOutOfCapacityException9 = new uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException();
        java.lang.Throwable[] throwableArray10 = cafeOutOfCapacityException9.getSuppressed();
        boolean boolean11 = milk8.equals((java.lang.Object) throwableArray10);
        java.lang.String str12 = milk8.toString();
        boolean boolean13 = milk1.equals((java.lang.Object) milk8);
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Syrup [unit=ML, amount=10, flavour=Order: ; For: ; Paid: 10.0]", 8.0d);
        boolean boolean17 = milk8.equals((java.lang.Object) 8.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str4, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Milk" + "'", str5, "Milk");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str6, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str7, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Milk [unit=ML, amount=100, type=WHOLE]" + "'", str12, "Milk [unit=ML, amount=100, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test4482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4482");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size2, (int) '4');
        boolean boolean6 = recipe4.equals((java.lang.Object) 10.0d);
        double double7 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order11 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Syrup [unit=ML, amount=10, flavour=Water]", 0.0d, "Milk [unit=ML, amount=35, type=WHOLE]");
        boolean boolean12 = recipe4.isReady();
        double double13 = recipe4.getPrice();
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) 10L);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water17 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str18 = water17.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk20 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean21 = water17.equals((java.lang.Object) 30);
        java.lang.String str22 = water17.toString();
        java.lang.String str23 = water17.getName();
        boolean boolean25 = water17.equals((java.lang.Object) (byte) -1);
        java.lang.String str26 = water17.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup28 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: Welcome to Cafe; Paid: 10.0");
        java.lang.String str29 = syrup28.toString();
        java.lang.String str30 = syrup28.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit31 = syrup28.getUnit();
        boolean boolean32 = water17.equals((java.lang.Object) syrup28);
        recipe16.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water17);
        java.lang.String str34 = recipe16.getName();
        uk.ac.sheffield.com1003.cafe.Order order38 = new uk.ac.sheffield.com1003.cafe.Order(recipe16, "Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=WHOLE]; Paid: 1.0", (double) '4', "Milk [unit=ML, amount=10, type=WHOLE]");
        boolean boolean39 = recipe16.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee42 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 0, false);
        java.lang.String str43 = coffee42.toString();
        recipe16.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee42);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee42);
        java.lang.String str46 = coffee42.toString();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Water" + "'", str18, "Water");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Water [unit=ML, amount=30]" + "'", str22, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Water" + "'", str23, "Water");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Water" + "'", str26, "Water");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]" + "'", str29, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]" + "'", str30, "Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]");
        org.junit.Assert.assertTrue("'" + unit31 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit31.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException" + "'", str34, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str43, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str46, "Coffee [unit=GR, amount=0, decaf=false]");
    }

    @Test
    public void test4483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4483");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0]", (int) (byte) 100, (int) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Order order4 = cafe3.serveOrder();
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("Welcome to Order: ; For: hi!; Paid: 0.0", (double) 100);
        boolean boolean8 = cafe3.addRecipe(recipe7);
        uk.ac.sheffield.com1003.cafe.Recipe recipe11 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean12 = recipe11.isReady();
        java.lang.String str13 = recipe11.getName();
        java.lang.String str14 = recipe11.getName();
        uk.ac.sheffield.com1003.cafe.Recipe recipe17 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order20 = new uk.ac.sheffield.com1003.cafe.Order(recipe17, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double21 = recipe17.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee24 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '4', true);
        boolean boolean26 = coffee24.equals((java.lang.Object) 10L);
        boolean boolean28 = coffee24.equals((java.lang.Object) (-1.0f));
        recipe17.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee24);
        double double30 = recipe17.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order34 = new uk.ac.sheffield.com1003.cafe.Order(recipe17, "Water [unit=ML, amount=0]", (double) (byte) 100, "Coffee [unit=GR, amount=0, decaf=false]");
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk36 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        java.lang.Object obj37 = null;
        boolean boolean38 = milk36.equals(obj37);
        java.lang.String str39 = milk36.toString();
        java.lang.String str40 = milk36.getName();
        int int41 = milk36.getAmount();
        boolean boolean43 = milk36.equals((java.lang.Object) "Water [unit=ML, amount=100]");
        recipe17.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk36);
        java.lang.String str45 = milk36.toString();
        boolean boolean46 = recipe11.equals((java.lang.Object) milk36);
        boolean boolean48 = milk36.equals((java.lang.Object) "Coffee [unit=GR, amount=0, decaf=true]");
        java.lang.String str49 = milk36.toString();
        uk.ac.sheffield.com1003.cafe.Recipe recipe52 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order55 = new uk.ac.sheffield.com1003.cafe.Order(recipe52, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        uk.ac.sheffield.com1003.cafe.Order order59 = new uk.ac.sheffield.com1003.cafe.Order(recipe52, "Cafe", (double) 0.0f, "Welcome to Cafe");
        boolean boolean60 = recipe52.isReady();
        java.lang.String str61 = recipe52.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size64 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe66 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size64, (int) '4');
        boolean boolean68 = recipe66.equals((java.lang.Object) 10.0d);
        double double69 = recipe66.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order73 = new uk.ac.sheffield.com1003.cafe.Order(recipe66, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean74 = recipe52.equals((java.lang.Object) "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean75 = milk36.equals((java.lang.Object) boolean74);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit76 = milk36.getUnit();
        boolean boolean77 = recipe7.equals((java.lang.Object) milk36);
        uk.ac.sheffield.com1003.cafe.Cafe cafe81 = new uk.ac.sheffield.com1003.cafe.Cafe("Milk [unit=ML, amount=-1, type=SKIMMED]", (int) '4', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Cafe cafe85 = new uk.ac.sheffield.com1003.cafe.Cafe("Coffee [unit=GR, amount=0, decaf=false]", 30, (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe recipe88 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 1.0f);
        boolean boolean89 = cafe85.addRecipe(recipe88);
        boolean boolean90 = cafe81.addRecipe(recipe88);
        java.lang.String str91 = cafe81.greeting();
        boolean boolean92 = milk36.equals((java.lang.Object) cafe81);
        org.junit.Assert.assertNull(order4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Water [unit=ML, amount=30]" + "'", str13, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Water [unit=ML, amount=30]" + "'", str14, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str39, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Milk" + "'", str40, "Milk");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str45, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Milk [unit=ML, amount=10, type=WHOLE]" + "'", str49, "Milk [unit=ML, amount=10, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Milk [unit=ML, amount=100, type=WHOLE]" + "'", str61, "Milk [unit=ML, amount=100, type=WHOLE]");
        org.junit.Assert.assertTrue("'" + size64 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size64.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + unit76 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit76.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Welcome to Milk [unit=ML, amount=-1, type=SKIMMED]" + "'", str91, "Welcome to Milk [unit=ML, amount=-1, type=SKIMMED]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test4484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4484");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water(0);
        java.lang.String str2 = water1.getName();
        java.lang.String str3 = water1.getName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Water" + "'", str2, "Water");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Water" + "'", str3, "Water");
    }

    @Test
    public void test4485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4485");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee2 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) -1, false);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water3 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str4 = water3.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk6 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean7 = water3.equals((java.lang.Object) 30);
        java.lang.String str8 = water3.toString();
        java.lang.String str9 = water3.getName();
        java.lang.String str10 = water3.getName();
        java.lang.String str11 = water3.toString();
        java.lang.String str12 = water3.toString();
        java.lang.String str13 = water3.toString();
        int int14 = water3.getAmount();
        java.lang.String str15 = water3.toString();
        boolean boolean17 = water3.equals((java.lang.Object) "Water");
        java.lang.String str18 = water3.getName();
        boolean boolean19 = coffee2.equals((java.lang.Object) str18);
        java.lang.String str20 = coffee2.toString();
        java.lang.String str21 = coffee2.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Water" + "'", str4, "Water");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Water" + "'", str9, "Water");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Water" + "'", str10, "Water");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Water [unit=ML, amount=30]" + "'", str11, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Water [unit=ML, amount=30]" + "'", str12, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Water [unit=ML, amount=30]" + "'", str13, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 30 + "'", int14 == 30);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Water [unit=ML, amount=30]" + "'", str15, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Water" + "'", str18, "Water");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Coffee [unit=GR, amount=-1, decaf=false]" + "'", str20, "Coffee [unit=GR, amount=-1, decaf=false]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Coffee [unit=GR, amount=-1, decaf=false]" + "'", str21, "Coffee [unit=GR, amount=-1, decaf=false]");
    }

    @Test
    public void test4486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4486");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=52, type=SEMI]", (double) (short) 100);
    }

    @Test
    public void test4487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4487");
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup1 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0");
        java.lang.String str2 = syrup1.toString();
        java.lang.String str3 = syrup1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit4 = syrup1.getUnit();
        java.lang.String str5 = syrup1.toString();
        java.lang.String str6 = syrup1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]" + "'", str2, "Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]" + "'", str3, "Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]");
        org.junit.Assert.assertTrue("'" + unit4 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit4.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]" + "'", str5, "Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]" + "'", str6, "Syrup [unit=ML, amount=10, flavour=Order: Water [unit=ML, amount=30]; For: Syrup [unit=ML, amount=10, flavour=Plain]; Paid: -1.0]");
    }

    @Test
    public void test4488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4488");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Milk [unit=ML, amount=-1, type=SEMI]]");
        uk.ac.sheffield.com1003.cafe.Order order2 = cafe1.serveOrder();
        org.junit.Assert.assertNull(order2);
    }

    @Test
    public void test4489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4489");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water1 = new uk.ac.sheffield.com1003.cafe.ingredients.Water((int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee3 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(30);
        uk.ac.sheffield.com1003.cafe.Recipe recipe6 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 0);
        boolean boolean7 = recipe6.isReady();
        java.lang.String str8 = recipe6.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee9 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        recipe6.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee9);
        boolean boolean11 = coffee3.equals((java.lang.Object) recipe6);
        boolean boolean12 = water1.equals((java.lang.Object) recipe6);
        boolean boolean13 = recipe6.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee16 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee(0, true);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size19 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe21 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size19, (int) (short) 10);
        double double22 = recipe21.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order25 = new uk.ac.sheffield.com1003.cafe.Order(recipe21, "Water", (double) 1L);
        java.lang.String str26 = recipe21.getName();
        double double27 = recipe21.getPrice();
        boolean boolean28 = coffee16.equals((java.lang.Object) double27);
        uk.ac.sheffield.com1003.cafe.ingredients.Syrup syrup30 = new uk.ac.sheffield.com1003.cafe.ingredients.Syrup("Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0");
        uk.ac.sheffield.com1003.cafe.Recipe recipe33 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order36 = new uk.ac.sheffield.com1003.cafe.Order(recipe33, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double37 = recipe33.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee40 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '4', true);
        boolean boolean42 = coffee40.equals((java.lang.Object) 10L);
        boolean boolean44 = coffee40.equals((java.lang.Object) (-1.0f));
        recipe33.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee40);
        double double46 = recipe33.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order49 = new uk.ac.sheffield.com1003.cafe.Order(recipe33, "Welcome to ", (double) 30);
        boolean boolean50 = syrup30.equals((java.lang.Object) 30);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit51 = syrup30.getUnit();
        boolean boolean52 = coffee16.equals((java.lang.Object) unit51);
        java.lang.String str53 = coffee16.toString();
        recipe6.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee16);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Water [unit=ML, amount=30]" + "'", str8, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + size19 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size19.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + unit51 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit51.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Coffee [unit=GR, amount=0, decaf=true]" + "'", str53, "Coffee [unit=GR, amount=0, decaf=true]");
    }

    @Test
    public void test4490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4490");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee1 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str2 = coffee1.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type3 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean4 = coffee1.equals((java.lang.Object) type3);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk5 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10, type3);
        java.lang.String str6 = milk5.getName();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size9 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe11 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size9, (int) '4');
        boolean boolean13 = recipe11.equals((java.lang.Object) 10.0d);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "Welcome to Cafe", 0.0d);
        boolean boolean18 = recipe11.equals((java.lang.Object) (byte) 0);
        uk.ac.sheffield.com1003.cafe.Order order22 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException", (double) 100L, "Order: ; For: Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0; Paid: -1.0");
        boolean boolean23 = milk5.equals((java.lang.Object) recipe11);
        uk.ac.sheffield.com1003.cafe.Order order27 = new uk.ac.sheffield.com1003.cafe.Order(recipe11, "Order: Water [unit=ML, amount=30]; For: Milk [unit=ML, amount=10, type=SKIMMED]; Paid: 0.0", (double) 'a', "Milk [unit=ML, amount=10, type=WHOLE]");
        order27.printReceipt();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str2, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type3.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Milk" + "'", str6, "Milk");
        org.junit.Assert.assertTrue("'" + size9 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size9.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4491");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Order: ; For: hi!; Paid: 0.0", 10.0d);
        boolean boolean3 = recipe2.isReady();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size6 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe8 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size6, (int) (short) 10);
        double double9 = recipe8.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order12 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "Welcome to Cafe", (double) 10);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe8, "", (double) (short) 10, "Water [unit=ML, amount=30]");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water17 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str18 = water17.toString();
        recipe8.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water17);
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water17);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + size6 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size6.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Water [unit=ML, amount=30]" + "'", str18, "Water [unit=ML, amount=30]");
    }

    @Test
    public void test4492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4492");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size2, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk9 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk9);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee11 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str12 = coffee11.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type13 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean14 = coffee11.equals((java.lang.Object) type13);
        java.lang.String str15 = coffee11.toString();
        java.lang.Object obj16 = null;
        boolean boolean17 = coffee11.equals(obj16);
        java.lang.String str18 = coffee11.getName();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee11);
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("Cafe", (double) (-1));
        uk.ac.sheffield.com1003.cafe.Order order26 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Welcome to Syrup [unit=ML, amount=10, flavour=Order: ; For: Coffee [unit=GR, amount=0, decaf=false]; Paid: 0.0]", (double) (short) 100, "Syrup [unit=ML, amount=10, flavour=Cafe]");
        boolean boolean27 = recipe4.equals((java.lang.Object) (short) 100);
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk29 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk((int) (short) -1);
        uk.ac.sheffield.com1003.cafe.ingredients.Unit unit30 = milk29.getUnit();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk29);
        uk.ac.sheffield.com1003.cafe.ingredients.Water water32 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str33 = water32.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee35 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((-1));
        boolean boolean36 = water32.equals((java.lang.Object) (-1));
        java.lang.String str37 = water32.toString();
        java.lang.String str38 = water32.toString();
        java.lang.Object obj39 = null;
        boolean boolean40 = water32.equals(obj39);
        java.lang.String str41 = water32.getName();
        recipe4.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water32);
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str12, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type13.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str15, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Coffee" + "'", str18, "Coffee");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + unit30 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML + "'", unit30.equals(uk.ac.sheffield.com1003.cafe.ingredients.Unit.ML));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Water [unit=ML, amount=30]" + "'", str33, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Water [unit=ML, amount=30]" + "'", str37, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Water [unit=ML, amount=30]" + "'", str38, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Water" + "'", str41, "Water");
    }

    @Test
    public void test4493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4493");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe0.getMenu();
        cafe0.printMenu();
        cafe0.printPendingOrders();
        uk.ac.sheffield.com1003.cafe.Cafe cafe9 = new uk.ac.sheffield.com1003.cafe.Cafe("Welcome to Order: ; For: Water; Paid: 1.0", 1, 35);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size12 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe14 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size12, (int) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order17 = new uk.ac.sheffield.com1003.cafe.Order(recipe14, "Milk [unit=ML, amount=10, type=WHOLE]", (-1.0d));
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk19 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(10);
        recipe14.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) milk19);
        double double21 = recipe14.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Water water22 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str23 = water22.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk25 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean26 = water22.equals((java.lang.Object) 30);
        java.lang.String str27 = water22.toString();
        java.lang.String str28 = water22.getName();
        java.lang.String str29 = water22.toString();
        java.lang.String str30 = water22.toString();
        recipe14.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) water22);
        uk.ac.sheffield.com1003.cafe.Recipe recipe34 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk", (double) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order38 = new uk.ac.sheffield.com1003.cafe.Order(recipe34, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (short) -1, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee41 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 0, false);
        recipe34.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee41);
        boolean boolean43 = recipe14.equals((java.lang.Object) recipe34);
        uk.ac.sheffield.com1003.cafe.Order order46 = new uk.ac.sheffield.com1003.cafe.Order(recipe34, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) 10.0f);
        java.lang.String str47 = recipe34.getName();
        boolean boolean48 = cafe9.addRecipe(recipe34);
        boolean boolean49 = cafe0.addRecipe(recipe34);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertTrue("'" + size12 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size12.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Water" + "'", str23, "Water");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Water [unit=ML, amount=30]" + "'", str27, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Water" + "'", str28, "Water");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Water [unit=ML, amount=30]" + "'", str29, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Water [unit=ML, amount=30]" + "'", str30, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Milk" + "'", str47, "Milk");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test4494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4494");
        uk.ac.sheffield.com1003.cafe.Recipe recipe2 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        uk.ac.sheffield.com1003.cafe.Order order5 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: ; For: Welcome to Cafe; Paid: 10.0", 1.0d);
        double double6 = recipe2.getPrice();
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee9 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) '4', true);
        boolean boolean11 = coffee9.equals((java.lang.Object) 10L);
        boolean boolean13 = coffee9.equals((java.lang.Object) (-1.0f));
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee9);
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee15 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee();
        java.lang.String str16 = coffee15.toString();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type type17 = uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED;
        boolean boolean18 = coffee15.equals((java.lang.Object) type17);
        java.lang.String str19 = coffee15.toString();
        java.lang.Object obj20 = null;
        boolean boolean21 = coffee15.equals(obj20);
        java.lang.String str22 = coffee15.getName();
        recipe2.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee15);
        uk.ac.sheffield.com1003.cafe.Order order26 = new uk.ac.sheffield.com1003.cafe.Order(recipe2, "Order: Milk [unit=ML, amount=100, type=WHOLE]; For: Coffee [unit=GR, amount=8, decaf=false]; Paid: -1.0", 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str16, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED + "'", type17.equals(uk.ac.sheffield.com1003.cafe.ingredients.Milk.Type.SKIMMED));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Coffee [unit=GR, amount=8, decaf=false]" + "'", str19, "Coffee [unit=GR, amount=8, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Coffee" + "'", str22, "Coffee");
    }

    @Test
    public void test4495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4495");
        uk.ac.sheffield.com1003.cafe.Cafe cafe1 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        cafe1.printMenu();
        uk.ac.sheffield.com1003.cafe.Recipe[] recipeArray3 = cafe1.getMenu();
        uk.ac.sheffield.com1003.cafe.Cafe cafe5 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Cafe cafe7 = new uk.ac.sheffield.com1003.cafe.Cafe("");
        uk.ac.sheffield.com1003.cafe.Recipe recipe10 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk [unit=ML, amount=100, type=WHOLE]", (double) 0);
        boolean boolean11 = cafe7.addRecipe(recipe10);
        boolean boolean12 = cafe5.addRecipe(recipe10);
        uk.ac.sheffield.com1003.cafe.Order order16 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Coffee [unit=GR, amount=8, decaf=false]", 0.0d, "Order: ; For: Water; Paid: 1.0");
        boolean boolean17 = cafe1.addRecipe(recipe10);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size20 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe22 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size20, (int) (short) 10);
        boolean boolean24 = recipe22.equals((java.lang.Object) 10.0f);
        uk.ac.sheffield.com1003.cafe.Order order27 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Order order31 = new uk.ac.sheffield.com1003.cafe.Order(recipe22, "Welcome to Cafe", 1.0d, "Water [unit=ML, amount=30]");
        boolean boolean32 = recipe10.equals((java.lang.Object) order31);
        uk.ac.sheffield.com1003.cafe.Order order35 = new uk.ac.sheffield.com1003.cafe.Order(recipe10, "Welcome to Syrup", 0.0d);
        org.junit.Assert.assertNotNull(recipeArray3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + size20 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size20.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test4496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4496");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException]", (int) '4', 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = cafe3.placeOrder("Order: Water [unit=ML, amount=30]; For: ; Paid: 30.0", "Welcome to Milk [unit=ML, amount=30, type=WHOLE]", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException; message: null");
        } catch (uk.ac.sheffield.com1003.cafe.exceptions.CafeOutOfCapacityException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4497");
        uk.ac.sheffield.com1003.cafe.Cafe cafe3 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Order: Water [unit=ML, amount=30]; For: Order: ; For: Water; Paid: 1.0; Paid: 1.0; Paid: 8.0", (int) (short) 10, (int) (short) 1);
    }

    @Test
    public void test4498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4498");
        uk.ac.sheffield.com1003.cafe.Recipe.Size size2 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe4 = new uk.ac.sheffield.com1003.cafe.Recipe("Coffee [unit=GR, amount=8, decaf=false]", (double) (-1), size2, 0);
        uk.ac.sheffield.com1003.cafe.Order order7 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Order: ; For: hi!; Paid: 0.0", (double) 'a');
        uk.ac.sheffield.com1003.cafe.Order order10 = new uk.ac.sheffield.com1003.cafe.Order(recipe4, "Milk [unit=ML, amount=0, type=SKIMMED]", (double) 0.0f);
        boolean boolean11 = recipe4.isReady();
        double double12 = recipe4.getPrice();
        org.junit.Assert.assertTrue("'" + size2 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size2.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
    }

    @Test
    public void test4499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4499");
        uk.ac.sheffield.com1003.cafe.ingredients.Water water0 = new uk.ac.sheffield.com1003.cafe.ingredients.Water();
        java.lang.String str1 = water0.getName();
        uk.ac.sheffield.com1003.cafe.ingredients.Milk milk3 = new uk.ac.sheffield.com1003.cafe.ingredients.Milk(30);
        boolean boolean4 = water0.equals((java.lang.Object) 30);
        java.lang.String str5 = water0.toString();
        java.lang.String str6 = water0.getName();
        java.lang.String str7 = water0.toString();
        uk.ac.sheffield.com1003.cafe.Cafe cafe11 = new uk.ac.sheffield.com1003.cafe.Cafe("Order: ; For: Syrup [unit=ML, amount=10, flavour=Order: ; For: Welcome to Cafe; Paid: 10.0]; Paid: 10.0", (int) ' ', (int) (byte) 100);
        uk.ac.sheffield.com1003.cafe.Recipe.Size size14 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe16 = new uk.ac.sheffield.com1003.cafe.Recipe("Water [unit=ML, amount=30]", (double) 10, size14, (int) '4');
        boolean boolean18 = recipe16.equals((java.lang.Object) 10.0d);
        double double19 = recipe16.getPrice();
        uk.ac.sheffield.com1003.cafe.Order order23 = new uk.ac.sheffield.com1003.cafe.Order(recipe16, "Order: ; For: Water; Paid: 1.0", (double) (short) 1, "Order: ; For: uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException; Paid: 0.0");
        boolean boolean24 = cafe11.addRecipe(recipe16);
        uk.ac.sheffield.com1003.cafe.Recipe recipe27 = new uk.ac.sheffield.com1003.cafe.Recipe("Milk", (double) (short) 10);
        uk.ac.sheffield.com1003.cafe.Order order31 = new uk.ac.sheffield.com1003.cafe.Order(recipe27, "uk.ac.sheffield.com1003.cafe.exceptions.TooManyIngredientsException", (double) (short) -1, "uk.ac.sheffield.com1003.cafe.exceptions.RecipeNotFoundException");
        uk.ac.sheffield.com1003.cafe.ingredients.Coffee coffee34 = new uk.ac.sheffield.com1003.cafe.ingredients.Coffee((int) (short) 0, false);
        recipe27.addIngredient((uk.ac.sheffield.com1003.cafe.ingredients.Ingredient) coffee34);
        boolean boolean36 = recipe16.equals((java.lang.Object) coffee34);
        uk.ac.sheffield.com1003.cafe.Cafe cafe38 = new uk.ac.sheffield.com1003.cafe.Cafe("Syrup [unit=ML, amount=10, flavour=Plain]");
        boolean boolean39 = coffee34.equals((java.lang.Object) cafe38);
        java.lang.String str40 = coffee34.toString();
        boolean boolean41 = water0.equals((java.lang.Object) coffee34);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Water" + "'", str1, "Water");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Water [unit=ML, amount=30]" + "'", str5, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Water" + "'", str6, "Water");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Water [unit=ML, amount=30]" + "'", str7, "Water [unit=ML, amount=30]");
        org.junit.Assert.assertTrue("'" + size14 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size14.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Coffee [unit=GR, amount=0, decaf=false]" + "'", str40, "Coffee [unit=GR, amount=0, decaf=false]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test4500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test4500");
        uk.ac.sheffield.com1003.cafe.Cafe cafe0 = new uk.ac.sheffield.com1003.cafe.Cafe();
        cafe0.printPendingOrders();
        java.lang.String str2 = cafe0.greeting();
        uk.ac.sheffield.com1003.cafe.Recipe.Size size5 = uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR;
        uk.ac.sheffield.com1003.cafe.Recipe recipe7 = new uk.ac.sheffield.com1003.cafe.Recipe("", (double) (short) 10, size5, (int) (short) 10);
        java.lang.String str8 = recipe7.getName();
        boolean boolean9 = cafe0.addRecipe(recipe7);
        double double10 = recipe7.getPrice();
        boolean boolean11 = recipe7.isReady();
        uk.ac.sheffield.com1003.cafe.ingredients.Ingredient ingredient12 = null;
        recipe7.addIngredient(ingredient12);
        uk.ac.sheffield.com1003.cafe.Order order17 = new uk.ac.sheffield.com1003.cafe.Order(recipe7, "Order: ; For: Order: Water [unit=ML, amount=30]; For: ; Paid: -1.0; Paid: 0.0", (double) 0L, "Water [unit=ML, amount=0]");
        order17.printReceipt();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Welcome to Cafe" + "'", str2, "Welcome to Cafe");
        org.junit.Assert.assertTrue("'" + size5 + "' != '" + uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR + "'", size5.equals(uk.ac.sheffield.com1003.cafe.Recipe.Size.REGULAR));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }
}

