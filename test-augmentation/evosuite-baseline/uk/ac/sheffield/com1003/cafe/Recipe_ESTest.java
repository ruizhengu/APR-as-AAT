/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 12:52:06 GMT 2023
 */

package uk.ac.sheffield.com1003.cafe;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.ac.sheffield.com1003.cafe.Recipe;
import uk.ac.sheffield.com1003.cafe.ingredients.Milk;
import uk.ac.sheffield.com1003.cafe.ingredients.Syrup;
import uk.ac.sheffield.com1003.cafe.ingredients.Water;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Recipe_ESTest extends Recipe_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Recipe recipe0 = new Recipe("M!;YyAm=~gwr<", 562.0);
      Recipe recipe1 = new Recipe("M!;YyAm=~gwr<", (-589.0));
      boolean boolean0 = recipe0.equals(recipe1);
      assertEquals((-589.0), recipe1.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("ALMOND", 711.3, recipe_Size0, 1);
      double double0 = recipe0.getPrice();
      assertEquals(711.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Recipe recipe0 = new Recipe("7w<%U5Cwk", (-1927.0340263974));
      double double0 = recipe0.getPrice();
      assertEquals((-1927.0340263974), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.SMALL;
      Recipe recipe0 = new Recipe((String) null, 0.0, recipe_Size0, 0);
      recipe0.getName();
      assertEquals(0.0, recipe0.getPrice(), 0.01);
      assertTrue(recipe0.isReady());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = null;
      try {
        recipe0 = new Recipe("SMALL", (-2), recipe_Size0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("Coffee [unit=", 0.0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("Water [unit=ML, amount=0]", 0, recipe_Size0, 1086);
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(boolean0);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertTrue(recipe0.isReady());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Recipe recipe0 = new Recipe("I7s )Rx", 0.0);
      Recipe recipe1 = new Recipe("I7s )Rx", 0.0);
      assertFalse(recipe1.isReady());
      
      boolean boolean0 = recipe0.equals(recipe1);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Recipe recipe0 = new Recipe("j[t9sO&8RMV'f]j-", 651.4645529);
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe1 = new Recipe("j[t9sO&8RMV'f]j-", 651.4645529, recipe_Size0, 0);
      boolean boolean0 = recipe0.equals(recipe1);
      assertTrue(recipe1.isReady());
      assertEquals(651.4645529, recipe1.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("dJ:1^qdDtkCCHbp", 0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("dJ:1^qdDtkCCHbp", 1681.5, recipe_Size0, 0);
      boolean boolean0 = recipe0.equals(recipe1);
      assertFalse(recipe1.equals((Object)recipe0));
      assertFalse(boolean0);
      assertTrue(recipe1.isReady());
      assertEquals(1681.5, recipe1.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("Coffee [unit=", 0.0, recipe_Size0, 0);
      boolean boolean0 = recipe0.equals(recipe_Size0);
      assertTrue(recipe0.isReady());
      assertEquals(0.0, recipe0.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("Coffee [unit=", 0.0, recipe_Size0, 0);
      boolean boolean0 = recipe0.equals(recipe0);
      assertTrue(recipe0.isReady());
      assertTrue(boolean0);
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("ALMOND", 711.3, recipe_Size0, 1);
      assertFalse(recipe0.isReady());
      
      Water water0 = new Water();
      recipe0.addIngredient(water0);
      boolean boolean0 = recipe0.isReady();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("ALMOND", 711.3, recipe_Size0, 1);
      boolean boolean0 = recipe0.isReady();
      assertEquals(711.3, recipe0.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("Coffee [unit=", 0.0, recipe_Size0, 0);
      Recipe recipe1 = new Recipe("Water [unit=ML, amount=0]", 0, recipe_Size0, 0);
      boolean boolean0 = recipe0.equals(recipe1);
      assertEquals(0.0, recipe1.getPrice(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Recipe recipe0 = new Recipe("", 1430.4938324833518);
      Milk milk0 = new Milk(2138);
      recipe0.addIngredient(milk0);
      recipe0.addIngredient(milk0);
      assertEquals(1430.4938324833518, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Recipe recipe0 = new Recipe("2", (-3124.166021452424));
      Milk.Type milk_Type0 = Milk.Type.WHOLE;
      Milk milk0 = new Milk((-2021), milk_Type0);
      recipe0.addIngredient(milk0);
      Water water0 = new Water();
      recipe0.addIngredient(water0);
      assertEquals((-3124.166021452424), recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("Coffee [unit=", 0.0, recipe_Size0, 0);
      Syrup syrup0 = new Syrup("I*Gs(|JH");
      try { 
        recipe0.addIngredient(syrup0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.ac.sheffield.com1003.cafe.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("Coffee [unit=", 0.0, recipe_Size0, 0);
      double double0 = recipe0.getPrice();
      assertEquals(0.0, double0, 0.01);
      assertTrue(recipe0.isReady());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.REGULAR;
      Recipe recipe0 = new Recipe("Coffee [unit=", 0.0, recipe_Size0, 0);
      recipe0.hashCode();
      assertTrue(recipe0.isReady());
      assertEquals(0.0, recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Recipe recipe0 = new Recipe("", (-1544.6152190925));
      recipe0.getName();
      assertEquals((-1544.6152190925), recipe0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Recipe.Size recipe_Size0 = Recipe.Size.LARGE;
      Recipe recipe0 = new Recipe("ALMOND", 711.3, recipe_Size0, 1);
      recipe0.getName();
      assertFalse(recipe0.isReady());
      assertEquals(711.3, recipe0.getPrice(), 0.01);
  }
}
